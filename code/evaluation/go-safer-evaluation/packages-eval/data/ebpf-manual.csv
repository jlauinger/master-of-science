file_name,line_number,text,label
map.go,255, valuePtr := newPtr(unsafe.Pointer(&valueBytes[0])),NO
map.go,354, nextKeyPtr := newPtr(unsafe.Pointer(&nextKey[0])),NO
marshalers.go,17, if ptr; ok := data.(unsafe.Pointer); ok {,NO
marshalers.go,26, return newPtr(unsafe.Pointer(&buf[0])); nil,NO
marshalers.go,37, case unsafe.Pointer:,NO
marshalers.go,38, err = errors.New("can't marshal from unsafe.Pointer"),NO
marshalers.go,56, if ptr; ok := dst.(unsafe.Pointer); ok {,NO
marshalers.go,61, return newPtr(unsafe.Pointer(&buf[0])); buf,NO
marshalers.go,66, case unsafe.Pointer:,NO
marshalers.go,67, sh := &reflect.SliceHeader{,NO
marshalers.go,68, Data: uintptr(value);,NO
marshalers.go,73, dst := *(*[]byte)(unsafe.Pointer(sh)),NO
marshalers.go,103, sliceType := reflect.TypeOf(slice),NO
marshalers.go,104, if sliceType.Kind() != reflect.Slice {,NO
marshalers.go,113, sliceValue := reflect.ValueOf(slice),NO
marshalers.go,133, return newPtr(unsafe.Pointer(&buf[0])); nil,NO
marshalers.go,141, slicePtrType := reflect.TypeOf(slicePtr),NO
marshalers.go,142, if slicePtrType.Kind() != reflect.Ptr || slicePtrType.Elem().Kind() != reflect.Slice {,NO
marshalers.go,152, slice := reflect.MakeSlice(sliceType; possibleCPUs; possibleCPUs),NO
marshalers.go,155, sliceElemIsPointer := sliceElemType.Kind() == reflect.Ptr,NO
marshalers.go,167, newElem := reflect.New(sliceElemType),NO
marshalers.go,186, reflect.ValueOf(slicePtr).Elem().Set(slice),NO
prog.go,108, attr.logBuf = newPtr(unsafe.Pointer(&logBuf[0])),NO
prog.go,124, attr.logBuf = newPtr(unsafe.Pointer(&logBuf[0])),NO
prog.go,186, instructions: newPtr(unsafe.Pointer(&bytecode[0]));,NO
prog.go,187, license: newPtr(unsafe.Pointer(&lic[0]));,NO
prog.go,312, dataIn: newPtr(unsafe.Pointer(&in[0]));,NO
prog.go,315, _; err = bpfCall(_ProgTestRun; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
prog.go,353, dataIn: newPtr(unsafe.Pointer(&in[0]));,NO
prog.go,354, dataOut: newPtr(unsafe.Pointer(&out[0]));,NO
prog.go,358, _; err = bpfCall(_ProgTestRun; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
ptr_32_be.go,9,// ptr wraps an unsafe.Pointer to be 64bit to,NO
ptr_32_be.go,13, ptr unsafe.Pointer,NO
ptr_32_le.go,9,// ptr wraps an unsafe.Pointer to be 64bit to,NO
ptr_32_le.go,12, ptr unsafe.Pointer,NO
ptr_64.go,10,// ptr wraps an unsafe.Pointer to be 64bit to,NO
ptr_64.go,13, ptr unsafe.Pointer,NO
syscalls.go,61, dup; err := unix.FcntlInt(uintptr(fd.raw); unix.F_DUPFD_CLOEXEC; 0),NO
syscalls.go,194,func newPtr(ptr unsafe.Pointer) syscallPtr {,NO
syscalls.go,200, fd; err := bpfCall(_ProgLoad; unsafe.Pointer(attr); unsafe.Sizeof(*attr)),NO
syscalls.go,216, _; err := bpfCall(cmd; unsafe.Pointer(attr); unsafe.Sizeof(*attr)),NO
syscalls.go,221, fd; err := bpfCall(_MapCreate; unsafe.Pointer(attr); unsafe.Sizeof(*attr)),NO
syscalls.go,240, _; err = bpfCall(_MapLookupElem; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
syscalls.go,256, _; err = bpfCall(_MapUpdateElem; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
syscalls.go,270, _; err = bpfCall(_MapDeleteElem; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
syscalls.go,285, _; err = bpfCall(_MapGetNextKey; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
syscalls.go,306, _; err = bpfCall(_ObjPin; unsafe.Pointer(&bpfPinObjAttr{,NO
syscalls.go,307, fileName: newPtr(unsafe.Pointer(&[]byte(fileName)[0]));,NO
syscalls.go,314, ptr; err := bpfCall(_ObjGet; unsafe.Pointer(&bpfPinObjAttr{,NO
syscalls.go,315, fileName: newPtr(unsafe.Pointer(&[]byte(fileName)[0]));,NO
syscalls.go,323,func bpfGetObjectInfoByFD(fd *bpfFD; info unsafe.Pointer; size uintptr) error {,NO
syscalls.go,335, _; err = bpfCall(_ObjGetInfoByFD; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
syscalls.go,341, err := bpfGetObjectInfoByFD(fd; unsafe.Pointer(&info); unsafe.Sizeof(info)),NO
syscalls.go,347, err := bpfGetObjectInfoByFD(fd; unsafe.Pointer(&info); unsafe.Sizeof(info)),NO
syscalls.go,383, ptr; err := bpfCall(_MapGetFDByID; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
syscalls.go,395, ptr; err := bpfCall(_ProgGetFDByID; unsafe.Pointer(&attr); unsafe.Sizeof(attr)),NO
syscalls.go,402,func bpfCall(cmd int; attr unsafe.Pointer; size uintptr) (uintptr; error) {,NO
syscalls.go,403, r1; _; errNo := unix.Syscall(unix.SYS_BPF; uintptr(cmd); uintptr(attr); size),NO
