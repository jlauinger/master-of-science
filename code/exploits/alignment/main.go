package main

import (
	"fmt"
	"unsafe"
)

type BlueStruct struct {
	Aa uint8
	Ab uint8
	Ac uint8
	Ad uint8
	B int32
	C float64
}

type OrangeStruct struct {
	A int32
	B int32
	C float64
}

type PinkStruct struct  {
	A uint8
	B int
	C int64
}

type VioletStruct struct  {
	A uint8
	B int64
	C int64
}

func main() {
	s := BlueStruct{
		Aa: 1,
		Ab: 1,
		B: 42,
		C: 9000.1,
	}

	fmt.Println(unsafe.Offsetof(s.Aa))
	fmt.Println(unsafe.Offsetof(s.B))
	fmt.Println(unsafe.Offsetof(s.C))

	fmt.Println(unsafe.Sizeof(s))
	fmt.Println(unsafe.Sizeof(s.Aa))
	fmt.Println(unsafe.Sizeof(s.B))
	fmt.Println(unsafe.Sizeof(s.C))

	fmt.Println("---")

	t := *(*OrangeStruct)(unsafe.Pointer(&s))

	fmt.Println(t.A)
	fmt.Println(t.B)
	fmt.Println(t.C)

	fmt.Println("---")

	bytes := []byte{1, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	//             <A>                     <----B---.............->  <---------C---------->

	v := *(*PinkStruct)(unsafe.Pointer(&bytes[0]))

	fmt.Println(v.A)
	fmt.Println(v.B)
	fmt.Println(v.C)

	fmt.Println(unsafe.Offsetof(v.A))
	fmt.Println(unsafe.Offsetof(v.B))
	fmt.Println(unsafe.Offsetof(v.C))

	fmt.Println("----")

	pink := PinkStruct{
		A: 1,
		B: 42,
		C: 9000,
	}

	violet := *(*VioletStruct)(unsafe.Pointer(&pink))

	fmt.Println(violet.A)
	fmt.Println(violet.B)
	fmt.Println(violet.C)
}
