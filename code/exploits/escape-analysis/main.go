package main

import (
"fmt"
"reflect"
"unsafe"
)

func main() {
	result:= GetString()
	fmt.Printf("main:%s\n",result)//expected stdout is "12345678"
}

// BytesToString converts byte slice to string.
func BytesToString(b []byte) string {
	bytesHeader := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	strHeader := reflect.StringHeader{
		Data: bytesHeader.Data,
		Len:  bytesHeader.Len,
	}
	return *(*string)(unsafe.Pointer(&strHeader))
}

// StringToBytes converts string to byte slice.
func StringToBytes(s string) []byte {
	sh := (*reflect.StringHeader)(unsafe.Pointer(&s))
	bh := reflect.SliceHeader{
		Data: sh.Data,
		Len:  sh.Len,
		Cap:  sh.Len,
	}
	return *(*[]byte)(unsafe.Pointer(&bh))
}

func GetString() string {
	b := make([]byte, 8)
	str:="12345678"
	copy(b,str)
	out:=BytesToString(b)
	fmt.Printf("GetString:%s\n",out)//expected stdout is "12345678"
	return out
}

