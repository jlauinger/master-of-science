,Unnamed: 0,Unnamed: 0.1,Unnamed: 0.1.1,Unnamed: 0.1.1.1,Unnamed: 0.1.1.1.1,text,context,line_number,column,absolute_offset,match_type,context_type,file_name,file_loc,file_byte_size,package_import_path,module_path,module_version,project_name,label,label2
0,0,0,0,0,0,"func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {","	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
	_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",1520.0,49.0,36321.0,unsafe.Pointer,parameter,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
1,1,1,1,1,343,"func (sa *SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error) {","		sa.raw.Addr[i] = sa.Addr[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrInet4, nil
}

func (sa *SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET6
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))",358.0,38.0,8701.0,unsafe.Pointer,parameter,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,cast-pointer,serialization
2,2,2,2,2,686,"k := *((*unsafe.Pointer)(add(unsafe.Pointer(b), dataOffset+i*8)))","				if b.tophash[i] == emptyRest {
					break bucketloop
				}
				continue
			}
			k := *((*unsafe.Pointer)(add(unsafe.Pointer(b), dataOffset+i*8)))
			if k != key {
				continue
			}
			insertb = b
			inserti = i",226.0,13.0,5984.0,unsafe.Pointer,assignment,map_fast64.go,458.0,12663.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,efficiency
3,3,3,3,3,1372,"_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",145.0,60.0,3571.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
4,4,4,4,4,1388,_p1 = unsafe.Pointer(&_zero),"	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_FGETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), 0, 0)
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",659.0,9.0,16418.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
5,5,5,5,5,1402,pp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa)),"			return nil, err
		}

		switch proto {
		case IPPROTO_L2TP:
			pp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))
			sa := new(SockaddrL2TPIP)
			sa.ConnId = pp.Conn_id
			for i := 0; i < len(sa.Addr); i++ {
				sa.Addr[i] = pp.Addr[i]
			}",933.0,31.0,26772.0,unsafe.Pointer,assignment,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-struct,serialization
6,6,6,6,6,1409,"elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))","		for i := uintptr(0); i < bucketCnt; i++ {
			if b.tophash[i] != top {
				if isEmpty(b.tophash[i]) && inserti == nil {
					inserti = &b.tophash[i]
					insertk = add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))
					elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				}
				if b.tophash[i] == emptyRest {
					break bucketloop
				}
				continue",615.0,17.0,20675.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,types
7,7,7,7,7,1752,"func efaceeq(t *_type, x, y unsafe.Pointer) bool {","func nilinterequal(p, q unsafe.Pointer) bool {
	x := *(*eface)(p)
	y := *(*eface)(q)
	return x._type == y._type && efaceeq(x._type, x.data, y.data)
}
func efaceeq(t *_type, x, y unsafe.Pointer) bool {
	if t == nil {
		return true
	}
	eq := t.equal
	if eq == nil {",279.0,29.0,7325.0,unsafe.Pointer,parameter,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,memory-access,types
8,8,8,8,8,2095,"func resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer","}

// resolveNameOff resolves a name offset from a base pointer.
// The (*rtype).nameOff method is a convenience wrapper for this function.
// Implemented in the runtime package.
func resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer

// resolveTypeOff resolves an *rtype offset from a base type.
// The (*rtype).typeOff method is a convenience wrapper for this function.
// Implemented in the runtime package.
func resolveTypeOff(rtype unsafe.Pointer, off int32) unsafe.Pointer",642.0,33.0,19119.0,unsafe.Pointer,parameter,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,definition,layout
9,9,9,9,9,2782,"_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(target)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1532.0,43.0,37620.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
10,10,10,10,10,2788,var _cgo_munmap unsafe.Pointer,"var _cgo_mmap unsafe.Pointer

// _cgo_munmap is filled in by runtime/cgo when it is linked into the
// program, so it is only non-nil when using cgo.
//go:linkname _cgo_munmap _cgo_munmap
var _cgo_munmap unsafe.Pointer

// mmap is used to route the mmap system call through C code when using cgo, to
// support sanitizer interceptors. Don't allow stack splits, since this function
// (used by sysAlloc) is called in a lot of low-level parts of the runtime and
// callers often assume it won't acquire any locks.",21.0,17.0,644.0,unsafe.Pointer,variable,cgo_mmap.go,67.0,2434.0,runtime,std,std,kubernetes/kubernetes,definition,ffi
11,11,11,11,11,3131,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func readv(fd int, iovs []Iovec) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1598.0,10.0,39037.0,unsafe.Pointer,variable,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
12,12,12,12,12,3139,cid := (*[2]byte)(unsafe.Pointer(&sa.raw.Cid)),"	psm[0] = byte(sa.PSM)
	psm[1] = byte(sa.PSM >> 8)
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Bdaddr[i] = sa.Addr[len(sa.Addr)-1-i]
	}
	cid := (*[2]byte)(unsafe.Pointer(&sa.raw.Cid))
	cid[0] = byte(sa.CID)
	cid[1] = byte(sa.CID >> 8)
	sa.raw.Bdaddr_type = sa.AddrType
	return unsafe.Pointer(&sa.raw), SizeofSockaddrL2, nil
}",505.0,20.0,13178.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,cast-pointer,serialization
13,13,13,13,13,3145,"return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))","func PtracePokeData(pid int, addr uintptr, data []byte) (count int, err error) {
	return ptracePoke(PTRACE_POKEDATA, PTRACE_PEEKDATA, pid, addr, data)
}

func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error) {
	return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))
}

func PtraceSetRegs(pid int, regs *PtraceRegs) (err error) {
	return ptrace(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs)))
}",816.0,48.0,20324.0,unsafe.Pointer,assignment,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,delegate,ffi
14,14,14,14,14,3490,"_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pipe2(p *[2]_C_int, flags int) (err error) {
	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1851.0,44.0,45250.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
15,15,15,15,15,3499,ityp := (*interfacetype)(unsafe.Pointer(f.fint)),"				switch f.fint.kind & kindMask {
				case kindPtr:
					// direct use of pointer
					*(*unsafe.Pointer)(frame) = f.arg
				case kindInterface:
					ityp := (*interfacetype)(unsafe.Pointer(f.fint))
					// set up with empty interface
					(*eface)(frame)._type = &f.ot.typ
					(*eface)(frame).data = f.arg
					if len(ityp.mhdr) != 0 {
						// convert to interface with methods",209.0,31.0,5907.0,unsafe.Pointer,assignment,mfinal.go,453.0,15158.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
16,16,16,16,16,3844,dumpint(uint64(uintptr(unsafe.Pointer(fn.fn)))),"
func finq_callback(fn *funcval, obj unsafe.Pointer, nret uintptr, fint *_type, ot *ptrtype) {
	dumpint(tagQueuedFinalizer)
	dumpint(uint64(uintptr(obj)))
	dumpint(uint64(uintptr(unsafe.Pointer(fn))))
	dumpint(uint64(uintptr(unsafe.Pointer(fn.fn))))
	dumpint(uint64(uintptr(unsafe.Pointer(fint))))
	dumpint(uint64(uintptr(unsafe.Pointer(ot))))
}

func dumproots() {",417.0,25.0,10425.0,unsafe.Pointer,call,heapdump.go,725.0,17514.0,runtime,std,std,kubernetes/kubernetes,cast-basic,layout
17,17,17,17,17,4187,fn  unsafe.Pointer,"var cgoThreadStart unsafe.Pointer

type cgothreadstart struct {
	g   guintptr
	tls *uint64
	fn  unsafe.Pointer
}

// Allocate a new m unassociated with any thread.
// Can use p for allocation context if needed.
// fn is recorded as the new m's m.mstartfn.",1350.0,6.0,39012.0,unsafe.Pointer,variable,proc.go,5418.0,153166.0,runtime,std,std,kubernetes/kubernetes,definition,ffi
18,18,18,18,18,4530,str := (*[maxAlloc/2/2 - 1]uint16)(unsafe.Pointer(strw)),"	return s
}

func gostringw(strw *uint16) string {
	var buf [8]byte
	str := (*[maxAlloc/2/2 - 1]uint16)(unsafe.Pointer(strw))
	n1 := 0
	for i := 0; str[i] != 0; i++ {
		n1 += encoderune(buf[:], rune(str[i]))
	}
	s, b := rawstring(n1 + 4)",481.0,37.0,10773.0,unsafe.Pointer,assignment,string.go,531.0,11797.0,runtime,std,std,kubernetes/kubernetes,cast-basic,types
19,19,19,19,19,4873,"_, _, e1 := Syscall(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",33.0,60.0,813.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
20,20,20,20,20,5216,"err = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))","
	// Remainder.
	for len(out) > 0 {
		// We use an internal buffer to guarantee alignment.
		// It's not documented if this is necessary, but we're paranoid.
		err = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return n, err
		}
		copied := copy(out, buf[0:])
		n += copied",1380.0,51.0,41028.0,unsafe.Pointer,assignment,syscall_linux.go,2100.0,62378.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,delegate,ffi
21,21,21,21,21,5217,*(*unsafe.Pointer)(insertk) = kmem,"	}

	// store new key/elem at insert position
	if t.indirectkey() {
		kmem := newobject(t.key)
		*(*unsafe.Pointer)(insertk) = kmem
		insertk = kmem
	}
	if t.indirectelem() {
		vmem := newobject(t.elem)
		*(*unsafe.Pointer)(elem) = vmem",663.0,6.0,22042.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,memory-access,types
22,22,22,22,22,5561,"func makechan(typ *rtype, size int) (ch unsafe.Pointer)","func chanrecv(ch unsafe.Pointer, nb bool, val unsafe.Pointer) (selected, received bool)

//go:noescape
func chansend(ch unsafe.Pointer, val unsafe.Pointer, nb bool) bool

func makechan(typ *rtype, size int) (ch unsafe.Pointer)
func makemap(t *rtype, cap int) (m unsafe.Pointer)

//go:noescape
func mapaccess(t *rtype, m unsafe.Pointer, key unsafe.Pointer) (val unsafe.Pointer)
",2706.0,41.0,79336.0,unsafe.Pointer,parameter,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,definition,types
23,23,23,23,23,5904,"return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil","func (sa *SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_NETLINK
	sa.raw.Pad = sa.Pad
	sa.raw.Pid = sa.Pid
	sa.raw.Groups = sa.Groups
	return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil
}

func anyToSockaddr(rsa *RawSockaddrAny) (Sockaddr, error) {
	switch rsa.Addr.Family {
	case AF_NETLINK:",439.0,9.0,10581.0,unsafe.Pointer,assignment,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,cast-pointer,efficiency
24,24,24,24,24,6247,_p0 = unsafe.Pointer(&iovs[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func writev(fd int, iovs []Iovec) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_WRITEV, uintptr(fd), uintptr(_p0), uintptr(len(iovs)))
	n = int(r0)",1617.0,9.0,39464.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
25,25,25,25,25,6254,"return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))","
func Futimesat(dirfd int, path string, tv []Timeval) (err error) {
	if len(tv) != 2 {
		return EINVAL
	}
	return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
}

func Futimes(fd int, tv []Timeval) (err error) {
	// Believe it or not, this is the best we can do on Linux
	// (and is what glibc does).",208.0,46.0,5325.0,unsafe.Pointer,assignment,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,cast-struct,efficiency
26,26,26,26,26,6597,"func racereleasemerge(addr unsafe.Pointer)                                  { throw(""race"") }","func raceacquire(addr unsafe.Pointer)                                       { throw(""race"") }
func raceacquireg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }
func raceacquirectx(racectx uintptr, addr unsafe.Pointer)                   { throw(""race"") }
func racerelease(addr unsafe.Pointer)                                       { throw(""race"") }
func racereleaseg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }
func racereleasemerge(addr unsafe.Pointer)                                  { throw(""race"") }
func racereleasemergeg(gp *g, addr unsafe.Pointer)                          { throw(""race"") }
func racefingo()                                                            { throw(""race"") }
func racemalloc(p unsafe.Pointer, sz uintptr)                               { throw(""race"") }
func racefree(p unsafe.Pointer, sz uintptr)                                 { throw(""race"") }
func racegostart(pc uintptr) uintptr                                        { throw(""race""); return 0 }",35.0,28.0,1935.0,unsafe.Pointer,parameter,race0.go,42.0,2670.0,runtime,std,std,kubernetes/kubernetes,unused,unused
27,27,27,27,27,6940,"func StorepNoWB(ptr unsafe.Pointer, val unsafe.Pointer)","
// StorepNoWB performs *ptr = val atomically and without a write
// barrier.
//
// NO go:noescape annotation; see atomic_pointer.go.
func StorepNoWB(ptr unsafe.Pointer, val unsafe.Pointer)",92.0,21.0,1740.0,unsafe.Pointer,parameter,atomic_amd64.go,92.0,1776.0,runtime/internal/atomic,std,std,kubernetes/kubernetes,definition,efficiency
28,28,28,28,28,7627,rx := (*[4]byte)(unsafe.Pointer(&sa.RxID)),"	if sa.Ifindex < 0 || sa.Ifindex > 0x7fffffff {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_CAN
	sa.raw.Ifindex = int32(sa.Ifindex)
	rx := (*[4]byte)(unsafe.Pointer(&sa.RxID))
	for i := 0; i < 4; i++ {
		sa.raw.Addr[i] = rx[i]
	}
	tx := (*[4]byte)(unsafe.Pointer(&sa.TxID))
	for i := 0; i < 4; i++ {",583.0,19.0,15793.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,cast-bytes,serialization
29,29,29,29,29,7638,if nbitp <= uintptr(unsafe.Pointer(h.last)) {,"//go:nosplit
func (h heapBits) forward(n uintptr) heapBits {
	n += uintptr(h.shift) / heapBitsShift
	nbitp := uintptr(unsafe.Pointer(h.bitp)) + n/4
	h.shift = uint32(n%4) * heapBitsShift
	if nbitp <= uintptr(unsafe.Pointer(h.last)) {
		h.bitp = (*uint8)(unsafe.Pointer(nbitp))
		return h
	}

	// We're in a new heap arena.",497.0,22.0,17757.0,unsafe.Pointer,call,mbitmap.go,2083.0,69152.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,layout
30,30,30,30,30,7981,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",967.0,10.0,22802.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
31,31,31,31,31,8324,e = *((*unsafe.Pointer)(e)),"				k = *((*unsafe.Pointer)(k))
			}
			if t.key.equal(key, k) {
				e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				if t.indirectelem() {
					e = *((*unsafe.Pointer)(e))
				}
				return e, true
			}
		}
	}",501.0,14.0,17680.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,types
32,32,32,32,32,8671,st := (*structtype)(unsafe.Pointer(t)),"		}
		if !top {
			panic(errorString(msg))
		}
	case kindStruct:
		st := (*structtype)(unsafe.Pointer(t))
		if !indir {
			if len(st.fields) != 1 {
				throw(""can't happen"")
			}
			cgoCheckArg(st.fields[0].typ, p, st.fields[0].typ.kind&kindDirectIface == 0, top, msg)",561.0,23.0,19099.0,unsafe.Pointer,assignment,cgocall.go,675.0,21888.0,runtime,std,std,kubernetes/kubernetes,cast-struct,ffi
33,33,33,33,33,9014,hdr := (*stringStruct)(unsafe.Pointer(&s)),"	}
	nl := n.nameLen()
	if nl == 0 {
		return """"
	}
	hdr := (*stringStruct)(unsafe.Pointer(&s))
	hdr.str = unsafe.Pointer(n.data(3))
	hdr.len = nl
	return s
}
",475.0,25.0,12195.0,unsafe.Pointer,assignment,type.go,726.0,18709.0,runtime,std,std,kubernetes/kubernetes,cast-header,efficiency
34,34,34,34,34,9357,"_, _, e1 := Syscall(SYS_ACCT, uintptr(unsafe.Pointer(_p0)), 0, 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_ACCT, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",394.0,40.0,10097.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
35,35,35,35,35,9358,p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port)),"func (sa *SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))
	p[0] = byte(sa.Port >> 8)
	p[1] = byte(sa.Port)
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Addr[i] = sa.Addr[i]
	}",349.0,18.0,8454.0,unsafe.Pointer,assignment,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,cast-bytes,serialization
36,36,36,36,36,9701,var _p2 unsafe.Pointer,"	var _p1 *byte
	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(dest) > 0 {
		_p2 = unsafe.Pointer(&dest[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}",894.0,10.0,21993.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
37,37,37,37,37,9703,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",2082.0,10.0,50703.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
38,38,38,38,38,9716,"func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {","	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
	_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",541.0,49.0,13433.0,unsafe.Pointer,parameter,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
39,39,39,39,39,9724,fds[j] = int(*(*int32)(unsafe.Pointer(&m.Data[i]))),"	if m.Header.Type != SCM_RIGHTS {
		return nil, EINVAL
	}
	fds := make([]int, len(m.Data)>>2)
	for i, j := 0, 0; i < len(m.Data); i += 4 {
		fds[j] = int(*(*int32)(unsafe.Pointer(&m.Data[i])))
		j++
	}
	return fds, nil
}",88.0,26.0,2559.0,unsafe.Pointer,assignment,sockcmsg_unix.go,92.0,2616.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,cast-basic,efficiency
40,40,40,40,40,9730,_p1 = unsafe.Pointer(&buf[0]),"	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_READLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)), 0, 0)
	n = int(r0)",118.0,9.0,3054.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
41,41,41,41,41,9731,"func msanwrite(addr unsafe.Pointer, sz uintptr)  { throw(""msan"") }","const msanenabled = false

// Because msanenabled is false, none of these functions should be called.

func msanread(addr unsafe.Pointer, sz uintptr)   { throw(""msan"") }
func msanwrite(addr unsafe.Pointer, sz uintptr)  { throw(""msan"") }
func msanmalloc(addr unsafe.Pointer, sz uintptr) { throw(""msan"") }
func msanfree(addr unsafe.Pointer, sz uintptr)   { throw(""msan"") }",20.0,21.0,466.0,unsafe.Pointer,parameter,msan0.go,22.0,647.0,runtime,std,std,kubernetes/kubernetes,unused,unused
42,42,42,42,42,10074,"func selectnbrecv2(elem unsafe.Pointer, received *bool, c *hchan) (selected bool) {","//		... foo
//	} else {
//		... bar
//	}
//
func selectnbrecv2(elem unsafe.Pointer, received *bool, c *hchan) (selected bool) {
	// TODO(khr): just return 2 values from this function, now that it is in Go.
	selected, *received = chanrecv(c, elem, false)
	return
}
",667.0,25.0,17571.0,unsafe.Pointer,parameter,chan.go,772.0,20178.0,runtime,std,std,kubernetes/kubernetes,delegate,types
43,43,43,43,43,10417,"func (sa *SockaddrHCI) sockaddr() (unsafe.Pointer, _Socklen, error) {","	Dev     uint16
	Channel uint16
	raw     RawSockaddrHCI
}

func (sa *SockaddrHCI) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_BLUETOOTH
	sa.raw.Dev = sa.Dev
	sa.raw.Channel = sa.Channel
	return unsafe.Pointer(&sa.raw), SizeofSockaddrHCI, nil
}",480.0,36.0,12472.0,unsafe.Pointer,parameter,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,cast-pointer,efficiency
44,44,44,44,44,10424,"func mincore(addr unsafe.Pointer, n uintptr, dst *byte) int32","
var procAuxv = []byte(""/proc/self/auxv\x00"")

var addrspace_vec [1]byte

func mincore(addr unsafe.Pointer, n uintptr, dst *byte) int32

func sysargs(argc int32, argv **byte) {
	n := argc + 1

	// skip over argv, envp to get to auxv",195.0,19.0,5852.0,unsafe.Pointer,parameter,os_linux.go,500.0,13478.0,runtime,std,std,kubernetes/kubernetes,definition,layout
45,45,45,45,45,10767,return typeOff(addReflectOff(unsafe.Pointer(t))),"}

// resolveReflectType adds a *rtype to the reflection lookup map in the runtime.
// It returns a new typeOff that can be used to refer to the pointer.
func resolveReflectType(t *rtype) typeOff {
	return typeOff(addReflectOff(unsafe.Pointer(t)))
}

// resolveReflectText adds a function pointer to the reflection lookup map in
// the runtime. It returns a new textOff that can be used to refer to the
// pointer.",668.0,31.0,20395.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,delegate,types
46,46,46,46,46,11110,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1713.0,10.0,42051.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
47,47,47,47,47,11112,"err := ioctl(fd, RTC_SET_TIME, uintptr(unsafe.Pointer(value)))","	v := int32(value)
	return ioctl(fd, req, uintptr(unsafe.Pointer(&v)))
}

func IoctlSetRTCTime(fd int, value *RTCTime) error {
	err := ioctl(fd, RTC_SET_TIME, uintptr(unsafe.Pointer(value)))
	runtime.KeepAlive(value)
	return err
}

func IoctlGetUint32(fd int, req uint) (uint32, error) {",95.0,41.0,2923.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,delegate,ffi
48,48,48,48,48,11118,var _p1 unsafe.Pointer,"	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}",84.0,10.0,2065.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
49,49,49,49,49,11461,_p0 = unsafe.Pointer(&_zero),"func Mprotect(b []byte, prot int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))
	if e1 != 0 {
		err = errnoErr(e1)
	}",1730.0,9.0,42355.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
50,50,50,50,50,11470,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1696.0,10.0,41276.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
51,51,51,51,51,11474,"e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))","			k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))
			if t.indirectkey() {
				k = *((*unsafe.Pointer)(k))
			}
			if t.key.equal(key, k) {
				e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				if t.indirectelem() {
					e = *((*unsafe.Pointer)(e))
				}
				return e
			}",441.0,14.0,15990.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,types
52,52,52,52,52,11817,uintptr(unsafe.Pointer(&envvp[0]))),"		err1 = execveDarwin(argv0p, &argvp[0], &envvp[0])
	} else {
		_, _, err1 = RawSyscall(SYS_EXECVE,
			uintptr(unsafe.Pointer(argv0p)),
			uintptr(unsafe.Pointer(&argvp[0])),
			uintptr(unsafe.Pointer(&envvp[0])))
	}
	runtime_AfterExec()
	return err1
}",291.0,12.0,8262.0,unsafe.Pointer,assignment,exec_unix.go,295.0,8329.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
53,53,53,53,53,12160,"scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)","
	// Scan the saved context register. This is effectively a live
	// register that gets moved back and forth between the
	// register and sched.ctxt without a write barrier.
	if gp.sched.ctxt != nil {
		scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)
	}

	// Scan the stack. Accumulate a list of stack objects.
	scanframe := func(frame *stkframe, unused unsafe.Pointer) bool {
		scanframeworker(frame, &state, gcw)",731.0,21.0,22831.0,unsafe.Pointer,call,mgcmark.go,1585.0,47620.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
54,54,54,54,54,12507,"atomic.StorePointer(&p.local, unsafe.Pointer(&local[0])) // store-release","		allPools = append(allPools, p)
	}
	// If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one.
	size := runtime.GOMAXPROCS(0)
	local := make([]poolLocal, size)
	atomic.StorePointer(&p.local, unsafe.Pointer(&local[0])) // store-release
	atomic.StoreUintptr(&p.localSize, uintptr(size))         // store-release
	return &local[pid], pid
}

func poolCleanup() {",228.0,32.0,6833.0,unsafe.Pointer,call,pool.go,284.0,8346.0,sync,std,std,kubernetes/kubernetes,delegate,atomic
55,55,55,55,55,12850,*(*uint16)(unsafe.Pointer(&b[4:6][0])) = rr.Header.Type,"}

func (rr *NetlinkRouteRequest) toWireFormat() []byte {
	b := make([]byte, rr.Header.Len)
	*(*uint32)(unsafe.Pointer(&b[0:4][0])) = rr.Header.Len
	*(*uint16)(unsafe.Pointer(&b[4:6][0])) = rr.Header.Type
	*(*uint16)(unsafe.Pointer(&b[6:8][0])) = rr.Header.Flags
	*(*uint32)(unsafe.Pointer(&b[8:12][0])) = rr.Header.Seq
	*(*uint32)(unsafe.Pointer(&b[12:16][0])) = rr.Header.Pid
	b[16] = byte(rr.Data.Family)
	return b",32.0,13.0,897.0,unsafe.Pointer,assignment,netlink_linux.go,179.0,4777.0,syscall,std,std,kubernetes/kubernetes,cast-bytes,serialization
56,56,56,56,56,13193,"func (sa *SockaddrVM) sockaddr() (unsafe.Pointer, _Socklen, error) {","	CID  uint32
	Port uint32
	raw  RawSockaddrVM
}

func (sa *SockaddrVM) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_VSOCK
	sa.raw.Port = sa.Port
	sa.raw.Cid = sa.CID

	return unsafe.Pointer(&sa.raw), SizeofSockaddrVM, nil",707.0,35.0,20180.0,unsafe.Pointer,parameter,syscall_linux.go,1973.0,58748.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,cast-pointer,efficiency
57,57,57,57,57,13197,_p0 = unsafe.Pointer(&_zero),"func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}",1788.0,9.0,43600.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
58,58,58,58,58,13204,"func callCgoMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uint32) uintptr","// sysMmap calls the mmap system call. It is implemented in assembly.
func sysMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uint32) (p unsafe.Pointer, err int)

// callCgoMmap calls the mmap function in the runtime/cgo package
// using the GCC calling convention. It is implemented in assembly.
func callCgoMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uint32) uintptr

// sysMunmap calls the munmap system call. It is implemented in assembly.
func sysMunmap(addr unsafe.Pointer, n uintptr)

// callCgoMunmap calls the munmap function in the runtime/cgo package",60.0,23.0,2052.0,unsafe.Pointer,parameter,cgo_mmap.go,67.0,2434.0,runtime,std,std,kubernetes/kubernetes,definition,ffi
59,59,59,59,59,13550,_p1 = unsafe.Pointer(&dest[0]),"	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_FSETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), uintptr(flags), 0)
	if e1 != 0 {",759.0,9.0,18962.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
60,60,60,60,60,13557,"return unsafe.Pointer(&sa.raw), SizeofSockaddrVM, nil","func (sa *SockaddrVM) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_VSOCK
	sa.raw.Port = sa.Port
	sa.raw.Cid = sa.CID

	return unsafe.Pointer(&sa.raw), SizeofSockaddrVM, nil
}

type SockaddrXDP struct {
	Flags        uint16
	Ifindex      uint32",712.0,9.0,20294.0,unsafe.Pointer,assignment,syscall_linux.go,2100.0,62378.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,cast-pointer,efficiency
61,61,61,61,61,13558,return &entry{p: unsafe.Pointer(&i)},"	// map find the entry.
	p unsafe.Pointer // *interface{}
}

func newEntry(i interface{}) *entry {
	return &entry{p: unsafe.Pointer(&i)}
}

// Load returns the value stored in the map for a key, or nil if no
// value is present.
// The ok result indicates whether value was found in the map.",96.0,19.0,3927.0,unsafe.Pointer,assignment,map.go,372.0,11261.0,sync,std,std,kubernetes/kubernetes,cast-pointer,types
62,62,62,62,62,13901,"memclrNoHeapPointers(unsafe.Pointer(v), size)","			if v == 0 {
				v, span, shouldhelpgc = c.nextFree(spc)
			}
			x = unsafe.Pointer(v)
			if needzero && span.needzero != 0 {
				memclrNoHeapPointers(unsafe.Pointer(v), size)
			}
		}
	} else {
		var s *mspan
		shouldhelpgc = true",1040.0,26.0,38653.0,unsafe.Pointer,call,malloc.go,1422.0,49481.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
63,63,63,63,63,14244,"write(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))","		write(2, unsafe.Pointer(&failallocatestack[0]), int32(len(failallocatestack)))
		exit(1)
	}
	ret := clone(cloneFlags, unsafe.Pointer(uintptr(stack)+stacksize), nil, nil, fn)
	if ret < 0 {
		write(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))
		exit(1)
	}
}

var failallocatestack = []byte(""runtime: failed to allocate stack for the new OS thread\n"")",175.0,12.0,5273.0,unsafe.Pointer,call,os_linux.go,500.0,13478.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
64,64,64,64,64,14588,"r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0, 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0, 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",89.0,60.0,2288.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
65,65,65,65,65,14596,"r0, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(arg2)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",244.0,57.0,6310.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
66,66,66,66,66,14599,tt := (*structType)(unsafe.Pointer(t)),"
func (t *rtype) NumField() int {
	if t.Kind() != Struct {
		panic(""reflect: NumField of non-struct type"")
	}
	tt := (*structType)(unsafe.Pointer(t))
	return len(tt.fields)
}

func (t *rtype) NumIn() int {
	if t.Kind() != Func {",596.0,22.0,15306.0,unsafe.Pointer,assignment,type.go,925.0,23990.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
67,67,67,67,67,14942,if t.elem == unsafe.Pointer(addr) {,"	s.prev = nil

	var last *sudog
	pt := &root.treap
	for t := *pt; t != nil; t = *pt {
		if t.elem == unsafe.Pointer(addr) {
			// Already have addr in list.
			if lifo {
				// Substitute s in t's place in treap.
				*pt = s
				s.ticket = t.ticket",243.0,16.0,6919.0,unsafe.Pointer,other,sema.go,617.0,16335.0,runtime,std,std,kubernetes/kubernetes,memory-access,layout
68,68,68,68,68,15288,var p unsafe.Pointer,"func SetsockoptLinger(fd, level, opt int, l *Linger) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
}

func SetsockoptString(fd, level, opt int, s string) (err error) {
	var p unsafe.Pointer
	if len(s) > 0 {
		p = unsafe.Pointer(&[]byte(s)[0])
	}
	return setsockopt(fd, level, opt, p, uintptr(len(s)))
}",333.0,8.0,7621.0,unsafe.Pointer,variable,syscall_unix.go,369.0,8502.0,syscall,std,std,kubernetes/kubernetes,delegate,ffi
69,69,69,69,69,15631,"func (sa *SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {","
func Mkfifo(path string, mode uint32) (err error) {
	return Mknod(path, mode|S_IFIFO, 0)
}

func (sa *SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))",344.0,38.0,8312.0,unsafe.Pointer,parameter,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,cast-bytes,serialization
70,70,70,70,70,15974,"_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrlimit(resource int, rlim *Rlimit) (err error) {
	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1890.0,67.0,46122.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
71,71,71,71,71,15980,_p0 = unsafe.Pointer(&buf[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SENDTO, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))
	if e1 != 0 {",2425.0,9.0,59926.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
72,72,72,72,72,15981,tt := (*interfaceType)(unsafe.Pointer(t)),"	return ut.exportedMethods()
}

func (t *rtype) NumMethod() int {
	if t.Kind() == Interface {
		tt := (*interfaceType)(unsafe.Pointer(t))
		return tt.NumMethod()
	}
	return len(t.exportedMethods())
}
",793.0,26.0,23043.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
73,73,73,73,73,16324,func runtime_getProfLabel() unsafe.Pointer {,"	}
	getg().labels = labels
}

//go:linkname runtime_getProfLabel runtime/pprof.runtime_getProfLabel
func runtime_getProfLabel() unsafe.Pointer {
	return getg().labels
}",38.0,29.0,1511.0,unsafe.Pointer,parameter,proflabel.go,40.0,1552.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
74,74,74,74,74,16667,"msanRead(unsafe.Pointer(&p[0]), n)","	}
	if race.Enabled && n > 0 {
		race.ReadRange(unsafe.Pointer(&p[0]), n)
	}
	if msanenabled && n > 0 {
		msanRead(unsafe.Pointer(&p[0]), n)
	}
	return
}

// For testing: clients can set this flag to force",220.0,12.0,4850.0,unsafe.Pointer,call,syscall_unix.go,369.0,8502.0,syscall,std,std,kubernetes/kubernetes,delegate,ffi
75,75,75,75,75,17010,psm := (*[2]byte)(unsafe.Pointer(&sa.raw.Psm)),"	raw      RawSockaddrL2
}

func (sa *SockaddrL2) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_BLUETOOTH
	psm := (*[2]byte)(unsafe.Pointer(&sa.raw.Psm))
	psm[0] = byte(sa.PSM)
	psm[1] = byte(sa.PSM >> 8)
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Bdaddr[i] = sa.Addr[len(sa.Addr)-1-i]
	}",499.0,20.0,12992.0,unsafe.Pointer,assignment,syscall_linux.go,2100.0,62378.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,cast-bytes,serialization
76,76,76,76,76,17011,pp := (*RawSockaddrVM)(unsafe.Pointer(rsa)),"			sa.Addr[i] = pp.Addr[i]
		}
		return sa, nil

	case AF_VSOCK:
		pp := (*RawSockaddrVM)(unsafe.Pointer(rsa))
		sa := &SockaddrVM{
			CID:  pp.Cid,
			Port: pp.Port,
		}
		return sa, nil",913.0,26.0,26256.0,unsafe.Pointer,assignment,syscall_linux.go,1973.0,58748.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,cast-struct,serialization
77,77,77,77,77,17014,"adjustpointer(adjinfo, unsafe.Pointer(&d.fn))","	// Adjust pointers in the Defer structs.
	// We need to do this first because we need to adjust the
	// defer.link fields so we always work on the new stack.
	adjustpointer(adjinfo, unsafe.Pointer(&gp._defer))
	for d := gp._defer; d != nil; d = d.link {
		adjustpointer(adjinfo, unsafe.Pointer(&d.fn))
		adjustpointer(adjinfo, unsafe.Pointer(&d.sp))
		adjustpointer(adjinfo, unsafe.Pointer(&d._panic))
		adjustpointer(adjinfo, unsafe.Pointer(&d.link))
		adjustpointer(adjinfo, unsafe.Pointer(&d.varp))
		adjustpointer(adjinfo, unsafe.Pointer(&d.fd))",735.0,26.0,21725.0,unsafe.Pointer,call,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
78,78,78,78,78,17359,"scanframe := func(frame *stkframe, unused unsafe.Pointer) bool {","	if gp.sched.ctxt != nil {
		scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)
	}

	// Scan the stack. Accumulate a list of stack objects.
	scanframe := func(frame *stkframe, unused unsafe.Pointer) bool {
		scanframeworker(frame, &state, gcw)
		return true
	}
	gentraceback(^uintptr(0), ^uintptr(0), 0, gp, 0, nil, 0x7fffffff, scanframe, nil, 0)
",735.0,44.0,23009.0,unsafe.Pointer,assignment,mgcmark.go,1585.0,47620.0,runtime,std,std,kubernetes/kubernetes,unused,unused
79,79,79,79,79,17702,"memclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)","		s = h.allocSpan(npages, false, spanclass, &memstats.heap_inuse)
	})

	if s != nil {
		if needzero && s.needzero != 0 {
			memclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)
		}
		s.needzero = 0
	}
	return s
}",876.0,25.0,30304.0,unsafe.Pointer,call,mheap.go,1950.0,62971.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
80,80,80,80,80,18045,h := (*Cmsghdr)(unsafe.Pointer(&b[0])),"	}
	return msgs, nil
}

func socketControlMessageHeaderAndData(b []byte) (*Cmsghdr, []byte, error) {
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	if h.Len < SizeofCmsghdr || uint64(h.Len) > uint64(len(b)) {
		return nil, nil, EINVAL
	}
	return h, b[cmsgAlignOf(SizeofCmsghdr):h.Len], nil
}",55.0,18.0,1554.0,unsafe.Pointer,assignment,sockcmsg_unix.go,92.0,2619.0,syscall,std,std,kubernetes/kubernetes,cast-bytes,serialization
81,81,81,81,81,18388,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Msync(b []byte, flags int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1768.0,10.0,43174.0,unsafe.Pointer,variable,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
82,82,82,82,82,18396,"local     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal","//
// A Pool must not be copied after first use.
type Pool struct {
	noCopy noCopy

	local     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal
	localSize uintptr        // size of the local array

	victim     unsafe.Pointer // local from previous cycle
	victimSize uintptr        // size of victims array
",47.0,12.0,1679.0,unsafe.Pointer,variable,pool.go,284.0,8346.0,sync,std,std,kubernetes/kubernetes,definition,layout
83,83,83,83,83,18739,_p0 = unsafe.Pointer(&_zero),"func Setdomainname(p []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_SETDOMAINNAME, uintptr(_p0), uintptr(len(p)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}",1330.0,9.0,32794.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
84,84,84,84,84,18742,fd   unsafe.Pointer // funcdata for the function associated with the frame,"
	// If openDefer is true, the fields below record values about the stack
	// frame and associated function that has the open-coded defer(s). sp
	// above will be the sp for the frame, and pc will be address of the
	// deferreturn call in the function.
	fd   unsafe.Pointer // funcdata for the function associated with the frame
	varp uintptr        // value of varp for the stack frame
	// framepc is the current pc associated with the stack frame. Together,
	// with sp above (which is the sp associated with the stack frame),
	// framepc/sp can be used as pc/sp pair to continue a stack trace via
	// gentraceback().",879.0,7.0,31789.0,unsafe.Pointer,variable,runtime2.go,1036.0,38762.0,runtime,std,std,kubernetes/kubernetes,definition,types
85,85,85,85,85,19085,"func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {","	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
	_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",551.0,49.0,13775.0,unsafe.Pointer,parameter,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
86,86,86,86,86,19094,tt := (*funcType)(unsafe.Pointer(t)),"
func (t *rtype) In(i int) Type {
	if t.Kind() != Func {
		panic(""reflect: In of non-func type"")
	}
	tt := (*funcType)(unsafe.Pointer(t))
	return toType(tt.in()[i])
}

func (t *rtype) Key() Type {
	if t.Kind() != Map {",572.0,20.0,14811.0,unsafe.Pointer,assignment,type.go,925.0,23990.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
87,87,87,87,87,19437,"return (*[1 << 16]method)(add(unsafe.Pointer(t), uintptr(t.moff), ""t.mcount > 0""))[:t.mcount:t.mcount]","
func (t *uncommonType) methods() []method {
	if t.mcount == 0 {
		return nil
	}
	return (*[1 << 16]method)(add(unsafe.Pointer(t), uintptr(t.moff), ""t.mcount > 0""))[:t.mcount:t.mcount]
}

func (t *uncommonType) exportedMethods() []method {
	if t.xcount == 0 {
		return nil",629.0,32.0,18640.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
88,88,88,88,88,19780,h := (*Cmsghdr)(unsafe.Pointer(&b[0])),"	}
	return msgs, nil
}

func socketControlMessageHeaderAndData(b []byte) (*Cmsghdr, []byte, error) {
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	if h.Len < SizeofCmsghdr || uint64(h.Len) > uint64(len(b)) {
		return nil, nil, EINVAL
	}
	return h, b[cmsgAlignOf(SizeofCmsghdr):h.Len], nil
}",55.0,18.0,1551.0,unsafe.Pointer,assignment,sockcmsg_unix.go,92.0,2616.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,cast-bytes,serialization
89,89,89,89,89,19789,"func sighandler(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g) {","//
// The garbage collector may have stopped the world, so write barriers
// are not allowed.
//
//go:nowritebarrierrec
func sighandler(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g) {
	_g_ := getg()
	c := &sigctxt{info, ctxt}

	if sig == _SIGPROF {
		sigprof(c.sigpc(), c.sigsp(), c.siglr(), gp, _g_.m)",525.0,49.0,16011.0,unsafe.Pointer,parameter,signal_unix.go,1182.0,36808.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
90,90,90,90,90,20139,"return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)","func SetsockoptIPv6Mreq(fd, level, opt int, mreq *IPv6Mreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)
}

func SetsockoptICMPv6Filter(fd, level, opt int, filter *ICMPv6Filter) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)
}

func SetsockoptLinger(fd, level, opt int, l *Linger) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
}",346.0,36.0,8459.0,unsafe.Pointer,assignment,syscall_unix.go,431.0,10997.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,delegate,ffi
91,91,91,91,91,20147,return unsafe.Pointer(x ^ 0),"// This was copied from the runtime; see issues 23382 and 7921.
//go:nosplit
//go:nocheckptr
func noescape(p unsafe.Pointer) unsafe.Pointer {
	x := uintptr(p)
	return unsafe.Pointer(x ^ 0)
}

func (b *Builder) copyCheck() {
	if b.addr == nil {
		// This hack works around a failing of Go's escape analysis",30.0,9.0,897.0,unsafe.Pointer,assignment,builder.go,125.0,3562.0,strings,std,std,kubernetes/kubernetes,pointer-arithmetic,hide-escape
92,92,92,92,92,20488,valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val)),"	syms = make(map[string]interface{}, len(md.ptab))
	for _, ptab := range md.ptab {
		symName := resolveNameOff(unsafe.Pointer(md.types), ptab.name)
		t := (*_type)(unsafe.Pointer(md.types)).typeOff(ptab.typ)
		var val interface{}
		valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))
		(*valp)[0] = unsafe.Pointer(t)

		name := symName.name()
		if t.kind&kindMask == kindFunc {
			name = ""."" + name",84.0,16.0,2847.0,unsafe.Pointer,assignment,plugin.go,136.0,4262.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
93,93,93,93,93,21181,"_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
	_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",542.0,104.0,13584.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
94,94,94,94,94,21189,"_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ustat(dev int, ubuf *Ustat_t) (err error) {
	_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2274.0,55.0,55575.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
95,95,95,95,95,21195,"r0, _, e1 := Syscall6(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)","	if len(dest) > 0 {
		_p2 = unsafe.Pointer(&dest[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",512.0,46.0,12137.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
96,96,96,96,96,21883,"return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)","func SetsockoptIPMreq(fd, level, opt int, mreq *IPMreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPMreq)
}

func SetsockoptIPv6Mreq(fd, level, opt int, mreq *IPv6Mreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)
}

func SetsockoptICMPv6Filter(fd, level, opt int, filter *ICMPv6Filter) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)
}",342.0,36.0,8288.0,unsafe.Pointer,assignment,syscall_unix.go,431.0,10980.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,delegate,ffi
97,97,97,97,97,21889,_p0 = unsafe.Pointer(&buf[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func keyctlDH(cmd int, arg2 *KeyctlDHParams, buf []byte) (ret int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(arg2)), uintptr(_p0), uintptr(len(buf)), 0, 0)
	ret = int(r0)",294.0,9.0,7559.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
98,98,98,98,98,21893,"func memequal128(p, q unsafe.Pointer) bool {","	return *(*int32)(p) == *(*int32)(q)
}
func memequal64(p, q unsafe.Pointer) bool {
	return *(*int64)(p) == *(*int64)(q)
}
func memequal128(p, q unsafe.Pointer) bool {
	return *(*[2]int64)(p) == *(*[2]int64)(q)
}
func f32equal(p, q unsafe.Pointer) bool {
	return *(*float32)(p) == *(*float32)(q)
}",251.0,23.0,6504.0,unsafe.Pointer,parameter,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,cast-basic,layout
99,99,99,99,99,22237,"func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {","		sa.raw.Addr[i] = sa.Addr[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrInet6, nil
}

func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {
	name := sa.Name
	n := len(name)
	if n >= len(sa.raw.Path) {
		return nil, 0, EINVAL
	}",404.0,37.0,10636.0,unsafe.Pointer,parameter,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,cast-pointer,efficiency
100,100,100,100,100,22250,fh := (*fileHandle)(unsafe.Pointer(&buf[0])),"// NewFileHandle constructs a FileHandle.
func NewFileHandle(handleType int32, handle []byte) FileHandle {
	const hdrSize = unsafe.Sizeof(fileHandle{})
	buf := make([]byte, hdrSize+uintptr(len(handle)))
	copy(buf[hdrSize:], handle)
	fh := (*fileHandle)(unsafe.Pointer(&buf[0]))
	fh.Type = handleType
	fh.Bytes = uint32(len(handle))
	return FileHandle{fh}
}
",2025.0,22.0,61540.0,unsafe.Pointer,assignment,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-bytes,efficiency
101,101,101,101,101,22257,"func cgoInRange(p unsafe.Pointer, start, end uintptr) bool {","}

// cgoInRange reports whether p is between start and end.
//go:nosplit
//go:nowritebarrierrec
func cgoInRange(p unsafe.Pointer, start, end uintptr) bool {
	return start <= uintptr(p) && uintptr(p) < end
}

// cgoCheckResult is called to check the result parameter of an
// exported Go function. It panics if the result is or contains a Go",660.0,19.0,21457.0,unsafe.Pointer,parameter,cgocall.go,675.0,21888.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,layout
102,102,102,102,102,22610,var ptr unsafe.Pointer,"	_, err = SendmsgN(fd, p, oob, to, flags)
	return
}

func SendmsgN(fd int, p, oob []byte, to Sockaddr, flags int) (n int, err error) {
	var ptr unsafe.Pointer
	var salen _Socklen
	if to != nil {
		var err error
		ptr, salen, err = to.sockaddr()
		if err != nil {",1367.0,10.0,40635.0,unsafe.Pointer,variable,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-basic,ffi
103,103,103,103,103,22617,word unsafe.Pointer,"		typ  *rtype // dynamic concrete type
		hash uint32 // copy of typ.hash
		_    [4]byte
		fun  [100000]unsafe.Pointer // method table
	}
	word unsafe.Pointer
}

// mustBe panics if f's kind is not expected.
// Making this a method on flag instead of on Value
// (and embedding flag in Value) means that we can write",196.0,7.0,5943.0,unsafe.Pointer,variable,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,definition,reflect
104,104,104,104,104,22968,"func (sa *SockaddrLinklayer) sockaddr() (unsafe.Pointer, _Socklen, error) {","	Halen    uint8
	Addr     [8]byte
	raw      RawSockaddrLinklayer
}

func (sa *SockaddrLinklayer) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Ifindex < 0 || sa.Ifindex > 0x7fffffff {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_PACKET
	sa.raw.Protocol = sa.Protocol",439.0,42.0,11390.0,unsafe.Pointer,parameter,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-pointer,serialization
105,105,105,105,105,22975,b.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers])),"	} else if testSmallBuf {
		// For testing, allow two barriers in the buffer. If
		// we only did one, then barriers of non-heap pointers
		// would be no-ops. This lets us combine a buffered
		// barrier with a flush at a later time.
		b.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))
	} else {
		b.end = start + uintptr(len(b.buf))*unsafe.Sizeof(b.buf[0])
	}

	if (b.end-b.next)%(wbBufEntryPointers*unsafe.Sizeof(b.buf[0])) != 0 {",98.0,19.0,3643.0,unsafe.Pointer,assignment,mwbbuf.go,311.0,10311.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,layout
106,106,106,106,106,23319,tt := (*ptrType)(unsafe.Pointer(v.typ)),"		}
		// The returned value's address is v's value.
		if ptr == nil {
			return Value{}
		}
		tt := (*ptrType)(unsafe.Pointer(v.typ))
		typ := tt.elem
		fl := v.flag&flagRO | flagIndir | flagAddr
		fl |= flag(typ.Kind())
		return Value{typ, ptr, fl}
	}",248.0,20.0,7390.0,unsafe.Pointer,assignment,value.go,486.0,14113.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
107,107,107,107,107,23662,"if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {","			goto childerror
		}

		if sys.Unshareflags&CLONE_NEWUSER != 0 && sys.GidMappings != nil {
			dirfd := int(_AT_FDCWD)
			if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {
				goto childerror
			}
			r1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&setgroups[0])), uintptr(len(setgroups)))
			if err1 != 0 {
				goto childerror",295.0,70.0,9389.0,unsafe.Pointer,assignment,exec_linux.go,623.0,18779.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
108,108,108,108,108,24005,"memmove(unsafe.Pointer(new.hi-ncopy), unsafe.Pointer(old.hi-ncopy), ncopy)","		// the stack they may interact with.
		ncopy -= syncadjustsudogs(gp, used, &adjinfo)
	}

	// Copy the stack (or the rest of it) to the new location
	memmove(unsafe.Pointer(new.hi-ncopy), unsafe.Pointer(old.hi-ncopy), ncopy)

	// Adjust remaining structures that have pointers into stacks.
	// We have to do most of these before we traceback the new
	// stack because gentraceback uses them.
	adjustctxt(gp, &adjinfo)",869.0,10.0,25620.0,unsafe.Pointer,call,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,layout
109,109,109,109,109,24695,"func WriteRange(addr unsafe.Pointer, len int) {","}

func ReadRange(addr unsafe.Pointer, len int) {
}

func WriteRange(addr unsafe.Pointer, len int) {
}

func Errors() int { return 0 }",39.0,22.0,541.0,unsafe.Pointer,parameter,norace.go,42.0,602.0,internal/race,std,std,kubernetes/kubernetes,unused,unused
110,110,110,110,110,25042,"func memequal(a, b unsafe.Pointer, size uintptr) bool","//go:linkname sync_fastrand sync.fastrand
func sync_fastrand() uint32 { return fastrand() }

// in asm_*.s
//go:noescape
func memequal(a, b unsafe.Pointer, size uintptr) bool

// noescape hides a pointer from escape analysis.  noescape is
// the identity function but escape analysis doesn't think the
// output depends on the input.  noescape is inlined and currently
// compiles down to zero instructions.",135.0,20.0,4786.0,unsafe.Pointer,parameter,stubs.go,345.0,13395.0,runtime,std,std,kubernetes/kubernetes,definition,layout
111,111,111,111,111,25386,"racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))","// by the compilers order pass or on the heap by reflect_mapiterinit.
// Both need to have zeroed hiter since the struct contains pointers.
func mapiterinit(t *maptype, h *hmap, it *hiter) {
	if raceenabled && h != nil {
		callerpc := getcallerpc()
		racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))
	}

	if h == nil || h.count == 0 {
		return
	}",800.0,14.0,25472.0,unsafe.Pointer,call,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
112,112,112,112,112,25730,"func typedmemmove(t *rtype, dst, src unsafe.Pointer)","//go:noescape
func memmove(dst, src unsafe.Pointer, size uintptr)

// typedmemmove copies a value of type t to dst from src.
//go:noescape
func typedmemmove(t *rtype, dst, src unsafe.Pointer)

// typedmemmovepartial is like typedmemmove but assumes that
// dst and src point off bytes into the value and only copies size bytes.
//go:noescape
func typedmemmovepartial(t *rtype, dst, src unsafe.Pointer, off, size uintptr)",2752.0,38.0,80866.0,unsafe.Pointer,parameter,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,definition,layout
113,113,113,113,113,26073,st := (*structtype)(unsafe.Pointer(typ)),"				return
			}
			size -= checked
		}
	case kindStruct:
		st := (*structtype)(unsafe.Pointer(typ))
		for _, f := range st.fields {
			if off < f.typ.size {
				cgoCheckUsingType(f.typ, src, off, size)
			}
			src = add(src, f.typ.size)",244.0,23.0,6604.0,unsafe.Pointer,assignment,cgocheck.go,262.0,6960.0,runtime,std,std,kubernetes/kubernetes,cast-struct,ffi
114,114,114,114,114,26423,"defer atomic.StorePointer(&disableSplice, unsafe.Pointer(p))","		return -1, -1, ""pipe2"", err
	}

	if p == nil {
		p = new(bool)
		defer atomic.StorePointer(&disableSplice, unsafe.Pointer(p))

		// F_GETPIPE_SZ was added in 2.6.35, which does not have the -EAGAIN bug.
		if _, _, errno := syscall.Syscall(unix.FcntlSyscall, uintptr(fds[0]), syscall.F_GETPIPE_SZ, 0); errno != 0 {
			*p = true
			destroyTempPipe(fds[0], fds[1])",170.0,45.0,5273.0,unsafe.Pointer,call,splice_linux.go,191.0,5792.0,internal/poll,std,std,kubernetes/kubernetes,delegate,atomic
115,115,115,115,115,26769,fn = unsafe.Pointer(funcPC(nilfunc)),"func gostartcallfn(gobuf *gobuf, fv *funcval) {
	var fn unsafe.Pointer
	if fv != nil {
		fn = unsafe.Pointer(fv.fn)
	} else {
		fn = unsafe.Pointer(funcPC(nilfunc))
	}
	gostartcall(gobuf, fn, unsafe.Pointer(fv))
}

// isShrinkStackSafe returns whether it's safe to attempt to shrink",1063.0,8.0,32125.0,unsafe.Pointer,assignment,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
116,116,116,116,116,27112,*(*uintptr)(unsafe.Pointer(&b.tags[wt])) = uintptr(unsafe.Pointer(*tagPtr)),"	// value we copied when scanning b.tags (heap-allocated).
	// We arrange that the store here is always overwriting a nil,
	// so there is no need for a deletion barrier on b.tags[wt].
	wt := int(bw.tagCount() % uint32(len(b.tags)))
	if tagPtr != nil {
		*(*uintptr)(unsafe.Pointer(&b.tags[wt])) = uintptr(unsafe.Pointer(*tagPtr))
	}

	// Main record.
	// It has to fit in a contiguous section of the slice, so if it doesn't fit at the end,
	// leave a rewind marker (0) and start over at the beginning of the slice.",352.0,15.0,12724.0,unsafe.Pointer,assignment,profbuf.go,561.0,18698.0,runtime,std,std,kubernetes/kubernetes,memory-access,layout
117,117,117,117,117,27804,"adjustpointer(adjinfo, unsafe.Pointer(&gp._defer))","
func adjustdefers(gp *g, adjinfo *adjustinfo) {
	// Adjust pointers in the Defer structs.
	// We need to do this first because we need to adjust the
	// defer.link fields so we always work on the new stack.
	adjustpointer(adjinfo, unsafe.Pointer(&gp._defer))
	for d := gp._defer; d != nil; d = d.link {
		adjustpointer(adjinfo, unsafe.Pointer(&d.fn))
		adjustpointer(adjinfo, unsafe.Pointer(&d.sp))
		adjustpointer(adjinfo, unsafe.Pointer(&d._panic))
		adjustpointer(adjinfo, unsafe.Pointer(&d.link))",733.0,25.0,21628.0,unsafe.Pointer,call,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
118,118,118,118,118,28154,ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0])),"		return nil, EINVAL
	}
	if m.Header.Type != SCM_CREDENTIALS {
		return nil, EINVAL
	}
	ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))
	return &ucred, nil
}",34.0,21.0,1017.0,unsafe.Pointer,assignment,sockcmsg_linux.go,36.0,1067.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-struct,serialization
119,119,119,119,119,28162,func raceAcquire(addr unsafe.Pointer) {,"	""unsafe""
)

const raceenabled = false

func raceAcquire(addr unsafe.Pointer) {
}

func raceReleaseMerge(addr unsafe.Pointer) {
}
",15.0,23.0,332.0,unsafe.Pointer,parameter,race0.go,25.0,509.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,unused,unused
120,120,120,120,120,28164,"_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Settimeofday(tv *Timeval) (err error) {
	_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1368.0,51.0,33626.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
121,121,121,121,121,28171,p := (*[2]byte)(unsafe.Pointer(&pp.Port)),"		return sa, nil

	case AF_INET6:
		pp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))
		sa := new(SockaddrInet6)
		p := (*[2]byte)(unsafe.Pointer(&pp.Port))
		sa.Port = int(p[0])<<8 + int(p[1])
		sa.ZoneId = pp.Scope_id
		for i := 0; i < len(sa.Addr); i++ {
			sa.Addr[i] = pp.Addr[i]
		}",904.0,19.0,26039.0,unsafe.Pointer,assignment,syscall_linux.go,1973.0,58748.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,cast-bytes,serialization
122,122,122,122,122,28176,"return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))","	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
	return &value, err
}

func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
}

func SetsockoptPacketMreq(fd, level, opt int, mreq *PacketMreq) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
}",1156.0,36.0,32339.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,delegate,ffi
123,123,123,123,123,28183,"_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatfs(fd int, buf *Statfs_t) (err error) {
	_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",132.0,56.0,3437.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
124,124,124,124,124,28190,raceAcquire(unsafe.Pointer(&ioSync)),"	if raceenabled {
		if n > 0 {
			raceWriteRange(unsafe.Pointer(&p[0]), n)
		}
		if err == nil {
			raceAcquire(unsafe.Pointer(&ioSync))
		}
	}
	return
}
",163.0,16.0,3588.0,unsafe.Pointer,call,syscall_unix.go,431.0,10980.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,delegate,ffi
125,125,125,125,125,28193,*(*uint16)(unsafe.Pointer(&b[6:8][0])) = rr.Header.Flags,"
func (rr *NetlinkRouteRequest) toWireFormat() []byte {
	b := make([]byte, rr.Header.Len)
	*(*uint32)(unsafe.Pointer(&b[0:4][0])) = rr.Header.Len
	*(*uint16)(unsafe.Pointer(&b[4:6][0])) = rr.Header.Type
	*(*uint16)(unsafe.Pointer(&b[6:8][0])) = rr.Header.Flags
	*(*uint32)(unsafe.Pointer(&b[8:12][0])) = rr.Header.Seq
	*(*uint32)(unsafe.Pointer(&b[12:16][0])) = rr.Header.Pid
	b[16] = byte(rr.Data.Family)
	return b
}",33.0,13.0,954.0,unsafe.Pointer,assignment,netlink_linux.go,179.0,4777.0,syscall,std,std,kubernetes/kubernetes,cast-basic,serialization
126,126,126,126,126,28536,func resolveReflectText(ptr unsafe.Pointer) textOff {,"}

// resolveReflectText adds a function pointer to the reflection lookup map in
// the runtime. It returns a new textOff that can be used to refer to the
// pointer.
func resolveReflectText(ptr unsafe.Pointer) textOff {
	return textOff(addReflectOff(ptr))
}

type nameOff int32 // offset to a name
type typeOff int32 // offset to an *rtype",674.0,29.0,20610.0,unsafe.Pointer,parameter,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,delegate,reflect
127,127,127,127,127,28879,"return unsafe.Pointer(&sa.raw), SizeofSockaddrRFCOMM, nil","
func (sa *SockaddrRFCOMM) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_BLUETOOTH
	sa.raw.Channel = sa.Channel
	sa.raw.Bdaddr = sa.Addr
	return unsafe.Pointer(&sa.raw), SizeofSockaddrRFCOMM, nil
}

// SockaddrCAN implements the Sockaddr interface for AF_CAN type sockets.
// The RxID and TxID fields are used for transport protocol addressing in
// (CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP), they can be left with",550.0,9.0,14641.0,unsafe.Pointer,assignment,syscall_linux.go,2100.0,62378.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,cast-pointer,efficiency
128,128,128,128,128,28880,tt := (*ptrType)(unsafe.Pointer(v.typ)),"		}
		// The returned value's address is v's value.
		if ptr == nil {
			return Value{}
		}
		tt := (*ptrType)(unsafe.Pointer(v.typ))
		typ := tt.elem
		fl := v.flag&flagRO | flagIndir | flagAddr
		fl |= flag(typ.Kind())
		return Value{typ, ptr, fl}
	}",814.0,20.0,25415.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
129,129,129,129,129,29224,"err := ioctl(fd, req, uintptr(unsafe.Pointer(&value)))","	return &value, err
}

func IoctlGetTermios(fd int, req uint) (*Termios, error) {
	var value Termios
	err := ioctl(fd, req, uintptr(unsafe.Pointer(&value)))
	return &value, err
}",63.0,32.0,1997.0,unsafe.Pointer,assignment,ioctl.go,65.0,2044.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,delegate,ffi
130,130,130,130,130,29230,"return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))","}

// SetsockoptSockFprog attaches a classic BPF or an extended BPF program to a
// socket to filter incoming packets.  See 'man 7 socket' for usage information.
func SetsockoptSockFprog(fd, level, opt int, fprog *SockFprog) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
}

func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {",1099.0,36.0,31141.0,unsafe.Pointer,assignment,syscall_linux.go,1973.0,58748.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,delegate,ffi
131,131,131,131,131,29234,"return unsafe.Pointer(&sa.raw), SizeofSockaddrALG, nil","	}

	copy(sa.raw.Type[:], typ)
	copy(sa.raw.Name[:], name)

	return unsafe.Pointer(&sa.raw), SizeofSockaddrALG, nil
}

// SockaddrVM implements the Sockaddr interface for AF_VSOCK type sockets.
// SockaddrVM provides access to Linux VM sockets: a mechanism that enables
// bidirectional communication between a hypervisor and its guest virtual",690.0,9.0,19514.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,cast-pointer,serialization
132,132,132,132,132,29242,"func newosproc0(stacksize uintptr, fn unsafe.Pointer) {","	}
}

// Version of newosproc that doesn't require a valid G.
//go:nosplit
func newosproc0(stacksize uintptr, fn unsafe.Pointer) {
	stack := sysAlloc(stacksize, &memstats.stacks_sys)
	if stack == nil {
		write(2, unsafe.Pointer(&failallocatestack[0]), int32(len(failallocatestack)))
		exit(1)
	}",167.0,39.0,4983.0,unsafe.Pointer,parameter,os_linux.go,500.0,13478.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
133,133,133,133,133,29587,"err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)","}

func GetsockoptInt(fd, level, opt int) (value int, err error) {
	var n int32
	vallen := _Socklen(4)
	err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)
	return int(n), err
}

func GetsockoptInet4Addr(fd, level, opt int) (value [4]byte, err error) {
	vallen := _Socklen(4)",244.0,35.0,5489.0,unsafe.Pointer,assignment,syscall_unix.go,430.0,11034.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,delegate,ffi
134,134,134,134,134,29594,prototype := *(**sliceType)(unsafe.Pointer(&islice)),"		}
	}

	// Make a slice type.
	var islice interface{} = ([]unsafe.Pointer)(nil)
	prototype := *(**sliceType)(unsafe.Pointer(&islice))
	slice := *prototype
	slice.tflag = 0
	slice.str = resolveReflectName(newName(s, """", false))
	slice.hash = fnv1(typ.hash, '[')
	slice.elem = typ",2297.0,30.0,63885.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
135,135,135,135,135,29938,"return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))","func SetsockoptTpacketReq(fd, level, opt int, tp *TpacketReq) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

func SetsockoptTpacketReq3(fd, level, opt int, tp *TpacketReq3) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

// Keyctl Commands (http://man7.org/linux/man-pages/man2/keyctl.2.html)

// KeyctlInt calls keyctl commands in which each argument is an int.",1115.0,36.0,31680.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,delegate,ffi
136,136,136,136,136,29946,ptr unsafe.Pointer,"	// typ holds the type of the value represented by a Value.
	typ *rtype

	// Pointer-valued data or, if flagIndir is set, pointer to data.
	// Valid when either flagIndir is set or typ.pointers() is true.
	ptr unsafe.Pointer

	// flag holds metadata about the value.
	// The lowest bits are flag bits:
	//	- flagStickyRO: obtained via unexported not embedded field, so read-only
	//	- flagEmbedRO: obtained via unexported embedded field, so read-only",42.0,6.0,1533.0,unsafe.Pointer,variable,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,definition,reflect
137,137,137,137,137,30289,tt := (*mapType)(unsafe.Pointer(v.typ)),"// in unspecified order.
// It panics if v's Kind is not Map.
// It returns an empty slice if v represents a nil map.
func (v Value) MapKeys() []Value {
	v.mustBe(Map)
	tt := (*mapType)(unsafe.Pointer(v.typ))
	keyType := tt.key

	fl := v.flag.ro() | flag(keyType.Kind())

	m := v.pointer()",1182.0,19.0,36428.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
138,138,138,138,138,30632,var p unsafe.Pointer,"	if ChanDir(tt.dir)&SendDir == 0 {
		panic(""reflect: send on recv-only channel"")
	}
	x.mustBeExported()
	x = x.assignTo(""reflect.Value.Send"", tt.elem, nil)
	var p unsafe.Pointer
	if x.flag&flagIndir != 0 {
		p = x.ptr
	} else {
		p = unsafe.Pointer(&x.ptr)
	}",1513.0,8.0,46164.0,unsafe.Pointer,variable,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,delegate,types
139,139,139,139,139,30975,"r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getgroups(n int, list *_Gid_t) (nn int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
	nn = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",521.0,61.0,12980.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
140,140,140,140,140,30983,"RawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))","		if sys.Unshareflags&CLONE_NEWUSER == 0 {
			if err := writeUidGidMappings(pid, sys); err != nil {
				err2 = err.(Errno)
			}
		}
		RawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))
		Close(p[1])
	}

	return pid, 0
}",93.0,48.0,3664.0,unsafe.Pointer,call,exec_linux.go,623.0,18779.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
141,141,141,141,141,31326,"func parkunlock_c(gp *g, lock unsafe.Pointer) bool {","		return false
	}
	return true
}

func parkunlock_c(gp *g, lock unsafe.Pointer) bool {
	unlock((*mutex)(lock))
	return true
}

// park continuation on g0.",2662.0,31.0,76408.0,unsafe.Pointer,parameter,proc.go,5418.0,153166.0,runtime,std,std,kubernetes/kubernetes,cast-struct,layout
142,142,142,142,142,31670,_p1 = unsafe.Pointer(&_zero),"	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_LISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",1044.0,9.0,25566.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
143,143,143,143,143,31675,"func memhash16(p unsafe.Pointer, h uintptr) uintptr {","
func memhash8(p unsafe.Pointer, h uintptr) uintptr {
	return memhash(p, h, 1)
}

func memhash16(p unsafe.Pointer, h uintptr) uintptr {
	return memhash(p, h, 2)
}

func memhash128(p unsafe.Pointer, h uintptr) uintptr {
	return memhash(p, h, 16)",45.0,18.0,807.0,unsafe.Pointer,parameter,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
144,144,144,144,144,32018,"err = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))","	// align our reads, we might straddle an unmapped page
	// boundary and not get the bytes leading up to the page
	// boundary.
	n := 0
	if addr%SizeofPtr != 0 {
		err = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return 0, err
		}
		n += copy(out, buf[addr%SizeofPtr:])
		out = out[n:]",1368.0,55.0,40697.0,unsafe.Pointer,assignment,syscall_linux.go,1973.0,58748.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,pointer-arithmetic,layout
145,145,145,145,145,32021,"err = ptrace(PTRACE_GETEVENTMSG, pid, 0, uintptr(unsafe.Pointer(&data)))","	return ptrace(PTRACE_SETOPTIONS, pid, 0, uintptr(options))
}

func PtraceGetEventMsg(pid int) (msg uint, err error) {
	var data _C_long
	err = ptrace(PTRACE_GETEVENTMSG, pid, 0, uintptr(unsafe.Pointer(&data)))
	msg = uint(data)
	return
}

func PtraceCont(pid int, signal int) (err error) {",1481.0,51.0,43806.0,unsafe.Pointer,assignment,syscall_linux.go,2100.0,62378.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,delegate,ffi
146,146,146,146,146,32022,uintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&,"
// AnyOverlap reports whether x and y share memory at any (not necessarily
// corresponding) index. The memory beyond the slice length is ignored.
func AnyOverlap(x, y []byte) bool {
	return len(x) > 0 && len(y) > 0 &&
		uintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&
		uintptr(unsafe.Pointer(&y[0])) <= uintptr(unsafe.Pointer(&x[len(x)-1]))
}

// InexactOverlap reports whether x and y share memory at any non-corresponding
// index. The memory beyond the slice length is ignored. Note that x and y can",19.0,11.0,674.0,unsafe.Pointer,assignment,aliasing.go,34.0,1312.0,crypto/internal/subtle,std,std,kubernetes/kubernetes,pointer-arithmetic,layout
147,147,147,147,147,32629,pp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa)),"}

func anyToSockaddr(rsa *RawSockaddrAny) (Sockaddr, error) {
	switch rsa.Addr.Family {
	case AF_NETLINK:
		pp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))
		sa := new(SockaddrNetlink)
		sa.Family = pp.Family
		sa.Pad = pp.Pad
		sa.Pid = pp.Pid
		sa.Groups = pp.Groups",445.0,31.0,10770.0,unsafe.Pointer,assignment,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,cast-struct,serialization
148,148,148,148,148,32972,(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc,"	for _, pc := range cgoPCs {
		if pc == 0 || n >= max {
			break
		}
		if pcbuf != nil {
			(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc
		}
		if printing {
			if cgoSymbolizer == nil {
				print(""non-Go function at pc="", hex(pc), ""\n"")
			} else {",646.0,24.0,23057.0,unsafe.Pointer,assignment,traceback.go,1340.0,45165.0,runtime,std,std,kubernetes/kubernetes,memory-access,layout
149,149,149,149,149,33315,"RawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))","		uintptr(unsafe.Pointer(&argv[0])),
		uintptr(unsafe.Pointer(&envv[0])))

childerror:
	// send error code on pipe
	RawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))
	for {
		RawSyscall(SYS_EXIT, 253, 0, 0)
	}
}
",525.0,47.0,16318.0,unsafe.Pointer,call,exec_linux.go,623.0,18779.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
150,150,150,150,150,33660,"v.ptr = *(*unsafe.Pointer)(add(ptr, off, ""1-ptr""))","			if typ.size > 0 {
				typedmemmove(typ, v.ptr, add(ptr, off, ""typ.size > 0""))
			}
			v.flag |= flagIndir
		} else {
			v.ptr = *(*unsafe.Pointer)(add(ptr, off, ""1-ptr""))
		}
		in = append(in, v)
		off += typ.size
	}
",542.0,15.0,16699.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,pointer-arithmetic,types
151,151,151,151,151,34003,"return unsafe.Pointer(&zeroVal[0]), false","				}
				if k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {
					return add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize)), true
				}
			}
			return unsafe.Pointer(&zeroVal[0]), false
		}
		// long key, try not to do more comparisons than necessary
		keymaybe := uintptr(bucketCnt)
		for i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {
			k := (*stringStruct)(kptr)",136.0,11.0,4223.0,unsafe.Pointer,assignment,map_faststr.go,476.0,14153.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,types
152,152,152,152,152,34346,func chanlen(unsafe.Pointer) int,"func (v Value) Kind() Kind {
	return v.kind()
}

// implemented in runtime:
func chanlen(unsafe.Pointer) int
func maplen(unsafe.Pointer) int

// Len returns v's length.
// It panics if v's Kind is not Array, Chan, Map, Slice, or String.
func (v Value) Len() int {",321.0,14.0,9553.0,unsafe.Pointer,parameter,value.go,486.0,14113.0,internal/reflectlite,std,std,kubernetes/kubernetes,definition,types
153,153,153,153,153,34694,_p0 = unsafe.Pointer(&events[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(events) > 0 {
		_p0 = unsafe.Pointer(&events[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(_p0), uintptr(len(events)), uintptr(msec), 0, 0)
	n = int(r0)",1786.0,9.0,43513.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
154,154,154,154,154,34697,func runtime_getProfLabel() unsafe.Pointer,"
// runtime_setProfLabel is defined in runtime/proflabel.go.
func runtime_setProfLabel(labels unsafe.Pointer)

// runtime_getProfLabel is defined in runtime/proflabel.go.
func runtime_getProfLabel() unsafe.Pointer

// SetGoroutineLabels sets the current goroutine's labels to match ctx.
// A new goroutine inherits the labels of the goroutine that created it.
// This is a lower-level API than Do, which should be used instead when possible.
func SetGoroutineLabels(ctx context.Context) {",19.0,29.0,535.0,unsafe.Pointer,parameter,runtime.go,41.0,1532.0,runtime/pprof,std,std,kubernetes/kubernetes,definition,layout
155,155,155,155,155,34864,"return unsafe.Pointer(&sa.raw), SizeofSockaddrCAN, nil","	}
	tx := (*[4]byte)(unsafe.Pointer(&sa.TxID))
	for i := 0; i < 4; i++ {
		sa.raw.Addr[i+4] = tx[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrCAN, nil
}

// SockaddrALG implements the Sockaddr interface for AF_ALG type sockets.
// SockaddrALG enables userspace access to the Linux kernel's cryptography
// subsystem. The Type and Name fields specify which type of hash or cipher",591.0,9.0,15981.0,unsafe.Pointer,assignment,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-pointer,serialization
156,156,156,156,156,34871,*(*uint16)(unsafe.Pointer(&sa.raw[0])) = AF_PPPOX,"	}
	if len(sa.Dev) > IFNAMSIZ-1 {
		return nil, 0, EINVAL
	}

	*(*uint16)(unsafe.Pointer(&sa.raw[0])) = AF_PPPOX
	// This next field is in host-endian byte order. We can't use the
	// same unsafe pointer cast as above, because this value is not
	// 32-bit aligned and some architectures don't allow unaligned
	// access.
	//",757.0,13.0,21529.0,unsafe.Pointer,assignment,syscall_linux.go,2100.0,62378.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,cast-basic,serialization
157,157,157,157,157,34874,_p0 = unsafe.Pointer(&_zero),"func Msync(b []byte, flags int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MSYNC, uintptr(_p0), uintptr(len(b)), uintptr(flags))
	if e1 != 0 {
		err = errnoErr(e1)
	}",1684.0,9.0,41010.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
158,158,158,158,158,34877,mheap_.spanalloc.free(unsafe.Pointer(pp.mspancache.buf[i])),"		pp.deferpool[i] = pp.deferpoolbuf[i][:0]
	}
	systemstack(func() {
		for i := 0; i < pp.mspancache.len; i++ {
			// Safe to call since the world is stopped.
			mheap_.spanalloc.free(unsafe.Pointer(pp.mspancache.buf[i]))
		}
		pp.mspancache.len = 0
		pp.pcache.flush(&mheap_.pages)
	})
	freemcache(pp.mcache)",4118.0,26.0,119571.0,unsafe.Pointer,call,proc.go,5418.0,153166.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
159,159,159,159,159,35222,"err := getsockopt(fd, level, opt, unsafe.Pointer(&tv), &vallen)","}

func GetsockoptTimeval(fd, level, opt int) (*Timeval, error) {
	var tv Timeval
	vallen := _Socklen(unsafe.Sizeof(tv))
	err := getsockopt(fd, level, opt, unsafe.Pointer(&tv), &vallen)
	return &tv, err
}

func GetsockoptUint64(fd, level, opt int) (value uint64, err error) {
	var n uint64",292.0,36.0,6958.0,unsafe.Pointer,assignment,syscall_unix.go,430.0,11034.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,delegate,ffi
160,160,160,160,160,35231,"r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getgroups(n int, list *_Gid_t) (nn int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
	nn = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",1490.0,61.0,35526.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
161,161,161,161,161,35581,raceReleaseMerge(unsafe.Pointer(&ioSync)),"}

func Writev(fd int, iovs [][]byte) (n int, err error) {
	iovecs := bytes2iovec(iovs)
	if raceenabled {
		raceReleaseMerge(unsafe.Pointer(&ioSync))
	}
	n, err = writev(fd, iovecs)
	writevRacedetect(iovecs, n)
	return n, err
}",1843.0,20.0,56996.0,unsafe.Pointer,call,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,delegate,layout
162,162,162,162,162,35588,"if !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {","				frame.continpc = 0
			}
		}

		if callback != nil {
			if !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {
				return n
			}
		}

		if pcbuf != nil {",334.0,38.0,12086.0,unsafe.Pointer,call,traceback.go,1340.0,45165.0,runtime,std,std,kubernetes/kubernetes,cast-struct,hide-escape
163,163,163,163,163,35933,"func mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer {","import (
	""runtime/internal/sys""
	""unsafe""
)

func mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer {
	if raceenabled && h != nil {
		callerpc := getcallerpc()
		racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapaccess1_faststr))
	}
	if h == nil || h.count == 0 {",12.0,57.0,279.0,unsafe.Pointer,parameter,map_faststr.go,476.0,14153.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,efficiency
164,164,164,164,164,36276,"repr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)","		if i > 0 {
			repr = append(repr, "", ""...)
		}
		if ft.IsVariadic() && i == int(ft.inCount)-1 {
			repr = append(repr, ""...""...)
			repr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)
		} else {
			repr = append(repr, t.String()...)
		}
	}
	repr = append(repr, ')')",2054.0,37.0,57379.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
165,165,165,165,165,36626,"func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {","	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)",619.0,46.0,15823.0,unsafe.Pointer,parameter,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
166,166,166,166,166,36633,"tracebackdefers(gp, adjustframe, noescape(unsafe.Pointer(adjinfo)))","	}

	// Adjust defer argument blocks the same way we adjust active stack frames.
	// Note: this code is after the loop above, so that if a defer record is
	// stack allocated, we work on the copy in the new stack.
	tracebackdefers(gp, adjustframe, noescape(unsafe.Pointer(adjinfo)))
}

func adjustpanics(gp *g, adjinfo *adjustinfo) {
	// Panics are on stack and already adjusted.
	// Update pointer to head of list in G.",746.0,44.0,22253.0,unsafe.Pointer,call,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,delegate,hide-escape
167,167,167,167,167,36976,"_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2171.0,44.0,52881.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
168,168,168,168,168,36986,"_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockGetres(clockid int32, res *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",479.0,66.0,11986.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
169,169,169,169,169,36997,"_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)","	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1414.0,45.0,34655.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
170,170,170,170,170,37009,"err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)","}

func GetsockoptTpacketStatsV3(fd, level, opt int) (*TpacketStatsV3, error) {
	var value TpacketStatsV3
	vallen := _Socklen(SizeofTpacketStatsV3)
	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
	return &value, err
}

func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))",1084.0,36.0,30512.0,unsafe.Pointer,assignment,syscall_linux.go,2100.0,62378.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,delegate,ffi
171,171,171,171,171,37010,"func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {","	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
	_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2222.0,26.0,54244.0,unsafe.Pointer,parameter,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
172,172,172,172,172,37013,"func typedmemclrpartial(t *rtype, ptr unsafe.Pointer, off, size uintptr)","func typedmemclr(t *rtype, ptr unsafe.Pointer)

// typedmemclrpartial is like typedmemclr but assumes that
// dst points off bytes into the value and only clears size bytes.
//go:noescape
func typedmemclrpartial(t *rtype, ptr unsafe.Pointer, off, size uintptr)

// typedslicecopy copies a slice of elemType values from src to dst,
// returning the number of elements copied.
//go:noescape
func typedslicecopy(elemType *rtype, dst, src sliceHeader) int",2766.0,39.0,81401.0,unsafe.Pointer,parameter,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,definition,layout
173,173,173,173,173,37356,"atomic.StorepNoWB(unsafe.Pointer(&pd.wt.f), nil) // full memory barrier between store to wd and load of wg in netpollunblock","	if write {
		if pd.wd <= 0 || pd.wt.f == nil && !read {
			throw(""runtime: inconsistent write deadline"")
		}
		pd.wd = -1
		atomic.StorepNoWB(unsafe.Pointer(&pd.wt.f), nil) // full memory barrier between store to wd and load of wg in netpollunblock
		wg = netpollunblock(pd, 'w', false)
	}
	unlock(&pd.lock)
	if rg != nil {
		netpollgoready(rg, 0)",486.0,21.0,13695.0,unsafe.Pointer,call,netpoll.go,531.0,14809.0,runtime,std,std,kubernetes/kubernetes,delegate,atomic
174,174,174,174,174,37699,"func Casp1(ptr *unsafe.Pointer, old, new unsafe.Pointer) bool","
//go:noescape
func Cas(ptr *uint32, old, new uint32) bool

// NO go:noescape annotation; see atomic_pointer.go.
func Casp1(ptr *unsafe.Pointer, old, new unsafe.Pointer) bool

//go:noescape
func Casuintptr(ptr *uintptr, old, new uintptr) bool

//go:noescape",15.0,17.0,338.0,unsafe.Pointer,parameter,stubs.go,35.0,795.0,runtime/internal/atomic,std,std,kubernetes/kubernetes,definition,layout
175,175,175,175,175,38385,"memclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)","			for i := uintptr(0); i < nbyte; i++ {
				*bitp = bitPointerAll | bitScanAll
				bitp = add1(bitp)
			}
		} else {
			memclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)
		}
		h = hNext
		nw -= anw
	}
}",822.0,25.0,28100.0,unsafe.Pointer,call,mbitmap.go,2083.0,69152.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
176,176,176,176,176,38728,"sysFree(unsafe.Pointer(end), endLen, nil)","		pAligned := alignUp(p, align)
		sysFree(unsafe.Pointer(p), pAligned-p, nil)
		end := pAligned + size
		endLen := (p + size + align) - end
		if endLen > 0 {
			sysFree(unsafe.Pointer(end), endLen, nil)
		}
		return unsafe.Pointer(pAligned), size
	}
}
",820.0,12.0,31763.0,unsafe.Pointer,call,malloc.go,1422.0,49481.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
177,177,177,177,177,39078,_p0 = unsafe.Pointer(&p[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)",605.0,9.0,15422.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
178,178,178,178,178,39085,tt := (*arrayType)(unsafe.Pointer(t)),"
func (t *rtype) Len() int {
	if t.Kind() != Array {
		panic(""reflect: Len of non-array type "" + t.String())
	}
	tt := (*arrayType)(unsafe.Pointer(t))
	return int(tt.len)
}

func (t *rtype) NumField() int {
	if t.Kind() != Struct {",967.0,21.0,26981.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
179,179,179,179,179,39428,"_, _, e1 := Syscall(SYS_UTIME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UTIME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2492.0,41.0,61734.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
180,180,180,180,180,39430,"func racewriterangepc(addr unsafe.Pointer, sz, callerpc, pc uintptr)        { throw(""race"") }","func raceprocdestroy(ctx uintptr)                                           { throw(""race"") }
func racemapshadow(addr unsafe.Pointer, size uintptr)                       { throw(""race"") }
func racewritepc(addr unsafe.Pointer, callerpc, pc uintptr)                 { throw(""race"") }
func racereadpc(addr unsafe.Pointer, callerpc, pc uintptr)                  { throw(""race"") }
func racereadrangepc(addr unsafe.Pointer, sz, callerpc, pc uintptr)         { throw(""race"") }
func racewriterangepc(addr unsafe.Pointer, sz, callerpc, pc uintptr)        { throw(""race"") }
func raceacquire(addr unsafe.Pointer)                                       { throw(""race"") }
func raceacquireg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }
func raceacquirectx(racectx uintptr, addr unsafe.Pointer)                   { throw(""race"") }
func racerelease(addr unsafe.Pointer)                                       { throw(""race"") }
func racereleaseg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }",29.0,28.0,1371.0,unsafe.Pointer,parameter,race0.go,42.0,2670.0,runtime,std,std,kubernetes/kubernetes,unused,unused
181,181,181,181,181,39773,(*valp)[0] = unsafe.Pointer(t),"	for _, ptab := range md.ptab {
		symName := resolveNameOff(unsafe.Pointer(md.types), ptab.name)
		t := (*_type)(unsafe.Pointer(md.types)).typeOff(ptab.typ)
		var val interface{}
		valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))
		(*valp)[0] = unsafe.Pointer(t)

		name := symName.name()
		if t.kind&kindMask == kindFunc {
			name = ""."" + name
		}",85.0,16.0,2900.0,unsafe.Pointer,assignment,plugin.go,136.0,4262.0,runtime,std,std,kubernetes/kubernetes,memory-access,types
182,182,182,182,182,40116,raceacquire(unsafe.Pointer(&trace.shutdownSema)),"
	// The world is started but we've set trace.shutdown, so new tracing can't start.
	// Wait for the trace reader to flush pending buffers and stop.
	semacquire(&trace.shutdownSema)
	if raceenabled {
		raceacquire(unsafe.Pointer(&trace.shutdownSema))
	}

	// The lock protects us from races with StartTrace/StopTrace because they do stop-the-world.
	lock(&trace.lock)
	for _, p := range allp[:cap(allp)] {",326.0,15.0,14400.0,unsafe.Pointer,call,trace.go,1214.0,38634.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
183,183,183,183,183,40459,val := *(*uintptr)(unsafe.Pointer(p + i)),"			if markbuf[0] == 0 {
				markbuf[0] = ' '
			}
		}
		gwrite(markbuf[:])
		val := *(*uintptr)(unsafe.Pointer(p + i))
		p1(val)
		print("" "")

		// Can we symbolize val?
		fn := findfunc(val)",297.0,22.0,5918.0,unsafe.Pointer,assignment,print.go,309.0,6120.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,types
184,184,184,184,184,40802,_p1 = unsafe.Pointer(&dest[0]),"	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_FSETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), uintptr(flags), 0)
	if e1 != 0 {",770.0,9.0,19226.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
185,185,185,185,185,40805,"_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockGetres(clockid int32, res *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",492.0,66.0,12456.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
186,186,186,186,186,40806,"func resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name {","		racerelease(unsafe.Pointer(&reflectOffs.lock))
	}
	unlock(&reflectOffs.lock)
}

func resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name {
	if off == 0 {
		return name{}
	}
	base := uintptr(ptrInModule)
	for md := &firstmoduledata; md != nil; md = md.next {",185.0,33.0,4514.0,unsafe.Pointer,parameter,type.go,726.0,18709.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,types
187,187,187,187,187,41149,x = unsafe.Pointer(&zeroVal[0]),"	return
}

func convT32(val uint32) (x unsafe.Pointer) {
	if val == 0 {
		x = unsafe.Pointer(&zeroVal[0])
	} else {
		x = mallocgc(4, uint32Type, false)
		*(*uint32)(x) = val
	}
	return",345.0,7.0,10890.0,unsafe.Pointer,assignment,iface.go,558.0,16159.0,runtime,std,std,kubernetes/kubernetes,memory-access,layout
188,188,188,188,188,41492,"_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",275.0,42.0,6713.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
189,189,189,189,189,41838,"func reflect_typedmemclr(typ *_type, ptr unsafe.Pointer) {","	}
	memclrNoHeapPointers(ptr, typ.size)
}

//go:linkname reflect_typedmemclr reflect.typedmemclr
func reflect_typedmemclr(typ *_type, ptr unsafe.Pointer) {
	typedmemclr(typ, ptr)
}

//go:linkname reflect_typedmemclrpartial reflect.typedmemclrpartial
func reflect_typedmemclrpartial(typ *_type, ptr unsafe.Pointer, off, size uintptr) {",327.0,42.0,11732.0,unsafe.Pointer,parameter,mbarrier.go,348.0,12432.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
190,190,190,190,190,42181,return uintptr(unsafe.Pointer(c)),"	selunlock(scases, lockorder)
	panic(plainError(""send on closed channel""))
}

func (c *hchan) sortkey() uintptr {
	return uintptr(unsafe.Pointer(c))
}

// A runtimeSelect is a single case passed to rselect.
// This must match ../reflect/value.go:/runtimeSelect
type runtimeSelect struct {",500.0,17.0,11808.0,unsafe.Pointer,assignment,select.go,579.0,13555.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,types
191,191,191,191,191,42524,return &(*u)(unsafe.Pointer(t)).u,"	default:
		type u struct {
			rtype
			u uncommonType
		}
		return &(*u)(unsafe.Pointer(t)).u
	}
}

func (t *rtype) String() string {
	s := t.nameOff(t.str).name()",748.0,16.0,22113.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
192,192,192,192,192,42867,ts.fn = unsafe.Pointer(funcPC(mstart)),"		if _cgo_thread_start == nil {
			throw(""_cgo_thread_start missing"")
		}
		ts.g.set(mp.g0)
		ts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0]))
		ts.fn = unsafe.Pointer(funcPC(mstart))
		if msanenabled {
			msanwrite(unsafe.Pointer(&ts), unsafe.Sizeof(ts))
		}
		execLock.rlock() // Prevent process clone.
		asmcgocall(_cgo_thread_start, unsafe.Pointer(&ts))",1743.0,11.0,51871.0,unsafe.Pointer,assignment,proc.go,5418.0,153166.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,layout
193,193,193,193,193,43211,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mprotect(b []byte, prot int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1729.0,10.0,42411.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
194,194,194,194,194,43217,"md.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)","		if md.bad {
			continue
		}
		*modules = append(*modules, md)
		if md.gcdatamask == (bitvector{}) {
			md.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)
			md.gcbssmask = progToPointerMask((*byte)(unsafe.Pointer(md.gcbss)), md.ebss-md.bss)
		}
	}

	// Modules appear in the moduledata linked list in the order they are",435.0,46.0,13097.0,unsafe.Pointer,assignment,symtab.go,968.0,28996.0,runtime,std,std,kubernetes/kubernetes,cast-basic,efficiency
195,195,195,195,195,43561,"adjustpointer(adjinfo, unsafe.Pointer(&d.fd))","		adjustpointer(adjinfo, unsafe.Pointer(&d.fn))
		adjustpointer(adjinfo, unsafe.Pointer(&d.sp))
		adjustpointer(adjinfo, unsafe.Pointer(&d._panic))
		adjustpointer(adjinfo, unsafe.Pointer(&d.link))
		adjustpointer(adjinfo, unsafe.Pointer(&d.varp))
		adjustpointer(adjinfo, unsafe.Pointer(&d.fd))
	}

	// Adjust defer argument blocks the same way we adjust active stack frames.
	// Note: this code is after the loop above, so that if a defer record is
	// stack allocated, we work on the copy in the new stack.",740.0,26.0,21973.0,unsafe.Pointer,call,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
196,196,196,196,196,43907,stsp := uintptr(unsafe.Pointer(st.ss_sp)),"		old.stack = g.m.gsignal.stack
		old.stackguard0 = g.m.gsignal.stackguard0
		old.stackguard1 = g.m.gsignal.stackguard1
		old.stktopsp = g.m.gsignal.stktopsp
	}
	stsp := uintptr(unsafe.Pointer(st.ss_sp))
	g.m.gsignal.stack.lo = stsp
	g.m.gsignal.stack.hi = stsp + st.ss_size
	g.m.gsignal.stackguard0 = stsp + _StackGuard
	g.m.gsignal.stackguard1 = stsp + _StackGuard
}",1143.0,18.0,35761.0,unsafe.Pointer,assignment,signal_unix.go,1182.0,36808.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,layout
197,197,197,197,197,44250,_p0 = unsafe.Pointer(&_zero),"func Getrandom(buf []byte, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETRANDOM, uintptr(_p0), uintptr(len(buf)), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",819.0,9.0,20097.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
198,198,198,198,198,44257,"r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func accept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error) {
	r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2293.0,57.0,56131.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
199,199,199,199,199,44259,"err := ioctl(fd, req, uintptr(unsafe.Pointer(value)))","// IoctlSetTermios performs an ioctl on fd with a *Termios.
//
// The req value will usually be TCSETA or TIOCSETA.
func IoctlSetTermios(fd int, req uint, value *Termios) error {
	// TODO: if we get the chance, remove the req parameter.
	err := ioctl(fd, req, uintptr(unsafe.Pointer(value)))
	runtime.KeepAlive(value)
	return err
}

// IoctlGetInt performs an ioctl operation which gets an integer value",39.0,32.0,1265.0,unsafe.Pointer,assignment,ioctl.go,65.0,2044.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,delegate,ffi
200,200,200,200,200,44262,"_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setrlimit(resource int, rlim *Rlimit) (err error) {
	_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2100.0,67.0,51083.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
201,201,201,201,201,44265,s := (*sliceHeader)(unsafe.Pointer(&x)),"	// Declare slice so that the garbage collector
	// can see the base pointer in it.
	var x []unsafe.Pointer

	// Reinterpret as *sliceHeader to edit.
	s := (*sliceHeader)(unsafe.Pointer(&x))
	s.Len = j - i
	s.Cap = k - i
	if k-i > 0 {
		s.Data = arrayAt(base, i, typ.elem.Size(), ""i < k <= cap"")
	} else {",1815.0,22.0,54105.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,cast-header,types
202,202,202,202,202,44608,"atomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))","			// Allocate an L2 arena map.
			l2 = (*[1 << arenaL2Bits]*heapArena)(persistentalloc(unsafe.Sizeof(*l2), sys.PtrSize, nil))
			if l2 == nil {
				throw(""out of memory allocating heap arena map"")
			}
			atomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))
		}

		if l2[ri.l2()] != nil {
			throw(""arena already initialized"")
		}",727.0,22.0,28684.0,unsafe.Pointer,call,malloc.go,1422.0,49481.0,runtime,std,std,kubernetes/kubernetes,delegate,atomic
203,203,203,203,203,45294,"return unsafe.Pointer(&sa.raw), SizeofSockaddrTIPC, nil","	sa.raw.Family = AF_TIPC
	sa.raw.Scope = int8(sa.Scope)
	sa.raw.Addrtype = sa.Addr.tipcAddrtype()
	sa.raw.Addr = sa.Addr.tipcAddr()

	return unsafe.Pointer(&sa.raw), SizeofSockaddrTIPC, nil
}

// SockaddrL2TPIP implements the Sockaddr interface for IPPROTO_L2TP/AF_INET sockets.
type SockaddrL2TPIP struct {
	Addr   [4]byte",839.0,9.0,24255.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,cast-pointer,serialization
204,204,204,204,204,45301,"err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)","}

func GetsockoptUcred(fd, level, opt int) (*Ucred, error) {
	var value Ucred
	vallen := _Socklen(SizeofUcred)
	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
	return &value, err
}

func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))",601.0,36.0,14808.0,unsafe.Pointer,assignment,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,delegate,ffi
205,205,205,205,205,45644,ch  unsafe.Pointer // channel,"// A runtimeSelect is a single case passed to rselect.
// This must match ../runtime/select.go:/runtimeSelect
type runtimeSelect struct {
	dir SelectDir      // SelectSend, SelectRecv or SelectDefault
	typ *rtype         // channel type
	ch  unsafe.Pointer // channel
	val unsafe.Pointer // ptr to data (SendDir) or ptr to receive buffer (RecvDir)
}

// rselect runs a select. It returns the index of the chosen case.
// If the case was a receive, val is filled in with the received value.",2106.0,6.0,62404.0,unsafe.Pointer,variable,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,definition,types
206,206,206,206,206,45987,_p0 = unsafe.Pointer(&p[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)",2084.0,9.0,50743.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
207,207,207,207,207,45988,_p0 = unsafe.Pointer(&_zero),"func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",607.0,9.0,15462.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
208,208,208,208,208,45995,"r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))","	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2412.0,106.0,59597.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
209,209,209,209,209,45997,var p unsafe.Pointer,"}

// Klogset wraps the sys_syslog system call; it sets console_loglevel to
// the value specified by arg and passes a dummy pointer to bufp.
func Klogset(typ int, arg int) (err error) {
	var p unsafe.Pointer
	_, _, errno := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(p), uintptr(arg))
	if errno != 0 {
		return errnoErr(errno)
	}
	return nil",2091.0,8.0,63770.0,unsafe.Pointer,variable,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
210,210,210,210,210,46004,_p0 = unsafe.Pointer(&b[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mprotect(b []byte, prot int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))
	if e1 != 0 {",1731.0,9.0,42451.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
211,211,211,211,211,46005,"func arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer {","// The array pointed at by p must have at least i+1 elements:
// it is invalid (but impossible to check here) to pass i >= len,
// because then the result will point outside the array.
// whySafe must explain why i < len. (Passing ""i < len"" is fine;
// the benefit is to surface this assumption at the call site.)
func arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer {
	return add(p, uintptr(i)*eltSize, ""i < len"")
}

// grow grows the slice s so that it can hold extra more values, allocating
// more capacity if needed. It also returns the old and new slice lengths.",1990.0,16.0,59519.0,unsafe.Pointer,parameter,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,pointer-arithmetic,types
212,212,212,212,212,46694,"insertk = add(unsafe.Pointer(newb), dataOffset)","
	if inserti == nil {
		// all current buckets are full, allocate a new one.
		newb := h.newoverflow(t, b)
		inserti = &newb.tophash[0]
		insertk = add(unsafe.Pointer(newb), dataOffset)
		elem = add(insertk, bucketCnt*uintptr(t.keysize))
	}

	// store new key/elem at insert position
	if t.indirectkey() {",656.0,17.0,21856.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,types
213,213,213,213,213,47037,"return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))","	Xss      int32
}

// PtraceGetRegs386 fetches the registers used by 386 binaries.
func PtraceGetRegs386(pid int, regsout *PtraceRegs386) error {
	return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))
}

// PtraceSetRegs386 sets the registers used by 386 binaries.
func PtraceSetRegs386(pid int, regs *PtraceRegs386) error {
	return ptrace(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs)))",33.0,48.0,687.0,unsafe.Pointer,assignment,zptrace_x86_linux.go,80.0,1874.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,delegate,ffi
214,214,214,214,214,47038,"_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2262.0,44.0,55261.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
215,215,215,215,215,47053,"r0, _, e1 := Syscall6(SYS_WAIT4, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error) {
	r0, _, e1 := Syscall6(SYS_WAIT4, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)
	wpid = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",187.0,57.0,4648.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
216,216,216,216,216,47067,"oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing","	B         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)
	noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details
	hash0     uint32 // hash seed

	buckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.
	oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing
	nevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)

	extra *mapextra // optional fields
}
",125.0,13.0,5385.0,unsafe.Pointer,variable,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,definition,types
217,217,217,217,217,47411,"return unsafe.Pointer(&sa.raw), SizeofSockaddrL2, nil","	}
	cid := (*[2]byte)(unsafe.Pointer(&sa.raw.Cid))
	cid[0] = byte(sa.CID)
	cid[1] = byte(sa.CID >> 8)
	sa.raw.Bdaddr_type = sa.AddrType
	return unsafe.Pointer(&sa.raw), SizeofSockaddrL2, nil
}

// SockaddrRFCOMM implements the Sockaddr interface for AF_BLUETOOTH type sockets
// using the RFCOMM protocol.
//",509.0,9.0,13300.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,cast-pointer,serialization
218,218,218,218,218,47417,mv := (*maptype)(unsafe.Pointer(v)),"			}
		}
		return true
	case kindMap:
		mt := (*maptype)(unsafe.Pointer(t))
		mv := (*maptype)(unsafe.Pointer(v))
		return typesEqual(mt.key, mv.key, seen) && typesEqual(mt.elem, mv.elem, seen)
	case kindPtr:
		pt := (*ptrtype)(unsafe.Pointer(t))
		pv := (*ptrtype)(unsafe.Pointer(v))
		return typesEqual(pt.elem, pv.elem, seen)",685.0,20.0,17646.0,unsafe.Pointer,assignment,type.go,726.0,18709.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
219,219,219,219,219,47761,"if !atomic.Casp1(ppu, unsafe.Pointer(p), unsafe.Pointer(p+delta)) {","				if stackDebug >= 3 {
					print(""adjust ptr "", hex(p), "" "", funcname(f), ""\n"")
				}
				if useCAS {
					ppu := (*unsafe.Pointer)(unsafe.Pointer(pp))
					if !atomic.Casp1(ppu, unsafe.Pointer(p), unsafe.Pointer(p+delta)) {
						goto retry
					}
				} else {
					*pp = p + delta
				}",607.0,28.0,17749.0,unsafe.Pointer,call,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,atomic
220,220,220,220,220,48454,_p0 = unsafe.Pointer(&b[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(advice))
	if e1 != 0 {",1681.0,9.0,41039.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
221,221,221,221,221,48461,"r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))","	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",1578.0,106.0,38139.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
222,222,222,222,222,49149,v := (*funcType)(unsafe.Pointer(V)),"		// Otherwise continue test for identical underlying type.
		return V.chanDir() == T.chanDir() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)

	case Func:
		t := (*funcType)(unsafe.Pointer(T))
		v := (*funcType)(unsafe.Pointer(V))
		if t.outCount != v.outCount || t.inCount != v.inCount {
			return false
		}
		for i := 0; i < t.NumIn(); i++ {
			if !haveIdenticalType(t.In(i), v.In(i), cmpTags) {",842.0,20.0,21997.0,unsafe.Pointer,assignment,type.go,925.0,23990.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
223,223,223,223,223,49494,buf = (*stackWorkBuf)(unsafe.Pointer(getempty())),"	} else if buf.nobj == len(buf.obj) {
		if s.freeBuf != nil {
			buf = s.freeBuf
			s.freeBuf = nil
		} else {
			buf = (*stackWorkBuf)(unsafe.Pointer(getempty()))
		}
		buf.nobj = 0
		buf.next = *head
		*head = buf
	}",228.0,26.0,7538.0,unsafe.Pointer,assignment,mgcstack.go,354.0,10800.0,runtime,std,std,kubernetes/kubernetes,cast-struct,layout
224,224,224,224,224,49837,"return interhash(noescape(unsafe.Pointer(&i)), seed)","}

func ifaceHash(i interface {
	F()
}, seed uintptr) uintptr {
	return interhash(noescape(unsafe.Pointer(&i)), seed)
}

const hashRandomBytes = sys.PtrSize / 4 * 64

// used in asm_{386,amd64,arm64}.s to seed the hash function",336.0,28.0,8790.0,unsafe.Pointer,assignment,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,delegate,hide-escape
225,225,225,225,225,50180,"clobberfree(unsafe.Pointer(x), size)","				x := s.base() + i*s.elemsize
				if debug.allocfreetrace != 0 {
					tracefree(unsafe.Pointer(x), size)
				}
				if debug.clobberfree != 0 {
					clobberfree(unsafe.Pointer(x), size)
				}
				if raceenabled {
					racefree(unsafe.Pointer(x), size)
				}
				if msanenabled {",305.0,18.0,9772.0,unsafe.Pointer,call,mgcsweep.go,459.0,15150.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
226,226,226,226,226,50524,func raceReleaseMerge(addr unsafe.Pointer) {,"const raceenabled = false

func raceAcquire(addr unsafe.Pointer) {
}

func raceReleaseMerge(addr unsafe.Pointer) {
}

func raceReadRange(addr unsafe.Pointer, len int) {
}
",18.0,28.0,380.0,unsafe.Pointer,parameter,race0.go,25.0,509.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,unused,unused
227,227,227,227,227,50538,var _p2 unsafe.Pointer,"	var _p1 *byte
	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}",1075.0,10.0,25981.0,unsafe.Pointer,variable,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
228,228,228,228,228,50552,_p0 = unsafe.Pointer(&_zero),"func preadv2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREADV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",1639.0,9.0,39932.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
229,229,229,229,229,50559,*(*unsafe.Pointer)(unsafe.Pointer(&dispatchF)) = noescape(unsafe.Pointer(&dispatchFV)),"// debugCallWrap pushes a defer to recover from panics in debug calls
// and then calls the dispatching function at PC dispatch.
func debugCallWrap(dispatch uintptr) {
	var dispatchF func()
	dispatchFV := funcval{dispatch}
	*(*unsafe.Pointer)(unsafe.Pointer(&dispatchF)) = noescape(unsafe.Pointer(&dispatchFV))

	var ok bool
	defer func() {
		if !ok {
			err := recover()",103.0,5.0,2693.0,unsafe.Pointer,assignment,debugcall.go,114.0,2899.0,runtime,std,std,kubernetes/kubernetes,delegate,hide-escape
230,230,230,230,230,51595,"err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)","// GetsockoptString returns the string value of the socket option opt for the
// socket associated with fd at the given socket level.
func GetsockoptString(fd, level, opt int) (string, error) {
	buf := make([]byte, 256)
	vallen := _Socklen(len(buf))
	err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)
	if err != nil {
		if err == ERANGE {
			buf = make([]byte, vallen)
			err = getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)
		}",1128.0,36.0,31510.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,delegate,ffi
231,231,231,231,231,51604,"func call8388608(typ, fn, arg unsafe.Pointer, n, retoffset uint32)","func call262144(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call524288(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call1048576(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call2097152(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call4194304(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call8388608(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call16777216(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call33554432(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call67108864(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call134217728(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call268435456(typ, fn, arg unsafe.Pointer, n, retoffset uint32)",292.0,31.0,11473.0,unsafe.Pointer,parameter,stubs.go,345.0,13395.0,runtime,std,std,kubernetes/kubernetes,definition,types
232,232,232,232,232,51947,return (*[1 << 30]byte)(unsafe.Pointer(uintptr(unsafe.Pointer(&fh.fileHandle.Type)) + 4))[:n:n],"func (fh *FileHandle) Bytes() []byte {
	n := fh.Size()
	if n == 0 {
		return nil
	}
	return (*[1 << 30]byte)(unsafe.Pointer(uintptr(unsafe.Pointer(&fh.fileHandle.Type)) + 4))[:n:n]
}

// NameToHandleAt wraps the name_to_handle_at system call; it obtains
// a handle for a path name.
func NameToHandleAt(dirfd int, path string, flags int) (handle FileHandle, mountID int, err error) {",2050.0,26.0,62388.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,pointer-arithmetic,efficiency
233,233,233,233,233,51962,_p0 = unsafe.Pointer(&_zero),"func pwritev2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PWRITEV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",1690.0,9.0,41466.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
234,234,234,234,234,51968,e := (*emptyInterface)(unsafe.Pointer(&i)),"
// packEface converts v to the empty interface.
func packEface(v Value) interface{} {
	t := v.typ
	var i interface{}
	e := (*emptyInterface)(unsafe.Pointer(&i))
	// First, fill in the data portion of the interface.
	switch {
	case ifaceIndir(t):
		if v.flag&flagIndir == 0 {
			panic(""bad indir"")",106.0,25.0,3516.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
235,235,235,235,235,52311,_p0 = unsafe.Pointer(&buf[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Klogctl(typ int, buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(_p0), uintptr(len(buf)))
	n = int(r0)",573.0,9.0,13636.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
236,236,236,236,236,52655,_p0 = unsafe.Pointer(&iovs[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func preadv2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREADV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))
	n = int(r0)",1671.0,9.0,40941.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
237,237,237,237,237,52663,gp._panic = (*_panic)(noescape(unsafe.Pointer(&p))),"	}

	var p _panic
	p.arg = e
	p.link = gp._panic
	gp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))

	atomic.Xadd(&runningPanicDefers, 1)

	// By calculating getcallerpc/getcallersp here, we avoid scanning the
	// gopanic frame (stack scanning is slow...)",923.0,33.0,28774.0,unsafe.Pointer,assignment,panic.go,1422.0,43241.0,runtime,std,std,kubernetes/kubernetes,cast-struct,hide-escape
238,238,238,238,238,53006,"return Value{t, unsafe.Pointer(impl), flag(Func)}","	// makeFuncImpl contains a stack map for use by the runtime
	_, argLen, _, stack, _ := funcLayout(ftyp, nil)

	impl := &makeFuncImpl{code: code, stack: stack, argLen: argLen, ftyp: ftyp, fn: fn}

	return Value{t, unsafe.Pointer(impl), flag(Func)}
}

// makeFuncStub is an assembly function that is the code half of
// the function returned from MakeFunc. It expects a *callReflectFunc
// as its context register, and its job is to invoke callReflect(ctxt, frame)",67.0,18.0,2326.0,unsafe.Pointer,assignment,makefunc.go,138.0,5060.0,reflect,std,std,kubernetes/kubernetes,cast-pointer,types
239,239,239,239,239,53351,"racefree(unsafe.Pointer(x), size)","				}
				if debug.clobberfree != 0 {
					clobberfree(unsafe.Pointer(x), size)
				}
				if raceenabled {
					racefree(unsafe.Pointer(x), size)
				}
				if msanenabled {
					msanfree(unsafe.Pointer(x), size)
				}
			}",308.0,15.0,9838.0,unsafe.Pointer,call,mgcsweep.go,459.0,15150.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
240,240,240,240,240,53697,"func typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr {","// is slower but more general and is used for hashing interface types
// (called from interhash or nilinterhash, above) or for hashing in
// maps generated by reflect.MapOf (reflect_typehash, below).
// Note: this function must match the compiler generated
// functions exactly. See issue 37716.
func typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr {
	if t.tflag&tflagRegularMemory != 0 {
		// Handle ptr sizes specially, see issue 37086.
		switch t.size {
		case 4:
			return memhash32(p, h)",163.0,27.0,4246.0,unsafe.Pointer,parameter,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,delegate,types
241,241,241,241,241,54040,fh := (*fileHandle)(unsafe.Pointer(&buf[0])),"	// only be 32 bytes.
	size := uint32(32 + unsafe.Sizeof(fileHandle{}))
	didResize := false
	for {
		buf := make([]byte, size)
		fh := (*fileHandle)(unsafe.Pointer(&buf[0]))
		fh.Bytes = size - uint32(unsafe.Sizeof(fileHandle{}))
		err = nameToHandleAt(dirfd, path, fh, &mid, flags)
		if err == EOVERFLOW {
			if didResize {
				// We shouldn't need to resize more than once",1833.0,23.0,56321.0,unsafe.Pointer,assignment,syscall_linux.go,1973.0,58748.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,cast-bytes,serialization
242,242,242,242,242,54043,"_, _, e1 := Syscall(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Nanosleep(time *Timespec, leftover *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1137.0,45.0,27566.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
243,243,243,243,243,54058,"_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ustat(dev int, ubuf *Ustat_t) (err error) {
	_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2272.0,55.0,55521.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
244,244,244,244,244,54059,var disableSplice unsafe.Pointer,"func splice(out int, in int, max int, flags int) (int, error) {
	n, err := syscall.Splice(in, nil, out, nil, max, flags)
	return int(n), err
}

var disableSplice unsafe.Pointer

// newTempPipe sets up a temporary pipe for a splice operation.
func newTempPipe() (prfd, pwfd int, sc string, err error) {
	p := (*bool)(atomic.LoadPointer(&disableSplice))
	if p != nil && *p {",149.0,19.0,4549.0,unsafe.Pointer,variable,splice_linux.go,191.0,5792.0,internal/poll,std,std,kubernetes/kubernetes,definition,layout
245,245,245,245,245,54402,prototype := *(**funcType)(unsafe.Pointer(&ifunc)),"		panic(""reflect.FuncOf: last arg of variadic func must be slice"")
	}

	// Make a func type.
	var ifunc interface{} = (func())(nil)
	prototype := *(**funcType)(unsafe.Pointer(&ifunc))
	n := len(in) + len(out)

	var ft *funcType
	var args []*rtype
	switch {",1939.0,29.0,54501.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
246,246,246,246,246,54745,*(*uintptr)(unsafe.Pointer(uintptr(123))) = 2,"		// an M. Instead of hanging, just crash.
		// Cannot call split-stack function as there is no G.
		s := stringStructOf(&badginsignalMsg)
		write(2, s.str, int32(s.len))
		exit(2)
		*(*uintptr)(unsafe.Pointer(uintptr(123))) = 2
	}
	needm(0)
	if !sigsend(uint32(sig)) {
		// A foreign thread received the signal sig, and the
		// Go code does not want to handle it.",906.0,15.0,27675.0,unsafe.Pointer,assignment,signal_unix.go,1182.0,36808.0,runtime,std,std,kubernetes/kubernetes,memory-access,ffi
247,247,247,247,247,55088,"hash := t.hasher(noescape(unsafe.Pointer(&key)), uintptr(h.hash0))","		racewritepc(unsafe.Pointer(h), callerpc, funcPC(mapassign_fast32))
	}
	if h.flags&hashWriting != 0 {
		throw(""concurrent map writes"")
	}
	hash := t.hasher(noescape(unsafe.Pointer(&key)), uintptr(h.hash0))

	// Set hashWriting after calling t.hasher for consistency with mapassign.
	h.flags ^= hashWriting

	if h.buckets == nil {",103.0,28.0,2955.0,unsafe.Pointer,assignment,map_fast32.go,452.0,12474.0,runtime,std,std,kubernetes/kubernetes,delegate,hide-escape
248,248,248,248,248,55431,_p0 = unsafe.Pointer(&_zero),"func Pread(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",264.0,9.0,6314.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
249,249,249,249,249,55438,return **(**uintptr)(unsafe.Pointer(&f)),"			// identify a single function uniquely. All method expressions
			// created via reflect have the same underlying code pointer,
			// so their Pointers are equal. The function used here must
			// match the one used in makeMethodValue.
			f := methodValueCall
			return **(**uintptr)(unsafe.Pointer(&f))
		}
		p := v.pointer()
		// Non-nil func value points at data block.
		// First word of data block is actual code.
		if p != nil {",1444.0,25.0,44284.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,cast-pointer,types
250,250,250,250,250,55784,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1745.0,10.0,42757.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
251,251,251,251,251,55799,"r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(arg5), 0)","	var _p1 *byte
	_p1, err = BytePtrFromString(arg4)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(arg5), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",252.0,73.0,6317.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
252,252,252,252,252,55814,"_, _, e1 := Syscall(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)","	var _p1 *byte
	_p1, err = BytePtrFromString(putold)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1202.0,46.0,29405.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
253,253,253,253,253,55827,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1753.0,10.0,42604.0,unsafe.Pointer,variable,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
254,254,254,254,254,55839,"return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))","	}
	return setsockopt(fd, level, opt, p, uintptr(len(filter)*SizeofCanFilter))
}

func SetsockoptTpacketReq(fd, level, opt int, tp *TpacketReq) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

func SetsockoptTpacketReq3(fd, level, opt int, tp *TpacketReq3) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}",1111.0,36.0,31530.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,delegate,ffi
255,255,255,255,255,55845,_p0 = unsafe.Pointer(&_zero),"func Getdents(fd int, buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(_p0), uintptr(len(buf)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",787.0,9.0,19626.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
256,256,256,256,256,55851,var _p2 unsafe.Pointer,"	var _p1 *byte
	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}",1098.0,10.0,26737.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
257,257,257,257,257,55852,h := (*Cmsghdr)(unsafe.Pointer(&b[0])),"// UnixRights encodes a set of open file descriptors into a socket
// control message for sending to another process.
func UnixRights(fds ...int) []byte {
	datalen := len(fds) * 4
	b := make([]byte, CmsgSpace(datalen))
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	h.Level = SOL_SOCKET
	h.Type = SCM_RIGHTS
	h.SetLen(CmsgLen(datalen))
	for i, fd := range fds {
		*(*int32)(h.data(4 * uintptr(i))) = int32(fd)",67.0,18.0,1959.0,unsafe.Pointer,assignment,sockcmsg_unix.go,92.0,2619.0,syscall,std,std,kubernetes/kubernetes,cast-struct,serialization
258,258,258,258,258,56195,"_, _, errno := Syscall(fcntl64Syscall, fd, uintptr(cmd), uintptr(unsafe.Pointer(lk)))","// systems by flock_linux_32bit.go to be SYS_FCNTL64.
var fcntl64Syscall uintptr = SYS_FCNTL

// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command.
func FcntlFlock(fd uintptr, cmd int, lk *Flock_t) error {
	_, _, errno := Syscall(fcntl64Syscall, fd, uintptr(cmd), uintptr(unsafe.Pointer(lk)))
	if errno == 0 {
		return nil
	}
	return errno
}",17.0,67.0,621.0,unsafe.Pointer,assignment,flock.go,22.0,691.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
259,259,259,259,259,56539,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getcwd(buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",183.0,10.0,4670.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
260,260,260,260,260,56547,bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n],"		// everyone uses this convention.
		n := 0
		for n < len(pp.Path) && pp.Path[n] != 0 {
			n++
		}
		bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]
		sa.Name = string(bytes)
		return sa, nil

	case AF_INET:
		pp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))",487.0,34.0,11913.0,unsafe.Pointer,assignment,syscall_linux.go,997.0,26679.0,syscall,std,std,kubernetes/kubernetes,cast-bytes,serialization
261,261,261,261,261,56892,raceReleaseMerge(unsafe.Pointer(&ioSync)),"}

func Pwritev2(fd int, iovs [][]byte, offset int64, flags int) (n int, err error) {
	iovecs := bytes2iovec(iovs)
	if raceenabled {
		raceReleaseMerge(unsafe.Pointer(&ioSync))
	}
	lo, hi := offs2lohi(offset)
	n, err = pwritev2(fd, iovecs, lo, hi, flags)
	writevRacedetect(iovecs, n)
	return n, err",1797.0,20.0,55860.0,unsafe.Pointer,call,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,delegate,ffi
262,262,262,262,262,56899,_p0 = unsafe.Pointer(&_zero),"func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",1226.0,9.0,28535.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
263,263,263,263,263,57242,return *(*unsafe.Pointer)(v.ptr),"func (v Value) pointer() unsafe.Pointer {
	if v.typ.size != ptrSize || !v.typ.pointers() {
		panic(""can't call pointer on a non-pointer Value"")
	}
	if v.flag&flagIndir != 0 {
		return *(*unsafe.Pointer)(v.ptr)
	}
	return v.ptr
}

// packEface converts v to the empty interface.",96.0,13.0,3331.0,unsafe.Pointer,assignment,value.go,486.0,14113.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-pointer,types
264,264,264,264,264,57585,v := unsafe.Pointer(f.chunk),"	if uintptr(f.nchunk) < f.size {
		f.chunk = uintptr(persistentalloc(_FixAllocChunk, 0, f.stat))
		f.nchunk = _FixAllocChunk
	}

	v := unsafe.Pointer(f.chunk)
	if f.first != nil {
		f.first(f.arg, v)
	}
	f.chunk = f.chunk + f.size
	f.nchunk -= uint32(f.size)",84.0,7.0,2519.0,unsafe.Pointer,assignment,mfixalloc.go,99.0,2787.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
265,265,265,265,265,57930,argp := (*[100]uintptr)(unsafe.Pointer(frame.argp)),"				file, line := funcline(f, tracepc)
				if name == ""runtime.gopanic"" {
					name = ""panic""
				}
				print(name, ""("")
				argp := (*[100]uintptr)(unsafe.Pointer(frame.argp))
				for i := uintptr(0); i < frame.arglen/sys.PtrSize; i++ {
					if i >= 10 {
						print("", ..."")
						break
					}",439.0,29.0,15712.0,unsafe.Pointer,assignment,traceback.go,1340.0,45165.0,runtime,std,std,kubernetes/kubernetes,cast-struct,layout
266,266,266,266,266,58273,"atomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil) // full memory barrier between stores to rd/wd and load of rg/wg in netpollunblock","		}
	}
	// If we set the new deadline in the past, unblock currently pending IO if any.
	var rg, wg *g
	if pd.rd < 0 || pd.wd < 0 {
		atomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil) // full memory barrier between stores to rd/wd and load of rg/wg in netpollunblock
		if pd.rd < 0 {
			rg = netpollunblock(pd, 'r', false)
		}
		if pd.wd < 0 {
			wg = netpollunblock(pd, 'w', false)",289.0,30.0,8678.0,unsafe.Pointer,call,netpoll.go,531.0,14809.0,runtime,std,std,kubernetes/kubernetes,delegate,atomic
267,267,267,267,267,58616,dumpint(uint64(uintptr(unsafe.Pointer(mp)))),"}

func dumpms() {
	for mp := allm; mp != nil; mp = mp.alllink {
		dumpint(tagOSThread)
		dumpint(uint64(uintptr(unsafe.Pointer(mp))))
		dumpint(uint64(mp.id))
		dumpint(mp.procid)
	}
}
",536.0,26.0,13293.0,unsafe.Pointer,call,heapdump.go,725.0,17514.0,runtime,std,std,kubernetes/kubernetes,cast-basic,layout
268,268,268,268,268,58959,"return utimes(path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))","	ts[1] = NsecToTimespec(TimevalToNsec(tv[1]))
	err := utimensat(AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
	if err != ENOSYS {
		return err
	}
	return utimes(path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
}

//sys	utimensat(dirfd int, path string, times *[2]Timespec, flags int) (err error)

func UtimesNano(path string, ts []Timespec) error {",189.0,36.0,5511.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,cast-struct,efficiency
269,269,269,269,269,58973,"err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))","	}

	// Trailing edge.
	if len(data) > 0 {
		var buf [SizeofPtr]byte
		err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return n, err
		}
		copy(buf[0:], data)
		word := *((*uintptr)(unsafe.Pointer(&buf[0])))",1506.0,55.0,44227.0,unsafe.Pointer,assignment,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,pointer-arithmetic,ffi
270,270,270,270,270,58980,*(*unsafe.Pointer)(dst.k) = *(*unsafe.Pointer)(k),"
				// Copy key.
				if t.key.ptrdata != 0 && writeBarrier.enabled {
					if sys.PtrSize == 8 {
						// Write with a write barrier.
						*(*unsafe.Pointer)(dst.k) = *(*unsafe.Pointer)(k)
					} else {
						// There are three ways to squeeze at least one 32 bit pointer into 64 bits.
						// Give up and call typedmemmove.
						typedmemmove(t.key, dst.k, k)
					}",424.0,10.0,11576.0,unsafe.Pointer,assignment,map_fast64.go,458.0,12663.0,runtime,std,std,kubernetes/kubernetes,memory-access,efficiency
271,271,271,271,271,59666,"n := write(netpollBreakWr, unsafe.Pointer(&b), 1)","
// netpollBreak interrupts an epollwait.
func netpollBreak() {
	for {
		var b byte
		n := write(netpollBreakWr, unsafe.Pointer(&b), 1)
		if n == 1 {
			break
		}
		if n == -_EINTR {
			continue",79.0,30.0,1919.0,unsafe.Pointer,assignment,netpoll_epoll.go,171.0,4097.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
272,272,272,272,272,60009,v := (*structType)(unsafe.Pointer(V)),"	case Ptr, Slice:
		return haveIdenticalType(T.Elem(), V.Elem(), cmpTags)

	case Struct:
		t := (*structType)(unsafe.Pointer(T))
		v := (*structType)(unsafe.Pointer(V))
		if len(t.fields) != len(v.fields) {
			return false
		}
		if t.pkgPath.name() != v.pkgPath.name() {
			return false",1654.0,22.0,46541.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
273,273,273,273,273,60352,"sysFree(unsafe.Pointer(p), pAligned-p, nil)","		// Success.
		return p2, size
	default:
		// Trim off the unaligned parts.
		pAligned := alignUp(p, align)
		sysFree(unsafe.Pointer(p), pAligned-p, nil)
		end := pAligned + size
		endLen := (p + size + align) - end
		if endLen > 0 {
			sysFree(unsafe.Pointer(end), endLen, nil)
		}",816.0,11.0,31636.0,unsafe.Pointer,call,malloc.go,1422.0,49481.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,ffi
274,274,274,274,274,60696,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrandom(buf []byte, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",838.0,10.0,20769.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
275,275,275,275,275,60702,s := (*slice)(unsafe.Pointer(&b)),"func stringHash(s string, seed uintptr) uintptr {
	return strhash(noescape(unsafe.Pointer(&s)), seed)
}

func bytesHash(b []byte, seed uintptr) uintptr {
	s := (*slice)(unsafe.Pointer(&b))
	return memhash(s.array, seed, uintptr(s.len))
}

func int32Hash(i uint32, seed uintptr) uintptr {
	return memhash32(noescape(unsafe.Pointer(&i)), seed)",317.0,16.0,8306.0,unsafe.Pointer,assignment,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,cast-header,types
276,276,276,276,276,61047,"r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))","	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2414.0,106.0,59651.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
277,277,277,277,277,61059,"msanread(unsafe.Pointer(&b[0]), uintptr(len(b)))","			uintptr(len(b)),
			getcallerpc(),
			funcPC(slicebytetostringtmp))
	}
	if msanenabled && len(b) > 0 {
		msanread(unsafe.Pointer(&b[0]), uintptr(len(b)))
	}
	return *(*string)(unsafe.Pointer(&b))
}

func stringtoslicebyte(buf *tmpBuf, s string) []byte {",150.0,12.0,3978.0,unsafe.Pointer,call,string.go,531.0,11797.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
278,278,278,278,278,61403,tt := (*funcType)(unsafe.Pointer(t)),"
func (t *rtype) Out(i int) Type {
	if t.Kind() != Func {
		panic(""reflect: Out of non-func type"")
	}
	tt := (*funcType)(unsafe.Pointer(t))
	return toType(tt.out()[i])
}

func (t *funcType) in() []*rtype {
	uadd := unsafe.Sizeof(*t)",620.0,20.0,15799.0,unsafe.Pointer,assignment,type.go,925.0,23990.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
279,279,279,279,279,61746,return &(*structTypeUncommon)(unsafe.Pointer(t)).u,"	if t.tflag&tflagUncommon == 0 {
		return nil
	}
	switch t.Kind() {
	case Struct:
		return &(*structTypeUncommon)(unsafe.Pointer(t)).u
	case Ptr:
		type u struct {
			ptrType
			u uncommonType
		}",428.0,33.0,12172.0,unsafe.Pointer,assignment,type.go,925.0,23990.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
280,280,280,280,280,62089,ftyp := (*funcType)(unsafe.Pointer(v.Type().(*rtype))),"	fl := v.flag & (flagRO | flagAddr | flagIndir)
	fl |= flag(v.typ.Kind())
	rcvr := Value{v.typ, v.ptr, fl}

	// v.Type returns the actual type of the method value.
	ftyp := (*funcType)(unsafe.Pointer(v.Type().(*rtype)))

	// Indirect Go func value (dummy) to obtain
	// actual code address. (A Go func value is a pointer
	// to a C function pointer. https://golang.org/s/go11func.)
	dummy := methodValueCall",106.0,22.0,3894.0,unsafe.Pointer,assignment,makefunc.go,138.0,5060.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
281,281,281,281,281,62432,func (f *fixalloc) free(p unsafe.Pointer) {,"	f.nchunk -= uint32(f.size)
	f.inuse += f.size
	return v
}

func (f *fixalloc) free(p unsafe.Pointer) {
	f.inuse -= f.size
	v := (*mlink)(p)
	v.next = f.list
	f.list = v
}",94.0,27.0,2701.0,unsafe.Pointer,parameter,mfixalloc.go,99.0,2787.0,runtime,std,std,kubernetes/kubernetes,cast-struct,layout
282,282,282,282,282,62778,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1222.0,10.0,28455.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
283,283,283,283,283,63121,"race.WriteRange(unsafe.Pointer(&p[0]), n)","
func Read(fd int, p []byte) (n int, err error) {
	n, err = read(fd, p)
	if race.Enabled {
		if n > 0 {
			race.WriteRange(unsafe.Pointer(&p[0]), n)
		}
		if err == nil {
			race.Acquire(unsafe.Pointer(&ioSync))
		}
	}",192.0,20.0,4291.0,unsafe.Pointer,call,syscall_unix.go,369.0,8502.0,syscall,std,std,kubernetes/kubernetes,delegate,ffi
284,284,284,284,284,63465,"func dumpotherroot(description string, to unsafe.Pointer) {","	dumpint(uint64(uintptr(obj)))
	dumpmemrange(obj, size)
	dumpfields(bv)
}

func dumpotherroot(description string, to unsafe.Pointer) {
	dumpint(tagOtherRoot)
	dumpstr(description)
	dumpint(uint64(uintptr(to)))
}
",209.0,43.0,4420.0,unsafe.Pointer,parameter,heapdump.go,725.0,17514.0,runtime,std,std,kubernetes/kubernetes,cast-basic,layout
285,285,285,285,285,63808,k = *((*unsafe.Pointer)(k)),"				}
				continue
			}
			k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))
			if t.indirectkey() {
				k = *((*unsafe.Pointer)(k))
			}
			if t.key.equal(key, k) {
				e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				if t.indirectelem() {
					e = *((*unsafe.Pointer)(e))",496.0,13.0,17493.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,types
286,286,286,286,286,64151,"func memequal16(p, q unsafe.Pointer) bool {","	return true
}
func memequal8(p, q unsafe.Pointer) bool {
	return *(*int8)(p) == *(*int8)(q)
}
func memequal16(p, q unsafe.Pointer) bool {
	return *(*int16)(p) == *(*int16)(q)
}
func memequal32(p, q unsafe.Pointer) bool {
	return *(*int32)(p) == *(*int32)(q)
}",242.0,22.0,6254.0,unsafe.Pointer,parameter,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,cast-basic,layout
287,287,287,287,287,64494,return &(*u)(unsafe.Pointer(t)).u,"	default:
		type u struct {
			_type
			u uncommontype
		}
		return &(*u)(unsafe.Pointer(t)).u
	}
}

func (t *_type) name() string {
	if t.tflag&tflagNamed == 0 {",116.0,16.0,2703.0,unsafe.Pointer,assignment,type.go,726.0,18709.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
288,288,288,288,288,64837,"func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {","	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
	_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",510.0,26.0,12620.0,unsafe.Pointer,parameter,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
289,289,289,289,289,64844,func (a *traceAlloc) alloc(n uintptr) unsafe.Pointer {,"
func (p traceAllocBlockPtr) ptr() *traceAllocBlock   { return (*traceAllocBlock)(unsafe.Pointer(p)) }
func (p *traceAllocBlockPtr) set(x *traceAllocBlock) { *p = traceAllocBlockPtr(unsafe.Pointer(x)) }

// alloc allocates n-byte block.
func (a *traceAlloc) alloc(n uintptr) unsafe.Pointer {
	n = alignUp(n, sys.PtrSize)
	if a.head == 0 || a.off+n > uintptr(len(a.head.ptr().data)) {
		if n > uintptr(len(a.head.ptr().data)) {
			throw(""trace: alloc too large"")
		}",924.0,39.0,30820.0,unsafe.Pointer,parameter,trace.go,1214.0,38634.0,runtime,std,std,kubernetes/kubernetes,memory-access,layout
290,290,290,290,290,65187,ts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0])),"		var ts cgothreadstart
		if _cgo_thread_start == nil {
			throw(""_cgo_thread_start missing"")
		}
		ts.g.set(mp.g0)
		ts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0]))
		ts.fn = unsafe.Pointer(funcPC(mstart))
		if msanenabled {
			msanwrite(unsafe.Pointer(&ts), unsafe.Sizeof(ts))
		}
		execLock.rlock() // Prevent process clone.",1742.0,22.0,51833.0,unsafe.Pointer,assignment,proc.go,5418.0,153166.0,runtime,std,std,kubernetes/kubernetes,cast-basic,ffi
291,291,291,291,291,65530,"func sigtramp(sig uint32, info *siginfo, ctx unsafe.Pointer)","//#ifdef GOARCH_386
//#define sa_handler k_sa_handler
//#endif

func sigreturn()
func sigtramp(sig uint32, info *siginfo, ctx unsafe.Pointer)
func cgoSigtramp()

//go:noescape
func sigaltstack(new, old *stackt)
",370.0,46.0,10040.0,unsafe.Pointer,parameter,os_linux.go,500.0,13478.0,runtime,std,std,kubernetes/kubernetes,definition,ffi
292,292,292,292,292,382,e = *((*unsafe.Pointer)(e)),"			// OR
			// key!=key, so the entry can't be deleted or updated, so we can just return it.
			// That's lucky for us because when key!=key we can't look it up successfully.
			it.key = k
			if t.indirectelem() {
				e = *((*unsafe.Pointer)(e))
			}
			it.elem = e
		} else {
			// The hash table has grown since the iterator was started.
			// The golden data for this key is now somewhere else.",941.0,13.0,30023.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,types
293,293,293,293,293,982,"*(*slice)(unsafe.Pointer(&b)) = slice{p, size, int(mem / 4)}","	p := mallocgc(mem, nil, false)
	if mem != uintptr(size)*4 {
		memclrNoHeapPointers(add(p, uintptr(size)*4), mem-uintptr(size)*4)
	}

	*(*slice)(unsafe.Pointer(&b)) = slice{p, size, int(mem / 4)}
	return
}

// used by cmd/cgo
func gobytes(p *byte, n int) (b []byte) {",292.0,12.0,7043.0,unsafe.Pointer,assignment,string.go,531.0,11797.0,runtime,std,std,kubernetes/kubernetes,cast-bytes,types
294,294,294,294,294,3694,"_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatfs(fd int, buf *Statfs_t) (err error) {
	_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1846.0,56.0,45115.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
295,295,295,295,295,13,"func memhash32(p unsafe.Pointer, h uintptr) uintptr","// hash implementation.
var useAeshash bool

// in asm_*.s
func memhash(p unsafe.Pointer, h, s uintptr) uintptr
func memhash32(p unsafe.Pointer, h uintptr) uintptr
func memhash64(p unsafe.Pointer, h uintptr) uintptr
func strhash(p unsafe.Pointer, h uintptr) uintptr

func strhashFallback(a unsafe.Pointer, h uintptr) uintptr {
	x := (*stringStruct)(a)",67.0,18.0,1396.0,unsafe.Pointer,parameter,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,definition,types
296,296,296,296,296,2567,_p0 = unsafe.Pointer(&b[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {",1786.0,9.0,43560.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
297,297,297,297,297,1050,fi := (*funcinl)(unsafe.Pointer(fn)),"	if f == nil {
		return """"
	}
	fn := f.raw()
	if fn.entry == 0 { // inlined version
		fi := (*funcinl)(unsafe.Pointer(fn))
		return fi.name
	}
	return funcname(f.funcInfo())
}
",582.0,20.0,18315.0,unsafe.Pointer,assignment,symtab.go,968.0,28996.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
298,298,298,298,298,3844,msg.Name = (*byte)(unsafe.Pointer(&rsa)),"//sys keyctlRestrictKeyring(cmd int, arg2 int) (err error) = SYS_KEYCTL

func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error) {
	var msg Msghdr
	var rsa RawSockaddrAny
	msg.Name = (*byte)(unsafe.Pointer(&rsa))
	msg.Namelen = uint32(SizeofSockaddrAny)
	var iov Iovec
	if len(p) > 0 {
		iov.Base = &p[0]
		iov.SetLen(len(p))",1323.0,21.0,39631.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200523222454-059865788121,xo/usql,cast-basic,serialization
299,299,299,299,299,644,h.spanalloc.free(unsafe.Pointer(s)),"		pp.mspancache.len++
		return
	}
	// Failing that (or if we don't have a p), just free it to
	// the heap.
	h.spanalloc.free(unsafe.Pointer(s))
}

// allocSpan allocates an mspan which owns npages worth of memory.
//
// If manual == false, allocSpan allocates a heap span of class spanclass",1055.0,19.0,36204.0,unsafe.Pointer,call,mheap.go,1950.0,62971.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
300,300,300,300,300,5140,_p2 = unsafe.Pointer(&data[0]),"	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {",1371.0,9.0,33496.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2387.0,58778.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,syscall,no-gc
301,301,301,301,301,3658,_p2 = unsafe.Pointer(&_zero),"	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}",1423.0,9.0,34849.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
302,302,302,302,302,555,n := (*ptrtype)(unsafe.Pointer(t)).elem.size,"		}

		// bss
		if datap.bss <= uintptr(p) && uintptr(p) < datap.ebss {
			bitmap := datap.gcbssmask.bytedata
			n := (*ptrtype)(unsafe.Pointer(t)).elem.size
			mask = make([]byte, n/sys.PtrSize)
			for i := uintptr(0); i < n; i += sys.PtrSize {
				off := (uintptr(p) + i - datap.bss) / sys.PtrSize
				mask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1
			}",2029.0,20.0,67637.0,unsafe.Pointer,assignment,mbitmap.go,2083.0,69152.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
303,303,303,303,303,5058,"r0, _, e1 := Syscall6(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(payload)), uintptr(ringid), 0)","	if len(payload) > 0 {
		_p2 = unsafe.Pointer(&payload[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(payload)), uintptr(ringid), 0)
	id = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",390.0,45.0,9923.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2387.0,58778.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,syscall,no-gc
304,304,304,304,304,2797,"r0, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(arg2)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",244.0,57.0,6310.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
305,305,305,305,305,3538,"_, _, e1 := Syscall6(SYS_FANOTIFY_MARK, uintptr(fd), uintptr(flags), uintptr(mask), uintptr(dirFd), uintptr(unsafe.Pointer(pathname)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func fanotifyMark(fd int, flags uint, mask uint64, dirFd int, pathname *byte) (err error) {
	_, _, e1 := Syscall6(SYS_FANOTIFY_MARK, uintptr(fd), uintptr(flags), uintptr(mask), uintptr(dirFd), uintptr(unsafe.Pointer(pathname)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",29.0,110.0,793.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
306,306,306,306,306,2220,"r0, _, e1 := Syscall(SYS_RECVMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func recvmsg(s int, msg *Msghdr, flags int) (n int, err error) {
	r0, _, e1 := Syscall(SYS_RECVMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2318.0,56.0,57219.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2437.0,60263.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190813064441-fde4db37ae7a,kubernetes/kubernetes,syscall,no-gc
307,307,307,307,307,206,dumpint(uint64(uintptr(unsafe.Pointer(gp.m)))),"	dumpbool(isSystemGoroutine(gp, false))
	dumpbool(false) // isbackground
	dumpint(uint64(gp.waitsince))
	dumpstr(gp.waitreason.String())
	dumpint(uint64(uintptr(gp.sched.ctxt)))
	dumpint(uint64(uintptr(unsafe.Pointer(gp.m))))
	dumpint(uint64(uintptr(unsafe.Pointer(gp._defer))))
	dumpint(uint64(uintptr(unsafe.Pointer(gp._panic))))

	// dump stack
	var child childInfo",354.0,25.0,8556.0,unsafe.Pointer,call,heapdump.go,725.0,17514.0,runtime,std,std,kubernetes/kubernetes,cast-basic,layout
308,308,308,308,308,2876,"_, _, e1 := Syscall(SYS_MKDIRAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_MKDIRAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1135.0,59.0,27677.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
309,309,309,309,309,1484,k = unsafe.Pointer(&key.ptr),"
	var k unsafe.Pointer
	if key.flag&flagIndir != 0 {
		k = key.ptr
	} else {
		k = unsafe.Pointer(&key.ptr)
	}
	e := mapaccess(v.typ, v.pointer(), k)
	if e == nil {
		return Value{}
	}",1164.0,7.0,35966.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,delegate,types
310,310,310,310,310,3428,"func (sa *SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error) {","	Pid    uint32
	Groups uint32
	raw    RawSockaddrNetlink
}

func (sa *SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_NETLINK
	sa.raw.Pad = sa.Pad
	sa.raw.Pid = sa.Pid
	sa.raw.Groups = sa.Groups
	return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil",464.0,40.0,12051.0,unsafe.Pointer,parameter,syscall_linux.go,1973.0,58748.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,cast-pointer,serialization
311,311,311,311,311,2414,_p0 = unsafe.Pointer(&buf[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getcwd(buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETCWD, uintptr(_p0), uintptr(len(buf)), 0)
	n = int(r0)",172.0,9.0,4236.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
312,312,312,312,312,140,gp.param = unsafe.Pointer(sg),"		sendDirect(c.elemtype, sg, ep)
		sg.elem = nil
	}
	gp := sg.g
	unlockf()
	gp.param = unsafe.Pointer(sg)
	if sg.releasetime != 0 {
		sg.releasetime = cputicks()
	}
	goready(gp, skip+1)
}",296.0,13.0,8449.0,unsafe.Pointer,assignment,chan.go,772.0,20178.0,runtime,std,std,kubernetes/kubernetes,cast-pointer,types
313,313,313,313,313,2479,_p0 = unsafe.Pointer(&buf[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Klogctl(typ int, buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(_p0), uintptr(len(buf)))
	n = int(r0)",959.0,9.0,23407.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
314,314,314,314,314,2994,"_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pipe2(p *[2]_C_int, flags int) (err error) {
	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2529.0,44.0,62623.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
315,315,315,315,315,4537,"func (sa *SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error) {","		sa.raw.Addr[i] = sa.Addr[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrInet4, nil
}

func (sa *SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET6
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))",389.0,38.0,10218.0,unsafe.Pointer,parameter,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,cast-pointer,serialization
316,316,316,316,316,649,"func addfinalizer(p unsafe.Pointer, f *funcval, nret uintptr, fint *_type, ot *ptrtype) bool {","	fint    *_type   // May be a heap pointer, but always live.
	ot      *ptrtype // May be a heap pointer, but always live.
}

// Adds a finalizer to the object p. Returns true if it succeeded.
func addfinalizer(p unsafe.Pointer, f *funcval, nret uintptr, fint *_type, ot *ptrtype) bool {
	lock(&mheap_.speciallock)
	s := (*specialfinalizer)(mheap_.specialfinalizeralloc.alloc())
	unlock(&mheap_.speciallock)
	s.special.kind = _KindSpecialFinalizer
	s.fn = f",1684.0,21.0,54246.0,unsafe.Pointer,parameter,mheap.go,1950.0,62971.0,runtime,std,std,kubernetes/kubernetes,delegate,types
317,317,317,317,317,920,"func sigfwdgo(sig uint32, info *siginfo, ctx unsafe.Pointer) bool {","// signal to the handler that was installed before Go's. Returns whether the
// signal was forwarded.
// This is called by the signal handler, and the world may be stopped.
//go:nosplit
//go:nowritebarrierrec
func sigfwdgo(sig uint32, info *siginfo, ctx unsafe.Pointer) bool {
	if sig >= uint32(len(sigtable)) {
		return false
	}
	fwdFn := atomic.Loaduintptr(&fwdSig[sig])
	flags := sigtable[sig].flags",926.0,46.0,28311.0,unsafe.Pointer,parameter,signal_unix.go,1182.0,36808.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
318,318,318,318,318,2054,_p0 = unsafe.Pointer(&buf[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func keyctlDH(cmd int, arg2 *KeyctlDHParams, buf []byte) (ret int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(arg2)), uintptr(_p0), uintptr(len(buf)), 0, 0)
	ret = int(r0)",294.0,9.0,7559.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2437.0,60263.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190813064441-fde4db37ae7a,kubernetes/kubernetes,syscall,no-gc
319,319,319,319,319,2338,"return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))","}

// SetsockoptSockFprog attaches a classic BPF or an extended BPF program to a
// socket to filter incoming packets.  See 'man 7 socket' for usage information.
func SetsockoptSockFprog(fd, level, opt int, fprog *SockFprog) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
}

func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {",1166.0,36.0,32805.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,delegate,ffi
320,320,320,320,320,4412,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func write(fd int, p []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1518.0,10.0,36992.0,unsafe.Pointer,variable,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
321,321,321,321,321,2889,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setdomainname(p []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1315.0,10.0,32450.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
322,322,322,322,322,3588,_p1 = unsafe.Pointer(&_zero),"	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_FGETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), 0, 0)
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",693.0,9.0,17438.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
323,323,323,323,323,2239,Data unsafe.Pointer,"}

// String is the runtime representation of a string.
// It cannot be used safely or portably and its representation may change in a later release.
type String struct {
	Data unsafe.Pointer
	Len  int
}",28.0,7.0,886.0,unsafe.Pointer,variable,unsafeheader.go,30.0,913.0,golang.org/x/sys/internal/unsafeheader,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,definition,reflect
324,324,324,324,324,249,methods := (*[1 << 16]unsafe.Pointer)(unsafe.Pointer(&m.fun[0]))[:ni:ni],"	// the loop is O(ni+nt) not O(ni*nt).
	ni := len(inter.mhdr)
	nt := int(x.mcount)
	xmhdr := (*[1 << 16]method)(add(unsafe.Pointer(x), uintptr(x.moff)))[:nt:nt]
	j := 0
	methods := (*[1 << 16]unsafe.Pointer)(unsafe.Pointer(&m.fun[0]))[:ni:ni]
	var fun0 unsafe.Pointer
imethods:
	for k := 0; k < ni; k++ {
		i := &inter.mhdr[k]
		itype := inter.typ.typeOff(i.ityp)",204.0,24.0,6687.0,unsafe.Pointer,assignment,iface.go,558.0,16159.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
325,325,325,325,325,2867,_p1 = unsafe.Pointer(&dest[0]),"	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_LLISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))
	sz = int(r0)",1053.0,9.0,25754.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
326,326,326,326,326,2989,"r0, _, e1 := Syscall(SYS_SENDMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendmsg(s int, msg *Msghdr, flags int) (n int, err error) {
	r0, _, e1 := Syscall(SYS_SENDMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2452.0,56.0,60695.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
327,327,327,327,327,4290,_p1 = unsafe.Pointer(&buf[0]),"	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_READLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)), 0, 0)
	n = int(r0)",105.0,9.0,2578.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
328,328,328,328,328,4841,_p0 = unsafe.Pointer(&events[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(events) > 0 {
		_p0 = unsafe.Pointer(&events[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(_p0), uintptr(len(events)), uintptr(msec), 0, 0)
	n = int(r0)",72.0,9.0,1835.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,syscall,no-gc
329,329,329,329,329,2942,_p0 = unsafe.Pointer(&b[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {",1789.0,9.0,43696.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
330,330,330,330,330,5028,"r0, _, e1 := Syscall6(SYS_PPOLL, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)), 0, 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ppoll(fds *PollFd, nfds int, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {
	r0, _, e1 := Syscall6(SYS_PPOLL, uintptr(unsafe.Pointer(fds)), uintptr(nfds), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)), 0, 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",100.0,43.0,2611.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2387.0,58778.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,syscall,no-gc
331,331,331,331,331,4976,"return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))","func SetsockoptTpacketReq(fd, level, opt int, tp *TpacketReq) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

func SetsockoptTpacketReq3(fd, level, opt int, tp *TpacketReq3) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

// Keyctl Commands (http://man7.org/linux/man-pages/man2/keyctl.2.html)

// KeyctlInt calls keyctl commands in which each argument is an int.",1048.0,36.0,29705.0,unsafe.Pointer,assignment,syscall_linux.go,1771.0,51627.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,delegate,ffi
332,332,332,332,332,4849,_p0 = unsafe.Pointer(&p[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pread(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)",262.0,9.0,6274.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,syscall,no-gc
333,333,333,333,333,1789,_p0 = unsafe.Pointer(&_zero),"func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",1576.0,9.0,38008.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
334,334,334,334,334,4089,"_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)","	var _p1 *byte
	_p1, err = BytePtrFromString(newpath)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",304.0,64.0,7300.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200523222454-059865788121,xo/usql,syscall,no-gc
335,335,335,335,335,4871,"_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
	_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",583.0,63.0,14785.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,syscall,no-gc
336,336,336,336,336,4353,_p2 = unsafe.Pointer(&dest[0]),"	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(dest) > 0 {
		_p2 = unsafe.Pointer(&dest[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)
	sz = int(r0)",873.0,9.0,21280.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
337,337,337,337,337,4893,"func raceReadRange(addr unsafe.Pointer, len int) {","}

func raceReleaseMerge(addr unsafe.Pointer) {
}

func raceReadRange(addr unsafe.Pointer, len int) {
}

func raceWriteRange(addr unsafe.Pointer, len int) {
}",21.0,25.0,425.0,unsafe.Pointer,parameter,race0.go,25.0,509.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,unused,unused
338,338,338,338,338,1844,"_cgo_runtime_cgocall(_cgo_bbce630bddcc_Cfunc_realloc, uintptr(unsafe.Pointer(&p0)))","var __cgofn__cgo_bbce630bddcc_Cfunc_realloc byte
var _cgo_bbce630bddcc_Cfunc_realloc = unsafe.Pointer(&__cgofn__cgo_bbce630bddcc_Cfunc_realloc)

//go:cgo_unsafe_args
func _Cfunc_realloc(p0 unsafe.Pointer, p1 _Ctype_size_t) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_bbce630bddcc_Cfunc_realloc, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return",190.0,64.0,6206.0,unsafe.Pointer,call,/root/.cache/go-build/af/af4e8fe9a1657f92b2dbd18484882f9832d65a39fee1da32acc4679864222361-d,0.0,0.0,os/user,std,std,kubernetes/kubernetes,delegate,ffi
339,339,339,339,339,3404,return unsafe.Pointer(uintptr(unsafe.Pointer(h)) + uintptr(cmsgAlignOf(SizeofCmsghdr)) + offset),"func CmsgSpace(datalen int) int {
	return cmsgAlignOf(SizeofCmsghdr) + cmsgAlignOf(datalen)
}

func (h *Cmsghdr) data(offset uintptr) unsafe.Pointer {
	return unsafe.Pointer(uintptr(unsafe.Pointer(h)) + uintptr(cmsgAlignOf(SizeofCmsghdr)) + offset)
}

// SocketControlMessage represents a socket control message.
type SocketControlMessage struct {
	Header Cmsghdr",28.0,9.0,775.0,unsafe.Pointer,assignment,sockcmsg_unix.go,92.0,2616.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,pointer-arithmetic,serialization
340,340,340,340,340,4193,"return unsafe.Pointer(&sa.raw), SizeofSockaddrL2TPIP6, nil","	sa.raw.Conn_id = sa.ConnId
	sa.raw.Scope_id = sa.ZoneId
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Addr[i] = sa.Addr[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrL2TPIP6, nil
}

func anyToSockaddr(fd int, rsa *RawSockaddrAny) (Sockaddr, error) {
	switch rsa.Addr.Family {
	case AF_NETLINK:",873.0,9.0,25170.0,unsafe.Pointer,assignment,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-pointer,serialization
341,341,341,341,341,4161,"return unsafe.Pointer(&sa.raw), SizeofSockaddrLinklayer, nil","	sa.raw.Pkttype = sa.Pkttype
	sa.raw.Halen = sa.Halen
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Addr[i] = sa.Addr[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrLinklayer, nil
}

// SockaddrNetlink implements the Sockaddr interface for AF_NETLINK type sockets.
type SockaddrNetlink struct {
	Family uint16",452.0,9.0,11753.0,unsafe.Pointer,assignment,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-pointer,serialization
342,342,342,342,342,2204,"r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getgroups(n int, list *_Gid_t) (nn int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
	nn = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2203.0,61.0,53848.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2437.0,60263.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190813064441-fde4db37ae7a,kubernetes/kubernetes,syscall,no-gc
343,343,343,343,343,4974,p = unsafe.Pointer(&filter[0]),"}

func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {
		p = unsafe.Pointer(&filter[0])
	}
	return setsockopt(fd, level, opt, p, uintptr(len(filter)*SizeofCanFilter))
}

func SetsockoptTpacketReq(fd, level, opt int, tp *TpacketReq) error {",1038.0,7.0,29341.0,unsafe.Pointer,assignment,syscall_linux.go,1771.0,51627.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,delegate,ffi
344,344,344,344,344,35,"func memequal32(p, q unsafe.Pointer) bool {","	return *(*int8)(p) == *(*int8)(q)
}
func memequal16(p, q unsafe.Pointer) bool {
	return *(*int16)(p) == *(*int16)(q)
}
func memequal32(p, q unsafe.Pointer) bool {
	return *(*int32)(p) == *(*int32)(q)
}
func memequal64(p, q unsafe.Pointer) bool {
	return *(*int64)(p) == *(*int64)(q)
}",245.0,22.0,6337.0,unsafe.Pointer,parameter,alg.go,389.0,10428.0,runtime,std,std,kubernetes/kubernetes,cast-basic,layout
345,345,345,345,345,3583,"_, _, e1 := Syscall(SYS_DELETE_MODULE, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)","	var _p0 *byte
	_p0, err = BytePtrFromString(name)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_DELETE_MODULE, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",548.0,49.0,14007.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
346,346,346,346,346,1390,"func add(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer {","// The whySafe string is ignored, so that the function still inlines
// as efficiently as p+x, but all call sites should use the string to
// record why the addition is safe, which is to say why the addition
// does not cause x to advance to the very end of p's allocation
// and therefore point incorrectly at the next block in memory.
func add(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer {
	return unsafe.Pointer(uintptr(p) + x)
}

func (d ChanDir) String() string {
	switch d {",1033.0,12.0,28739.0,unsafe.Pointer,parameter,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,pointer-arithmetic,layout
347,347,347,347,347,84,sp := uintptr(unsafe.Pointer(&sig)),"
		var g *g
		if mainStarted {
			g = getg()
		}
		sp := uintptr(unsafe.Pointer(&sig))
		switch {
		case g == nil:
			// No g: we're on a C stack or a signal stack.
			ret = callCgoSigaction(uintptr(sig), new, old)
		case sp < g.stack.lo || sp >= g.stack.hi:",46.0,17.0,1508.0,unsafe.Pointer,assignment,cgo_sigaction.go,87.0,3164.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,ffi
348,348,348,348,348,5195,"r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getgroups(n int, list *_Gid_t) (nn int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
	nn = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2153.0,61.0,52363.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2387.0,58778.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,syscall,no-gc
349,349,349,349,349,3944,"_, _, e1 := Syscall(SYS_CLOCK_GETTIME, uintptr(clockid), uintptr(unsafe.Pointer(time)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockGettime(clockid int32, time *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_CLOCK_GETTIME, uintptr(clockid), uintptr(unsafe.Pointer(time)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",489.0,67.0,12255.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200523222454-059865788121,xo/usql,syscall,no-gc
350,350,350,350,350,1209,return &(*u)(unsafe.Pointer(t)).u,"	default:
		type u struct {
			rtype
			u uncommonType
		}
		return &(*u)(unsafe.Pointer(t)).u
	}
}

func (t *rtype) String() string {
	s := t.nameOff(t.str).name()",476.0,16.0,12977.0,unsafe.Pointer,assignment,type.go,925.0,23990.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
351,351,351,351,351,1219,tt := (*arrayType)(unsafe.Pointer(t)),"
func (t *rtype) Len() int {
	if t.Kind() != Array {
		panic(""reflect: Len of non-array type"")
	}
	tt := (*arrayType)(unsafe.Pointer(t))
	return int(tt.len)
}

func (t *rtype) NumField() int {
	if t.Kind() != Struct {",588.0,21.0,15134.0,unsafe.Pointer,assignment,type.go,925.0,23990.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
352,352,352,352,352,1829,var _cgo_bbce630bddcc_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_bbce630bddcc_Cfunc_free),"	return _cgo_cmalloc(uint64(n))
}
//go:cgo_import_static _cgo_bbce630bddcc_Cfunc_free
//go:linkname __cgofn__cgo_bbce630bddcc_Cfunc_free _cgo_bbce630bddcc_Cfunc_free
var __cgofn__cgo_bbce630bddcc_Cfunc_free byte
var _cgo_bbce630bddcc_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_bbce630bddcc_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_bbce630bddcc_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {",89.0,36.0,2101.0,unsafe.Pointer,variable,/root/.cache/go-build/af/af4e8fe9a1657f92b2dbd18484882f9832d65a39fee1da32acc4679864222361-d,0.0,0.0,os/user,std,std,kubernetes/kubernetes,cast-pointer,ffi
353,353,353,353,353,794,_g_.stack.lo = uintptr(noescape(unsafe.Pointer(&x))) - 32*1024,"	// scheduling stack is, but we assume there's at least 32 kB,
	// which is more than enough for us.
	setg(mp.g0)
	_g_ := getg()
	_g_.stack.hi = uintptr(noescape(unsafe.Pointer(&x))) + 1024
	_g_.stack.lo = uintptr(noescape(unsafe.Pointer(&x))) - 32*1024
	_g_.stackguard0 = _g_.stack.lo + _StackGuard

	// Initialize this thread to use the m.
	asminit()
	minit()",1489.0,34.0,43977.0,unsafe.Pointer,assignment,proc.go,5418.0,153166.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,hide-escape
354,354,354,354,354,3697,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pread(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1974.0,10.0,47912.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,2467.0,61019.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,syscall,no-gc
355,355,355,355,355,1520,typ = (*sliceType)(unsafe.Pointer(v.typ)),"		cap = int(tt.len)
		typ = (*sliceType)(unsafe.Pointer(tt.slice))
		base = v.ptr

	case Slice:
		typ = (*sliceType)(unsafe.Pointer(v.typ))
		s := (*sliceHeader)(v.ptr)
		base = s.Data
		cap = s.Cap
	}
",1800.0,22.0,53744.0,unsafe.Pointer,assignment,value.go,2788.0,81958.0,reflect,std,std,kubernetes/kubernetes,cast-header,types
356,356,356,356,356,2649,"return utimensat(dirfd, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), flags)","		return utimensat(dirfd, path, nil, flags)
	}
	if len(ts) != 2 {
		return EINVAL
	}
	return utimensat(dirfd, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), flags)
}

func Futimesat(dirfd int, path string, tv []Timeval) error {
	if tv == nil {
		return futimesat(dirfd, path, nil)",225.0,47.0,6473.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,cast-struct,efficiency
357,357,357,357,357,645,"sysUsed(unsafe.Pointer(base), nbytes)","
	// Commit and account for any scavenged memory that the span now owns.
	if scav != 0 {
		// sysUsed all the pages that are actually available
		// in the span since some of them might be scavenged.
		sysUsed(unsafe.Pointer(base), nbytes)
		mSysStatDec(&memstats.heap_released, scav)
	}
	// Update stats.
	mSysStatInc(sysStat, nbytes)
	mSysStatDec(&memstats.heap_idle, nbytes)",1229.0,11.0,41658.0,unsafe.Pointer,call,mheap.go,1950.0,62971.0,runtime,std,std,kubernetes/kubernetes,delegate,ffi
358,358,358,358,358,2122,_p2 = unsafe.Pointer(&data[0]),"	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {",1081.0,9.0,26288.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2437.0,60263.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190813064441-fde4db37ae7a,kubernetes/kubernetes,syscall,no-gc
359,359,359,359,359,2407,_p1 = unsafe.Pointer(&buf[0]),"	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_READLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)), 0, 0)
	n = int(r0)",105.0,9.0,2578.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
360,360,360,360,360,4414,_p0 = unsafe.Pointer(&_zero),"func write(fd int, p []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",1522.0,9.0,37072.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
361,361,361,361,361,4111,"r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))","	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",609.0,106.0,15593.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200523222454-059865788121,xo/usql,syscall,no-gc
362,362,362,362,362,1392,styp := (*structType)(unsafe.Pointer(ntyp)),"				// but only if we haven't seen a match yet at this level and only
				// if the embedded types haven't already been queued.
				if ok || ntyp == nil || ntyp.Kind() != Struct {
					continue
				}
				styp := (*structType)(unsafe.Pointer(ntyp))
				if nextCount[styp] > 0 {
					nextCount[styp] = 2 // exact multiple doesn't matter
					continue
				}
				if nextCount == nil {",1316.0,27.0,37660.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
363,363,363,363,363,528,nbitp := uintptr(unsafe.Pointer(h.bitp)) + n/4,"// Note that forward does not modify h. The caller must record the result.
// bits returns the heap bits for the current word.
//go:nosplit
func (h heapBits) forward(n uintptr) heapBits {
	n += uintptr(h.shift) / heapBitsShift
	nbitp := uintptr(unsafe.Pointer(h.bitp)) + n/4
	h.shift = uint32(n%4) * heapBitsShift
	if nbitp <= uintptr(unsafe.Pointer(h.last)) {
		h.bitp = (*uint8)(unsafe.Pointer(nbitp))
		return h
	}",495.0,19.0,17667.0,unsafe.Pointer,assignment,mbitmap.go,2083.0,69152.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,layout
364,364,364,364,364,3533,"return setsockopt(fd, level, opt, unsafe.Pointer(&value), 8)","func SetsockoptTimeval(fd, level, opt int, tv *Timeval) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(tv), unsafe.Sizeof(*tv))
}

func SetsockoptUint64(fd, level, opt int, value uint64) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(&value), 8)
}

func Socket(domain, typ, proto int) (fd int, err error) {
	if domain == AF_INET6 && SocketDisableIPv6 {
		return -1, EAFNOSUPPORT",366.0,36.0,9082.0,unsafe.Pointer,assignment,syscall_unix.go,431.0,10980.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,delegate,ffi
365,365,365,365,365,5201,"_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
	_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2215.0,63.0,54168.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2387.0,58778.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,syscall,no-gc
366,366,366,366,366,4385,"r0, _, e1 := Syscall6(SYS_PERF_EVENT_OPEN, uintptr(unsafe.Pointer(attr)), uintptr(pid), uintptr(cpu), uintptr(groupFd), uintptr(flags), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func PerfEventOpen(attr *PerfEventAttr, pid int, cpu int, groupFd int, flags int) (fd int, err error) {
	r0, _, e1 := Syscall6(SYS_PERF_EVENT_OPEN, uintptr(unsafe.Pointer(attr)), uintptr(pid), uintptr(cpu), uintptr(groupFd), uintptr(flags), 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",1147.0,53.0,27898.0,unsafe.Pointer,assignment,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
367,367,367,367,367,4658,"return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)","func SetsockoptIPv6Mreq(fd, level, opt int, mreq *IPv6Mreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)
}

func SetsockoptICMPv6Filter(fd, level, opt int, filter *ICMPv6Filter) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)
}

func SetsockoptLinger(fd, level, opt int, l *Linger) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
}",345.0,36.0,8496.0,unsafe.Pointer,assignment,syscall_unix.go,430.0,11034.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,delegate,ffi
368,368,368,368,368,2367,fh := (*fileHandle)(unsafe.Pointer(&buf[0])),"	// only be 32 bytes.
	size := uint32(32 + unsafe.Sizeof(fileHandle{}))
	didResize := false
	for {
		buf := make([]byte, size)
		fh := (*fileHandle)(unsafe.Pointer(&buf[0]))
		fh.Bytes = size - uint32(unsafe.Sizeof(fileHandle{}))
		err = nameToHandleAt(dirfd, path, fh, &mid, flags)
		if err == EOVERFLOW {
			if didResize {
				// We shouldn't need to resize more than once",2063.0,23.0,62888.0,unsafe.Pointer,assignment,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,cast-bytes,serialization
369,369,369,369,369,2482,_p2 = unsafe.Pointer(&dest[0]),"	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(dest) > 0 {
		_p2 = unsafe.Pointer(&dest[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_LGETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)
	sz = int(r0)",986.0,9.0,23972.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
370,370,370,370,370,1402,v := (*interfaceType)(unsafe.Pointer(V)),"		}
		return true

	case Interface:
		t := (*interfaceType)(unsafe.Pointer(T))
		v := (*interfaceType)(unsafe.Pointer(V))
		if len(t.methods) == 0 && len(v.methods) == 0 {
			return true
		}
		// Might have the same methods but still
		// need a run time conversion.",1638.0,25.0,46095.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-struct,types
371,371,371,371,371,1312,race.ReleaseMerge(unsafe.Pointer(&rw.writerSem)),"// It is a run-time error if rw is not locked for reading
// on entry to RUnlock.
func (rw *RWMutex) RUnlock() {
	if race.Enabled {
		_ = rw.w.state
		race.ReleaseMerge(unsafe.Pointer(&rw.writerSem))
		race.Disable()
	}
	if r := atomic.AddInt32(&rw.readerCount, -1); r < 0 {
		// Outlined slow-path to allow the fast-path to be inlined
		rw.rUnlockSlow(r)",65.0,21.0,2127.0,unsafe.Pointer,call,rwmutex.go,151.0,4522.0,sync,std,std,kubernetes/kubernetes,delegate,ffi
372,372,372,372,372,2556,_p0 = unsafe.Pointer(&_zero),"func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(advice))
	if e1 != 0 {
		err = errnoErr(e1)
	}",1714.0,9.0,41995.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
373,373,373,373,373,2881,"_, _, e1 := RawSyscall6(SYS_PRLIMIT64, uintptr(pid), uintptr(resource), uintptr(unsafe.Pointer(newlimit)), uintptr(unsafe.Pointer(old)), 0, 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prlimit(pid int, resource int, newlimit *Rlimit, old *Rlimit) (err error) {
	_, _, e1 := RawSyscall6(SYS_PRLIMIT64, uintptr(pid), uintptr(resource), uintptr(unsafe.Pointer(newlimit)), uintptr(unsafe.Pointer(old)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",1201.0,82.0,29473.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
374,374,374,374,374,1302,"typ, val unsafe.Pointer","	// atomically by the producer.
	vals []eface
}

type eface struct {
	typ, val unsafe.Pointer
}

const dequeueBits = 32

// dequeueLimit is the maximum size of a poolDequeue.",48.0,11.0,1615.0,unsafe.Pointer,variable,poolqueue.go,309.0,9085.0,sync,std,std,kubernetes/kubernetes,definition,types
375,375,375,375,375,3247,_p2 = unsafe.Pointer(&_zero),"	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}",1102.0,9.0,26823.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
376,376,376,376,376,4544,"func (sa *SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error) {","	Pid    uint32
	Groups uint32
	raw    RawSockaddrNetlink
}

func (sa *SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_NETLINK
	sa.raw.Pad = sa.Pad
	sa.raw.Pid = sa.Pid
	sa.raw.Groups = sa.Groups
	return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil",464.0,40.0,12051.0,unsafe.Pointer,parameter,syscall_linux.go,2202.0,65304.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,cast-pointer,serialization
377,377,377,377,377,3338,"r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error) {
	r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))
	n = int64(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return",2221.0,58.0,54219.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
378,378,378,378,378,930,var v unsafe.Pointer,"	}

	// Small stacks are allocated with a fixed-size free-list allocator.
	// If we need a stack of a bigger size, we fall back on allocating
	// a dedicated span.
	var v unsafe.Pointer
	if n < _FixedStack<<_NumStackOrders && n < _StackCacheSize {
		order := uint8(0)
		n2 := n
		for n2 > _FixedStack {
			order++",351.0,8.0,10600.0,unsafe.Pointer,variable,stack.go,1317.0,40023.0,runtime,std,std,kubernetes/kubernetes,memory-access,layout
379,379,379,379,379,392,*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e),"					*(*unsafe.Pointer)(dst.k) = k2 // copy pointer
				} else {
					typedmemmove(t.key, dst.k, k) // copy elem
				}
				if t.indirectelem() {
					*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)
				} else {
					typedmemmove(t.elem, dst.e, e)
				}
				dst.i++
				// These updates might push these pointers past the end of the",1213.0,9.0,38485.0,unsafe.Pointer,assignment,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,memory-access,types
380,380,380,380,380,1240,e := (*emptyInterface)(unsafe.Pointer(&i)),"
// packEface converts v to the empty interface.
func packEface(v Value) interface{} {
	t := v.typ
	var i interface{}
	e := (*emptyInterface)(unsafe.Pointer(&i))
	// First, fill in the data portion of the interface.
	switch {
	case ifaceIndir(t):
		if v.flag&flagIndir == 0 {
			panic(""bad indir"")",105.0,25.0,3515.0,unsafe.Pointer,assignment,value.go,486.0,14113.0,internal/reflectlite,std,std,kubernetes/kubernetes,cast-struct,types
381,381,381,381,381,4966,"err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)","// GetsockoptString returns the string value of the socket option opt for the
// socket associated with fd at the given socket level.
func GetsockoptString(fd, level, opt int) (string, error) {
	buf := make([]byte, 256)
	vallen := _Socklen(len(buf))
	err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)
	if err != nil {
		if err == ERANGE {
			buf = make([]byte, vallen)
			err = getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)
		}",994.0,36.0,27871.0,unsafe.Pointer,assignment,syscall_linux.go,1771.0,51627.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190412213103-97732733099d,gorgonia/gorgonia,delegate,ffi
382,382,382,382,382,4817,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pwritev2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",1683.0,10.0,41244.0,unsafe.Pointer,variable,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,syscall,no-gc
383,383,383,383,383,360,var elem unsafe.Pointer,"	b := (*bmap)(unsafe.Pointer(uintptr(h.buckets) + bucket*uintptr(t.bucketsize)))
	top := tophash(hash)

	var inserti *uint8
	var insertk unsafe.Pointer
	var elem unsafe.Pointer
bucketloop:
	for {
		for i := uintptr(0); i < bucketCnt; i++ {
			if b.tophash[i] != top {
				if isEmpty(b.tophash[i]) && inserti == nil {",607.0,11.0,20404.0,unsafe.Pointer,variable,map.go,1375.0,43146.0,runtime,std,std,kubernetes/kubernetes,pointer-arithmetic,types
384,384,384,384,384,2188,_p0 = unsafe.Pointer(&p[0]),"// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pread(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)",1946.0,9.0,47196.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2437.0,60263.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190813064441-fde4db37ae7a,kubernetes/kubernetes,syscall,no-gc
385,385,385,385,385,4356,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func InitModule(moduleImage []byte, params string) (err error) {
	var _p0 unsafe.Pointer
	if len(moduleImage) > 0 {
		_p0 = unsafe.Pointer(&moduleImage[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",888.0,10.0,21689.0,unsafe.Pointer,variable,zsyscall_linux.go,1825.0,44421.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,syscall,no-gc
386,386,386,386,386,2062,_p2 = unsafe.Pointer(&_zero),"	}
	var _p2 unsafe.Pointer
	if len(payload) > 0 {
		_p2 = unsafe.Pointer(&payload[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(payload)), uintptr(ringid), 0)
	id = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)",388.0,9.0,9853.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2437.0,60263.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190813064441-fde4db37ae7a,kubernetes/kubernetes,syscall,no-gc
387,387,387,387,387,1919,"func (sa *SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {","
func Mkfifoat(dirfd int, path string, mode uint32) error {
	return Mknodat(dirfd, path, mode|S_IFIFO, 0)
}

func (sa *SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))",398.0,38.0,10491.0,unsafe.Pointer,parameter,syscall_linux.go,1868.0,54998.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190813064441-fde4db37ae7a,kubernetes/kubernetes,cast-pointer,serialization
388,388,388,388,388,1725,var _p0 unsafe.Pointer,"}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setdomainname(p []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}",717.0,10.0,17063.0,unsafe.Pointer,variable,zsyscall_linux_amd64.go,1715.0,41639.0,syscall,std,std,kubernetes/kubernetes,syscall,no-gc
389,389,389,389,389,2662,"return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil","func (sa *SockaddrNetlink) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_NETLINK
	sa.raw.Pad = sa.Pad
	sa.raw.Pid = sa.Pid
	sa.raw.Groups = sa.Groups
	return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil
}

// SockaddrHCI implements the Sockaddr interface for AF_BLUETOOTH type sockets
// using the HCI protocol.
type SockaddrHCI struct {",469.0,9.0,12191.0,unsafe.Pointer,assignment,syscall_linux.go,2124.0,63149.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,cast-pointer,efficiency
390,390,390,390,390,909,ctxt unsafe.Pointer,"	""unsafe""
)

type sigctxt struct {
	info *siginfo
	ctxt unsafe.Pointer
}

//go:nosplit
//go:nowritebarrierrec
func (c *sigctxt) regs() *sigcontext {",14.0,7.0,266.0,unsafe.Pointer,variable,signal_linux_amd64.go,56.0,2102.0,runtime,std,std,kubernetes/kubernetes,definition,ffi
391,391,391,391,391,4846,"_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrlimit(resource int, rlim *Rlimit) (err error) {
	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",176.0,67.0,4444.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,745.0,19148.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200519105757-fe76b779f299,containers/libpod,syscall,no-gc
392,392,392,392,392,1114,return &(*u)(unsafe.Pointer(t)).u,"	case kindStruct:
		type u struct {
			structtype
			u uncommontype
		}
		return &(*u)(unsafe.Pointer(t)).u
	case kindPtr:
		type u struct {
			ptrtype
			u uncommontype
		}",68.0,16.0,1870.0,unsafe.Pointer,assignment,type.go,726.0,18709.0,runtime,std,std,kubernetes/kubernetes,cast-struct,types
393,393,393,393,393,1061,"func gostartcall(buf *gobuf, fn, ctxt unsafe.Pointer) {","	""unsafe""
)

// adjust Gobuf as if it executed a call to fn with context ctxt
// and then did an immediate gosave.
func gostartcall(buf *gobuf, fn, ctxt unsafe.Pointer) {
	sp := buf.sp
	if sys.RegSize > sys.PtrSize {
		sp -= sys.PtrSize
		*(*uintptr)(unsafe.Pointer(sp)) = 0
	}",16.0,39.0,384.0,unsafe.Pointer,parameter,sys_x86.go,27.0,624.0,runtime,std,std,kubernetes/kubernetes,delegate,layout
394,394,394,394,394,1355,"return resolveTextOff(unsafe.Pointer(t), int32(off))","func (t *rtype) typeOff(off typeOff) *rtype {
	return (*rtype)(resolveTypeOff(unsafe.Pointer(t), int32(off)))
}

func (t *rtype) textOff(off textOff) unsafe.Pointer {
	return resolveTextOff(unsafe.Pointer(t), int32(off))
}

func (t *rtype) uncommon() *uncommonType {
	if t.tflag&tflagUncommon == 0 {
		return nil",691.0,24.0,21117.0,unsafe.Pointer,assignment,type.go,3120.0,86902.0,reflect,std,std,kubernetes/kubernetes,cast-basic,ffi
395,395,395,395,395,163,allp := (*uintptr)(unsafe.Pointer(&allDloggers)),"	l := getCachedDlogger()

	// If we couldn't get a cached logger, try to get one from the
	// global pool.
	if l == nil {
		allp := (*uintptr)(unsafe.Pointer(&allDloggers))
		all := (*dlogger)(unsafe.Pointer(atomic.Loaduintptr(allp)))
		for l1 := all; l1 != nil; l1 = l1.allLink {
			if atomic.Load(&l1.owned) == 0 && atomic.Cas(&l1.owned, 0, 1) {
				l = l1
				break",63.0,22.0,2142.0,unsafe.Pointer,assignment,debuglog.go,808.0,17487.0,runtime,std,std,kubernetes/kubernetes,cast-struct,efficiency
396,396,396,396,396,2495,_p2 = unsafe.Pointer(&data[0]),"	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {",1077.0,9.0,26024.0,unsafe.Pointer,assignment,zsyscall_linux.go,1856.0,45337.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,syscall,no-gc
397,397,397,397,397,3349,"_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
	_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2345.0,104.0,57588.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2558.0,63399.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,syscall,no-gc
398,398,398,398,398,4208,pp := (*RawSockaddrPPPoX)(unsafe.Pointer(rsa)),"			QueueID:      pp.Queue_id,
			SharedUmemFD: pp.Shared_umem_fd,
		}
		return sa, nil
	case AF_PPPOX:
		pp := (*RawSockaddrPPPoX)(unsafe.Pointer(rsa))
		if binary.BigEndian.Uint32(pp[2:6]) != px_proto_oe {
			return nil, EINVAL
		}
		sa := &SockaddrPPPoE{
			SID:    binary.BigEndian.Uint16(pp[6:8]),",1020.0,29.0,28880.0,unsafe.Pointer,assignment,syscall_linux.go,2191.0,64817.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,cast-struct,serialization
399,399,399,399,399,2990,"_, _, e1 := Syscall(SYS_FUTIMESAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)))","	var _p0 *byte
	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_FUTIMESAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}",2479.0,61.0,61447.0,unsafe.Pointer,assignment,zsyscall_linux_amd64.go,2560.0,63453.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,syscall,no-gc
