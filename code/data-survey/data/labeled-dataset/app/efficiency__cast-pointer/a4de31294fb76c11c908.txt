Module: gorgonia.org/tensor
Version: v0.9.6

Package: gorgonia.org/tensor
File: array.go
Line: 245

Imported (possibly among others) by: gorgonia/gorgonia

Label 1 (What is happening?): cast-pointer
Label 2 (For what purpose?): efficiency

--------------------------------------------------------------
Snippet line:

func (a *array) Pointer() unsafe.Pointer { return a.Ptr }
--------------------------------------------------------------
+/- 5 lines context:


// MemSize returns how big the slice is in bytes
func (a *array) MemSize() uintptr { return uintptr(a.L) * a.t.Size() }

// Pointer returns the pointer of the first value of the slab, as an unsafe.Pointer
func (a *array) Pointer() unsafe.Pointer { return a.Ptr }

// Data returns the representation of a slice.
func (a array) Data() interface{} {
	if a.v == nil {
		// build a type of []T
--------------------------------------------------------------
+/- 100 lines context:

// sliceInto creates a slice. Instead of returning an array, which would cause a lot of reallocations, sliceInto expects a array to
// already have been created. This allows repetitive actions to be done without having to have many pointless allocation
func (a *array) sliceInto(i, j int, res *array) {
	c := a.C

	if i < 0 || j < i || j > c {
		panic(fmt.Sprintf("Cannot slice %v - index %d:%d is out of bounds", a, i, j))
	}

	res.L = j - i
	res.C = c - i

	if c-1 > 0 {
		res.Ptr = storage.ElementAt(i, a.Ptr, a.t.Size())
	} else {
		// don't advance pointer
		res.Ptr = a.Ptr
	}
	res.fix()
}

// slice slices an array
func (a array) slice(start, end int) array2 {
	if end > a.L {
		panic("Index out of range")
	}
	if end < start {
		panic("Index out of range")
	}

	L := end - start
	C := a.C - start

	var startptr unsafe.Pointer
	if a.C-start > 0 {
		startptr = storage.ElementAt(start, a.Ptr, a.t.Size())
	} else {
		startptr = a.Ptr
	}

	hdr := storage.Header{
		Ptr: startptr,
		L:   L,
		C:   C,
	}

	return array2{
		Header: hdr,
		t:      a.t,
		v:      nil,
	}
}

// swap swaps the elements i and j in the array
func (a *array) swap(i, j int) {
	if a.t == String {
		ss := a.hdr().Strings()
		ss[i], ss[j] = ss[j], ss[i]
		return
	}
	if !isParameterizedKind(a.t.Kind()) {
		switch a.t.Size() {
		case 8:
			us := a.hdr().Uint64s()
			us[i], us[j] = us[j], us[i]
		case 4:
			us := a.hdr().Uint32s()
			us[i], us[j] = us[j], us[i]
		case 2:
			us := a.hdr().Uint16s()
			us[i], us[j] = us[j], us[i]
		case 1:
			us := a.hdr().Uint8s()
			us[i], us[j] = us[j], us[i]
		}
		return
	}

	size := int(a.t.Size())
	tmp := make([]byte, size)
	bs := a.byteSlice()
	is := i * size
	ie := is + size
	js := j * size
	je := js + size
	copy(tmp, bs[is:ie])
	copy(bs[is:ie], bs[js:je])
	copy(bs[js:je], tmp)
}

/* *Array is a Memory */

// Uintptr returns the pointer of the first value of the slab
func (a *array) Uintptr() uintptr { return uintptr(a.Ptr) }

// MemSize returns how big the slice is in bytes
func (a *array) MemSize() uintptr { return uintptr(a.L) * a.t.Size() }

// Pointer returns the pointer of the first value of the slab, as an unsafe.Pointer
func (a *array) Pointer() unsafe.Pointer { return a.Ptr }

// Data returns the representation of a slice.
func (a array) Data() interface{} {
	if a.v == nil {
		// build a type of []T
		shdr := reflect.SliceHeader{
			Data: uintptr(a.Header.Ptr),
			Len:  a.Header.L,
			Cap:  a.Header.C,
		}
		sliceT := reflect.SliceOf(a.t.Type)
		ptr := unsafe.Pointer(&shdr)
		val := reflect.Indirect(reflect.NewAt(sliceT, ptr))
		a.v = val.Interface()

	}
	return a.v
}

// Zero zeroes out the underlying array of the *Dense tensor.
func (a array) Zero() {
	if a.t.Kind() == reflect.String {
		ss := a.Strings()
		for i := range ss {
			ss[i] = ""
		}
		return
	}
	if !isParameterizedKind(a.t.Kind()) {
		ba := a.byteSlice()
		for i := range ba {
			ba[i] = 0
		}
		return
	}
	ptr := uintptr(a.Ptr)
	for i := 0; i < a.L; i++ {
		want := ptr + uintptr(i)*a.t.Size()
		val := reflect.NewAt(a.t.Type, unsafe.Pointer(want))
		val = reflect.Indirect(val)
		val.Set(reflect.Zero(a.t))
	}
}

func (a *array) hdr() *storage.Header { return &a.Header }
func (a *array) rtype() reflect.Type  { return a.t.Type }

/* MEMORY MOVEMENT STUFF */

// malloc is standard Go allocation of a block of memory - the plus side is that Go manages the memory
func malloc(t Dtype, length int) unsafe.Pointer {
	size := int(calcMemSize(t, length))
	s := make(rawdata, size)
	return unsafe.Pointer(&s[0])
}

// calcMemSize calulates the memory size of an array (given its size)
func calcMemSize(dt Dtype, size int) int64 {
	return int64(dt.Size()) * int64(size)
}

// copyArray copies an array.
func copyArray(dst, src *array) int {
	if dst.t != src.t {
		panic("Cannot copy arrays of different types.")
	}
	return storage.Copy(dst.t.Type, &dst.Header, &src.Header)
}

func copyArraySliced(dst array, dstart, dend int, src array, sstart, send int) int {
	if dst.t != src.t {
		panic("Cannot copy arrays of different types.")
	}
	return storage.CopySliced(dst.t.Type, &dst.Header, dstart, dend, &src.Header, sstart, send)
}

// copyDense copies a DenseTensor
func copyDense(dst, src DenseTensor) int {
	if dst.Dtype() != src.Dtype() {
		panic("Cannot dopy DenseTensors of different types")
	}

	if ms, ok := src.(MaskedTensor); ok && ms.IsMasked() {
		if md, ok := dst.(MaskedTensor); ok {
			dmask := md.Mask()
			smask := ms.Mask()
			if cap(dmask) < len(smask) {
				dmask = make([]bool, len(smask))
				copy(dmask, md.Mask())
				md.SetMask(dmask)
			}
			copy(dmask, smask)
		}
	}

	e := src.Engine()
	if err := e.Memcpy(dst.arrPtr(), src.arrPtr()); err != nil {
		panic(err)
	}
	return dst.len()

