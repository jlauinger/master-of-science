,text,context,line_number,column,absolute_offset,match_type,file_name,file_loc,file_byte_size,package_import_path,module_path,module_version,project_name,file_copy_path,label
0,"func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
	_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",1520.0,48.0,36273.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
1,"func (sa *SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrInet4, nil
}

func (sa *SockaddrInet6) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET6
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))
",358.0,37.0,8664.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,direct-memory-access
2,"			k := *((*unsafe.Pointer)(add(unsafe.Pointer(b), dataOffset+i*8)))
","					break bucketloop
				}
				continue
			}
			k := *((*unsafe.Pointer)(add(unsafe.Pointer(b), dataOffset+i*8)))
			if k != key {
				continue
			}
			insertb = b
			inserti = i
",226.0,12.0,5972.0,unsafe.Pointer,map_fast64.go,12663.0,458.0,runtime,std,std,kubernetes/kubernetes,runtime/map_fast64.go,pointer-arithmetic-memory-layout
3,"	_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",145.0,59.0,3512.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
4,"			sa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))
","		// Determine which union variant is present in pp.Addr by checking
		// pp.Addrtype.
		switch pp.Addrtype {
		case TIPC_SERVICE_RANGE:
			sa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))
		case TIPC_SERVICE_ADDR:
			sa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))
		case TIPC_SOCKET_ADDR:
			sa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))
		default:
",979.0,33.0,27789.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/syscall_linux.go,type-reflection
5,"		_p1 = unsafe.Pointer(&_zero)
","	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_FGETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), 0, 0)
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",659.0,8.0,16410.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
6,"			pp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))
","		}

		switch proto {
		case IPPROTO_L2TP:
			pp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))
			sa := new(SockaddrL2TPIP)
			sa.ConnId = pp.Conn_id
			for i := 0; i < len(sa.Addr); i++ {
				sa.Addr[i] = pp.Addr[i]
			}
",933.0,30.0,26742.0,unsafe.Pointer,syscall_linux.go,64817.0,2191.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
7,"					elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
","			if b.tophash[i] != top {
				if isEmpty(b.tophash[i]) && inserti == nil {
					inserti = &b.tophash[i]
					insertk = add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))
					elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				}
				if b.tophash[i] == emptyRest {
					break bucketloop
				}
				continue
",615.0,16.0,20659.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,pointer-arithmetic-memory-layout
8,"func efaceeq(t *_type, x, y unsafe.Pointer) bool {
","	x := *(*eface)(p)
	y := *(*eface)(q)
	return x._type == y._type && efaceeq(x._type, x.data, y.data)
}
func efaceeq(t *_type, x, y unsafe.Pointer) bool {
	if t == nil {
		return true
	}
	eq := t.equal
	if eq == nil {
",279.0,28.0,7297.0,unsafe.Pointer,alg.go,10428.0,389.0,runtime,std,std,kubernetes/kubernetes,runtime/alg.go,direct-memory-access
9,"func resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer
","
// resolveNameOff resolves a name offset from a base pointer.
// The (*rtype).nameOff method is a convenience wrapper for this function.
// Implemented in the runtime package.
func resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer

// resolveTypeOff resolves an *rtype offset from a base type.
// The (*rtype).typeOff method is a convenience wrapper for this function.
// Implemented in the runtime package.
func resolveTypeOff(rtype unsafe.Pointer, off int32) unsafe.Pointer
",642.0,32.0,19087.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,data-structure
10,"	_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
","	_p0, err = BytePtrFromString(target)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1532.0,42.0,37578.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
11,"var _cgo_munmap unsafe.Pointer
","
// _cgo_munmap is filled in by runtime/cgo when it is linked into the
// program, so it is only non-nil when using cgo.
//go:linkname _cgo_munmap _cgo_munmap
var _cgo_munmap unsafe.Pointer

// mmap is used to route the mmap system call through C code when using cgo, to
// support sanitizer interceptors. Don't allow stack splits, since this function
// (used by sysAlloc) is called in a lot of low-level parts of the runtime and
// callers often assume it won't acquire any locks.
",21.0,16.0,628.0,unsafe.Pointer,cgo_mmap.go,2434.0,67.0,runtime,std,std,kubernetes/kubernetes,runtime/cgo_mmap.go,data-structure
12,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func readv(fd int, iovs []Iovec) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1598.0,9.0,39028.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
13,"	cid := (*[2]byte)(unsafe.Pointer(&sa.raw.Cid))
","	psm[1] = byte(sa.PSM >> 8)
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Bdaddr[i] = sa.Addr[len(sa.Addr)-1-i]
	}
	cid := (*[2]byte)(unsafe.Pointer(&sa.raw.Cid))
	cid[0] = byte(sa.CID)
	cid[1] = byte(sa.CID >> 8)
	sa.raw.Bdaddr_type = sa.AddrType
	return unsafe.Pointer(&sa.raw), SizeofSockaddrL2, nil
}
",505.0,19.0,13159.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
14,"	return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))
","	return ptracePoke(PTRACE_POKEDATA, PTRACE_PEEKDATA, pid, addr, data)
}

func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error) {
	return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))
}

func PtraceSetRegs(pid int, regs *PtraceRegs) (err error) {
	return ptrace(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs)))
}
",816.0,47.0,20277.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,syscall
15,"	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(arg2)), uintptr(_p0), uintptr(len(buf)), 0, 0)
","		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(arg2)), uintptr(_p0), uintptr(len(buf)), 0, 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",298.0,57.0,7627.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
16,"	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pipe2(p *[2]_C_int, flags int) (err error) {
	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1851.0,43.0,45207.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
17,"	_, _, e1 := RawSyscall(SYS_SYSINFO, uintptr(unsafe.Pointer(info)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Sysinfo(info *Sysinfo_t) (err error) {
	_, _, e1 := RawSyscall(SYS_SYSINFO, uintptr(unsafe.Pointer(info)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1478.0,45.0,36287.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
18,"					ityp := (*interfacetype)(unsafe.Pointer(f.fint))
","				case kindPtr:
					// direct use of pointer
					*(*unsafe.Pointer)(frame) = f.arg
				case kindInterface:
					ityp := (*interfacetype)(unsafe.Pointer(f.fint))
					// set up with empty interface
					(*eface)(frame)._type = &f.ot.typ
					(*eface)(frame).data = f.arg
					if len(ityp.mhdr) != 0 {
						// convert to interface with methods
",209.0,30.0,5877.0,unsafe.Pointer,mfinal.go,15158.0,453.0,runtime,std,std,kubernetes/kubernetes,runtime/mfinal.go,type-reflection
19,"	_, _, e := RawSyscall(trap, uintptr(pid), uintptr(unsafe.Sizeof(*set)), uintptr(unsafe.Pointer(set)))
","// CPUSet represents a CPU affinity mask.
type CPUSet [cpuSetSize]cpuMask

func schedAffinity(trap uintptr, pid int, set *CPUSet) error {
	_, _, e := RawSyscall(trap, uintptr(pid), uintptr(unsafe.Sizeof(*set)), uintptr(unsafe.Pointer(set)))
	if e != 0 {
		return errnoErr(e)
	}
	return nil
}
",20.0,81.0,419.0,unsafe.Pointer,affinity_linux.go,1927.0,86.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/affinity_linux.go,syscall
20,"	dumpint(uint64(uintptr(unsafe.Pointer(fn.fn))))
","func finq_callback(fn *funcval, obj unsafe.Pointer, nret uintptr, fint *_type, ot *ptrtype) {
	dumpint(tagQueuedFinalizer)
	dumpint(uint64(uintptr(obj)))
	dumpint(uint64(uintptr(unsafe.Pointer(fn))))
	dumpint(uint64(uintptr(unsafe.Pointer(fn.fn))))
	dumpint(uint64(uintptr(unsafe.Pointer(fint))))
	dumpint(uint64(uintptr(unsafe.Pointer(ot))))
}

func dumproots() {
",417.0,24.0,10401.0,unsafe.Pointer,heapdump.go,17514.0,725.0,runtime,std,std,kubernetes/kubernetes,runtime/heapdump.go,conversion-struct-basic
21,"	fn  unsafe.Pointer
","
type cgothreadstart struct {
	g   guintptr
	tls *uint64
	fn  unsafe.Pointer
}

// Allocate a new m unassociated with any thread.
// Can use p for allocation context if needed.
// fn is recorded as the new m's m.mstartfn.
",1350.0,5.0,39007.0,unsafe.Pointer,proc.go,153166.0,5418.0,runtime,std,std,kubernetes/kubernetes,runtime/proc.go,data-structure
22,"	str := (*[maxAlloc/2/2 - 1]uint16)(unsafe.Pointer(strw))
","}

func gostringw(strw *uint16) string {
	var buf [8]byte
	str := (*[maxAlloc/2/2 - 1]uint16)(unsafe.Pointer(strw))
	n1 := 0
	for i := 0; str[i] != 0; i++ {
		n1 += encoderune(buf[:], rune(str[i]))
	}
	s, b := rawstring(n1 + 4)
",481.0,36.0,10737.0,unsafe.Pointer,string.go,11797.0,531.0,runtime,std,std,kubernetes/kubernetes,runtime/string.go,pointer-arithmetic-memory-layout
23,"	_, _, e1 := Syscall(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",33.0,59.0,754.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
24,"		err = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
","	// Remainder.
	for len(out) > 0 {
		// We use an internal buffer to guarantee alignment.
		// It's not documented if this is necessary, but we're paranoid.
		err = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return n, err
		}
		copied := copy(out, buf[0:])
		n += copied
",1380.0,50.0,40978.0,unsafe.Pointer,syscall_linux.go,62378.0,2100.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/syscall_linux.go,syscall
25,"		*(*unsafe.Pointer)(insertk) = kmem
","
	// store new key/elem at insert position
	if t.indirectkey() {
		kmem := newobject(t.key)
		*(*unsafe.Pointer)(insertk) = kmem
		insertk = kmem
	}
	if t.indirectelem() {
		vmem := newobject(t.elem)
		*(*unsafe.Pointer)(elem) = vmem
",663.0,5.0,22037.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,direct-memory-access
26,"	err := utimensat(AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
","	}
	var ts [2]Timespec
	ts[0] = NsecToTimespec(TimevalToNsec(tv[0]))
	ts[1] = NsecToTimespec(TimevalToNsec(tv[1]))
	err := utimensat(AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
	if err != ENOSYS {
		return err
	}
	return utimes(path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
}
",203.0,49.0,5880.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
27,"func makechan(typ *rtype, size int) (ch unsafe.Pointer)
","
//go:noescape
func chansend(ch unsafe.Pointer, val unsafe.Pointer, nb bool) bool

func makechan(typ *rtype, size int) (ch unsafe.Pointer)
func makemap(t *rtype, cap int) (m unsafe.Pointer)

//go:noescape
func mapaccess(t *rtype, m unsafe.Pointer, key unsafe.Pointer) (val unsafe.Pointer)

",2706.0,40.0,79296.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,data-structure
28,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil
","	sa.raw.Family = AF_NETLINK
	sa.raw.Pad = sa.Pad
	sa.raw.Pid = sa.Pid
	sa.raw.Groups = sa.Groups
	return unsafe.Pointer(&sa.raw), SizeofSockaddrNetlink, nil
}

func anyToSockaddr(rsa *RawSockaddrAny) (Sockaddr, error) {
	switch rsa.Addr.Family {
	case AF_NETLINK:
",439.0,8.0,10573.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,direct-memory-access
29,"		_p0 = unsafe.Pointer(&iovs[0])
","
func writev(fd int, iovs []Iovec) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_WRITEV, uintptr(fd), uintptr(_p0), uintptr(len(iovs)))
	n = int(r0)
",1617.0,8.0,39456.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
30,"	return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
","func Futimesat(dirfd int, path string, tv []Timeval) (err error) {
	if len(tv) != 2 {
		return EINVAL
	}
	return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
}

func Futimes(fd int, tv []Timeval) (err error) {
	// Believe it or not, this is the best we can do on Linux
	// (and is what glibc does).
",208.0,45.0,5280.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,conversion-struct-struct
31,"func racereleasemerge(addr unsafe.Pointer)                                  { throw(""race"") }
","func raceacquireg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }
func raceacquirectx(racectx uintptr, addr unsafe.Pointer)                   { throw(""race"") }
func racerelease(addr unsafe.Pointer)                                       { throw(""race"") }
func racereleaseg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }
func racereleasemerge(addr unsafe.Pointer)                                  { throw(""race"") }
func racereleasemergeg(gp *g, addr unsafe.Pointer)                          { throw(""race"") }
func racefingo()                                                            { throw(""race"") }
func racemalloc(p unsafe.Pointer, sz uintptr)                               { throw(""race"") }
func racefree(p unsafe.Pointer, sz uintptr)                                 { throw(""race"") }
func racegostart(pc uintptr) uintptr                                        { throw(""race""); return 0 }
",35.0,27.0,1908.0,unsafe.Pointer,race0.go,2670.0,42.0,runtime,std,std,kubernetes/kubernetes,runtime/race0.go,unused
32,"func StorepNoWB(ptr unsafe.Pointer, val unsafe.Pointer)
","// StorepNoWB performs *ptr = val atomically and without a write
// barrier.
//
// NO go:noescape annotation; see atomic_pointer.go.
func StorepNoWB(ptr unsafe.Pointer, val unsafe.Pointer)
",92.0,20.0,1720.0,unsafe.Pointer,atomic_amd64.go,1776.0,92.0,runtime/internal/atomic,std,std,kubernetes/kubernetes,runtime/internal/atomic/atomic_amd64.go,data-structure
33,"	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
","	return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)
}

func SetsockoptLinger(fd, level, opt int, l *Linger) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
}

func SetsockoptString(fd, level, opt int, s string) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(&[]byte(s)[0]), uintptr(len(s)))
}
",343.0,35.0,8368.0,unsafe.Pointer,syscall_unix.go,10607.0,416.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_unix.go,syscall
34,"	rx := (*[4]byte)(unsafe.Pointer(&sa.RxID))
","		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_CAN
	sa.raw.Ifindex = int32(sa.Ifindex)
	rx := (*[4]byte)(unsafe.Pointer(&sa.RxID))
	for i := 0; i < 4; i++ {
		sa.raw.Addr[i] = rx[i]
	}
	tx := (*[4]byte)(unsafe.Pointer(&sa.TxID))
	for i := 0; i < 4; i++ {
",583.0,18.0,15775.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-byteslice
35,"	r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error) {
	r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))
	n = int64(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",2223.0,57.0,54216.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
36,"	if nbitp <= uintptr(unsafe.Pointer(h.last)) {
","func (h heapBits) forward(n uintptr) heapBits {
	n += uintptr(h.shift) / heapBitsShift
	nbitp := uintptr(unsafe.Pointer(h.bitp)) + n/4
	h.shift = uint32(n%4) * heapBitsShift
	if nbitp <= uintptr(unsafe.Pointer(h.last)) {
		h.bitp = (*uint8)(unsafe.Pointer(nbitp))
		return h
	}

	// We're in a new heap arena.
",497.0,21.0,17736.0,unsafe.Pointer,mbitmap.go,69152.0,2083.0,runtime,std,std,kubernetes/kubernetes,runtime/mbitmap.go,pointer-arithmetic-memory-layout
37,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",967.0,9.0,22793.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
38,"					e = *((*unsafe.Pointer)(e))
","			}
			if t.key.equal(key, k) {
				e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				if t.indirectelem() {
					e = *((*unsafe.Pointer)(e))
				}
				return e, true
			}
		}
	}
",501.0,13.0,17667.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,pointer-arithmetic-memory-layout
39,"	_, _, e1 := Syscall(SYS_MKDIRAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_MKDIRAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1146.0,58.0,27883.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
40,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))
	if e1 != 0 {
		err = errnoErr(e1)
	}
",1733.0,8.0,42483.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
41,"		st := (*structtype)(unsafe.Pointer(t))
","		if !top {
			panic(errorString(msg))
		}
	case kindStruct:
		st := (*structtype)(unsafe.Pointer(t))
		if !indir {
			if len(st.fields) != 1 {
				throw(""can't happen"")
			}
			cgoCheckArg(st.fields[0].typ, p, st.fields[0].typ.kind&kindDirectIface == 0, top, msg)
",561.0,22.0,19077.0,unsafe.Pointer,cgocall.go,21888.0,675.0,runtime,std,std,kubernetes/kubernetes,runtime/cgocall.go,conversion-struct-struct
42,"	hdr := (*stringStruct)(unsafe.Pointer(&s))
","	nl := n.nameLen()
	if nl == 0 {
		return """"
	}
	hdr := (*stringStruct)(unsafe.Pointer(&s))
	hdr.str = unsafe.Pointer(n.data(3))
	hdr.len = nl
	return s
}

",475.0,24.0,12171.0,unsafe.Pointer,type.go,18709.0,726.0,runtime,std,std,kubernetes/kubernetes,runtime/type.go,conversion-header
43,"	_, _, e1 := Syscall(SYS_ACCT, uintptr(unsafe.Pointer(_p0)), 0, 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_ACCT, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",394.0,39.0,10058.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
44,"	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))
","	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))
	p[0] = byte(sa.Port >> 8)
	p[1] = byte(sa.Port)
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Addr[i] = sa.Addr[i]
	}
",349.0,17.0,8437.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,pointer-arithmetic-memory-layout
45,"	var _p2 unsafe.Pointer
","	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(dest) > 0 {
		_p2 = unsafe.Pointer(&dest[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
",894.0,9.0,21984.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
46,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",2082.0,9.0,50694.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
47,"func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
	_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",541.0,48.0,13385.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
48,"		fds[j] = int(*(*int32)(unsafe.Pointer(&m.Data[i])))
","		return nil, EINVAL
	}
	fds := make([]int, len(m.Data)>>2)
	for i, j := 0, 0; i < len(m.Data); i += 4 {
		fds[j] = int(*(*int32)(unsafe.Pointer(&m.Data[i])))
		j++
	}
	return fds, nil
}
",88.0,25.0,2534.0,unsafe.Pointer,sockcmsg_unix.go,2616.0,92.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/sockcmsg_unix.go,conversion-struct-basic
49,"		_p1 = unsafe.Pointer(&buf[0])
","		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_READLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(buf)), 0, 0)
	n = int(r0)
",118.0,8.0,3046.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
50,"func msanwrite(addr unsafe.Pointer, sz uintptr)  { throw(""msan"") }
","
// Because msanenabled is false, none of these functions should be called.

func msanread(addr unsafe.Pointer, sz uintptr)   { throw(""msan"") }
func msanwrite(addr unsafe.Pointer, sz uintptr)  { throw(""msan"") }
func msanmalloc(addr unsafe.Pointer, sz uintptr) { throw(""msan"") }
func msanfree(addr unsafe.Pointer, sz uintptr)   { throw(""msan"") }
",20.0,20.0,446.0,unsafe.Pointer,msan0.go,647.0,22.0,runtime,std,std,kubernetes/kubernetes,runtime/msan0.go,unused
51,"func selectnbrecv2(elem unsafe.Pointer, received *bool, c *hchan) (selected bool) {
","//	} else {
//		... bar
//	}
//
func selectnbrecv2(elem unsafe.Pointer, received *bool, c *hchan) (selected bool) {
	// TODO(khr): just return 2 values from this function, now that it is in Go.
	selected, *received = chanrecv(c, elem, false)
	return
}

",667.0,24.0,17547.0,unsafe.Pointer,chan.go,20178.0,772.0,runtime,std,std,kubernetes/kubernetes,runtime/chan.go,delegate
52,"func (sa *SockaddrHCI) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	Channel uint16
	raw     RawSockaddrHCI
}

func (sa *SockaddrHCI) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_BLUETOOTH
	sa.raw.Dev = sa.Dev
	sa.raw.Channel = sa.Channel
	return unsafe.Pointer(&sa.raw), SizeofSockaddrHCI, nil
}
",480.0,35.0,12437.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
53,"func mincore(addr unsafe.Pointer, n uintptr, dst *byte) int32
","var procAuxv = []byte(""/proc/self/auxv\x00"")

var addrspace_vec [1]byte

func mincore(addr unsafe.Pointer, n uintptr, dst *byte) int32

func sysargs(argc int32, argv **byte) {
	n := argc + 1

	// skip over argv, envp to get to auxv
",195.0,18.0,5834.0,unsafe.Pointer,os_linux.go,13478.0,500.0,runtime,std,std,kubernetes/kubernetes,runtime/os_linux.go,data-structure
54,"	return typeOff(addReflectOff(unsafe.Pointer(t)))
","
// resolveReflectType adds a *rtype to the reflection lookup map in the runtime.
// It returns a new typeOff that can be used to refer to the pointer.
func resolveReflectType(t *rtype) typeOff {
	return typeOff(addReflectOff(unsafe.Pointer(t)))
}

// resolveReflectText adds a function pointer to the reflection lookup map in
// the runtime. It returns a new textOff that can be used to refer to the
// pointer.
",668.0,30.0,20365.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,delegate
55,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1713.0,9.0,42042.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
56,"	err := ioctl(fd, RTC_SET_TIME, uintptr(unsafe.Pointer(value)))
","	return ioctl(fd, req, uintptr(unsafe.Pointer(&v)))
}

func IoctlSetRTCTime(fd int, value *RTCTime) error {
	err := ioctl(fd, RTC_SET_TIME, uintptr(unsafe.Pointer(value)))
	runtime.KeepAlive(value)
	return err
}

func IoctlGetUint32(fd int, req uint) (uint32, error) {
",95.0,40.0,2883.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,syscall
57,"	var _p1 unsafe.Pointer
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(buf) > 0 {
		_p1 = unsafe.Pointer(&buf[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
",84.0,9.0,2056.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
58,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))
	if e1 != 0 {
		err = errnoErr(e1)
	}
",1730.0,8.0,42347.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
59,"	var _p1 unsafe.Pointer
","	_p0, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
",757.0,9.0,18910.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
60,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1696.0,9.0,41267.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
61,"	err := ioctl(fd, req, uintptr(unsafe.Pointer(&value)))
","}

func IoctlGetWinsize(fd int, req uint) (*Winsize, error) {
	var value Winsize
	err := ioctl(fd, req, uintptr(unsafe.Pointer(&value)))
	return &value, err
}

func IoctlGetTermios(fd int, req uint) (*Termios, error) {
	var value Termios
",114.0,31.0,3421.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,delegate
62,"				e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
","			if t.indirectkey() {
				k = *((*unsafe.Pointer)(k))
			}
			if t.key.equal(key, k) {
				e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				if t.indirectelem() {
					e = *((*unsafe.Pointer)(e))
				}
				return e
			}
",441.0,13.0,15977.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,pointer-arithmetic-memory-layout
63,"			uintptr(unsafe.Pointer(&envvp[0])))
","	} else {
		_, _, err1 = RawSyscall(SYS_EXECVE,
			uintptr(unsafe.Pointer(argv0p)),
			uintptr(unsafe.Pointer(&argvp[0])),
			uintptr(unsafe.Pointer(&envvp[0])))
	}
	runtime_AfterExec()
	return err1
}
",291.0,11.0,8251.0,unsafe.Pointer,exec_unix.go,8329.0,295.0,syscall,std,std,kubernetes/kubernetes,syscall/exec_unix.go,syscall
64,"		scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)
","	// Scan the saved context register. This is effectively a live
	// register that gets moved back and forth between the
	// register and sched.ctxt without a write barrier.
	if gp.sched.ctxt != nil {
		scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)
	}

	// Scan the stack. Accumulate a list of stack objects.
	scanframe := func(frame *stkframe, unused unsafe.Pointer) bool {
		scanframeworker(frame, &state, gcw)
",731.0,20.0,22811.0,unsafe.Pointer,mgcmark.go,47620.0,1585.0,runtime,std,std,kubernetes/kubernetes,runtime/mgcmark.go,delegate
65,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func readv(fd int, iovs []Iovec) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1601.0,9.0,39164.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
66,"		p = unsafe.Pointer(&iovs[0])
","// using the specified flags.
func Vmsplice(fd int, iovs []Iovec, flags int) (int, error) {
	var p unsafe.Pointer
	if len(iovs) > 0 {
		p = unsafe.Pointer(&iovs[0])
	}

	n, _, errno := Syscall6(SYS_VMSPLICE, uintptr(fd), uintptr(p), uintptr(len(iovs)), uintptr(flags), 0, 0)
	if errno != 0 {
		return 0, syscall.Errno(errno)
",1851.0,6.0,57181.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/syscall_linux.go,syscall
67,"	atomic.StorePointer(&p.local, unsafe.Pointer(&local[0])) // store-release
","	}
	// If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one.
	size := runtime.GOMAXPROCS(0)
	local := make([]poolLocal, size)
	atomic.StorePointer(&p.local, unsafe.Pointer(&local[0])) // store-release
	atomic.StoreUintptr(&p.localSize, uintptr(size))         // store-release
	return &local[pid], pid
}

func poolCleanup() {
",228.0,31.0,6802.0,unsafe.Pointer,pool.go,8346.0,284.0,sync,std,std,kubernetes/kubernetes,sync/pool.go,delegate
68,"	*(*uint16)(unsafe.Pointer(&b[4:6][0])) = rr.Header.Type
","
func (rr *NetlinkRouteRequest) toWireFormat() []byte {
	b := make([]byte, rr.Header.Len)
	*(*uint32)(unsafe.Pointer(&b[0:4][0])) = rr.Header.Len
	*(*uint16)(unsafe.Pointer(&b[4:6][0])) = rr.Header.Type
	*(*uint16)(unsafe.Pointer(&b[6:8][0])) = rr.Header.Flags
	*(*uint32)(unsafe.Pointer(&b[8:12][0])) = rr.Header.Seq
	*(*uint32)(unsafe.Pointer(&b[12:16][0])) = rr.Header.Pid
	b[16] = byte(rr.Data.Family)
	return b
",32.0,12.0,885.0,unsafe.Pointer,netlink_linux.go,4777.0,179.0,syscall,std,std,kubernetes/kubernetes,syscall/netlink_linux.go,conversion-struct-byteslice
69,"func (sa *SockaddrVM) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	Port uint32
	raw  RawSockaddrVM
}

func (sa *SockaddrVM) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_VSOCK
	sa.raw.Port = sa.Port
	sa.raw.Cid = sa.CID

	return unsafe.Pointer(&sa.raw), SizeofSockaddrVM, nil
",707.0,34.0,20146.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
70,"func (sa *SockaddrXDP) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	SharedUmemFD uint32
	raw          RawSockaddrXDP
}

func (sa *SockaddrXDP) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_XDP
	sa.raw.Flags = sa.Flags
	sa.raw.Ifindex = sa.Ifindex
	sa.raw.Queue_id = sa.QueueID
	sa.raw.Shared_umem_fd = sa.SharedUmemFD
",746.0,35.0,21148.0,unsafe.Pointer,syscall_linux.go,54998.0,1868.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
71,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
",1788.0,8.0,43592.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
72,"func callCgoMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uint32) uintptr
","func sysMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uint32) (p unsafe.Pointer, err int)

// callCgoMmap calls the mmap function in the runtime/cgo package
// using the GCC calling convention. It is implemented in assembly.
func callCgoMmap(addr unsafe.Pointer, n uintptr, prot, flags, fd int32, off uint32) uintptr

// sysMunmap calls the munmap system call. It is implemented in assembly.
func sysMunmap(addr unsafe.Pointer, n uintptr)

// callCgoMunmap calls the munmap function in the runtime/cgo package
",60.0,22.0,2030.0,unsafe.Pointer,cgo_mmap.go,2434.0,67.0,runtime,std,std,kubernetes/kubernetes,runtime/cgo_mmap.go,data-structure
73,"		_p2 = unsafe.Pointer(&_zero)
","	var _p2 unsafe.Pointer
	if len(dest) > 0 {
		_p2 = unsafe.Pointer(&dest[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_LGETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1022.0,8.0,25027.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
74,"		_p1 = unsafe.Pointer(&dest[0])
","		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_FSETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), uintptr(flags), 0)
	if e1 != 0 {
",759.0,8.0,18954.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
75,"	_, _, e1 := RawSyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func socketpair(domain int, typ int, proto int, fd *[2]int32) (err error) {
	_, _, e1 := RawSyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2205.0,96.0,53789.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
76,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrVM, nil
","	sa.raw.Family = AF_VSOCK
	sa.raw.Port = sa.Port
	sa.raw.Cid = sa.CID

	return unsafe.Pointer(&sa.raw), SizeofSockaddrVM, nil
}

type SockaddrXDP struct {
	Flags        uint16
	Ifindex      uint32
",712.0,8.0,20286.0,unsafe.Pointer,syscall_linux.go,62378.0,2100.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
77,"	return &entry{p: unsafe.Pointer(&i)}
","	p unsafe.Pointer // *interface{}
}

func newEntry(i interface{}) *entry {
	return &entry{p: unsafe.Pointer(&i)}
}

// Load returns the value stored in the map for a key, or nil if no
// value is present.
// The ok result indicates whether value was found in the map.
",96.0,18.0,3909.0,unsafe.Pointer,map.go,11261.0,372.0,sync,std,std,kubernetes/kubernetes,sync/map.go,direct-memory-access
78,"				memclrNoHeapPointers(unsafe.Pointer(v), size)
","				v, span, shouldhelpgc = c.nextFree(spc)
			}
			x = unsafe.Pointer(v)
			if needzero && span.needzero != 0 {
				memclrNoHeapPointers(unsafe.Pointer(v), size)
			}
		}
	} else {
		var s *mspan
		shouldhelpgc = true
",1040.0,25.0,38628.0,unsafe.Pointer,malloc.go,49481.0,1422.0,runtime,std,std,kubernetes/kubernetes,runtime/malloc.go,delegate
79,"		write(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))
","		exit(1)
	}
	ret := clone(cloneFlags, unsafe.Pointer(uintptr(stack)+stacksize), nil, nil, fn)
	if ret < 0 {
		write(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))
		exit(1)
	}
}

var failallocatestack = []byte(""runtime: failed to allocate stack for the new OS thread\n"")
",175.0,11.0,5262.0,unsafe.Pointer,os_linux.go,13478.0,500.0,runtime,std,std,kubernetes/kubernetes,runtime/os_linux.go,delegate
80,"	r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0, 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0, 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",89.0,59.0,2229.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
81,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1217.0,8.0,30052.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
82,"	return setsockopt(fd, level, opt, unsafe.Pointer(&value[0]), 4)
","	return setsockopt(fd, level, opt, unsafe.Pointer(&n), 4)
}

func SetsockoptInet4Addr(fd, level, opt int, value [4]byte) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(&value[0]), 4)
}

func SetsockoptIPMreq(fd, level, opt int, mreq *IPMreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPMreq)
}
",327.0,35.0,7779.0,unsafe.Pointer,syscall_unix.go,10607.0,416.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_unix.go,delegate
83,"	r0, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0)
","	_p0, err = BytePtrFromString(arg2)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(_p0)), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",244.0,56.0,6254.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
84,"	tt := (*structType)(unsafe.Pointer(t))
","func (t *rtype) NumField() int {
	if t.Kind() != Struct {
		panic(""reflect: NumField of non-struct type"")
	}
	tt := (*structType)(unsafe.Pointer(t))
	return len(tt.fields)
}

func (t *rtype) NumIn() int {
	if t.Kind() != Func {
",596.0,21.0,15285.0,unsafe.Pointer,type.go,23990.0,925.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/type.go,conversion-struct-struct
85,"		if t.elem == unsafe.Pointer(addr) {
","
	var last *sudog
	pt := &root.treap
	for t := *pt; t != nil; t = *pt {
		if t.elem == unsafe.Pointer(addr) {
			// Already have addr in list.
			if lifo {
				// Substitute s in t's place in treap.
				*pt = s
				s.ticket = t.ticket
",243.0,15.0,6904.0,unsafe.Pointer,sema.go,16335.0,617.0,runtime,std,std,kubernetes/kubernetes,runtime/sema.go,direct-memory-access
86,"		_p2 = unsafe.Pointer(&data[0])
","		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {
",1410.0,8.0,34534.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
87,"		p = unsafe.Pointer(&filter[0])
","
func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {
		p = unsafe.Pointer(&filter[0])
	}
	return setsockopt(fd, level, opt, p, uintptr(len(filter)*SizeofCanFilter))
}

func SetsockoptTpacketReq(fd, level, opt int, tp *TpacketReq) error {
",1038.0,6.0,29335.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,delegate
88,"	var p unsafe.Pointer
","	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
}

func SetsockoptString(fd, level, opt int, s string) (err error) {
	var p unsafe.Pointer
	if len(s) > 0 {
		p = unsafe.Pointer(&[]byte(s)[0])
	}
	return setsockopt(fd, level, opt, p, uintptr(len(s)))
}
",333.0,7.0,7614.0,unsafe.Pointer,syscall_unix.go,8502.0,369.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_unix.go,delegate
89,"func (sa *SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {
","func Mkfifo(path string, mode uint32) (err error) {
	return Mknod(path, mode|S_IFIFO, 0)
}

func (sa *SockaddrInet4) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))
",344.0,37.0,8275.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,conversion-struct-byteslice
90,"	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrlimit(resource int, rlim *Rlimit) (err error) {
	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1890.0,66.0,46056.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
91,"	return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
","	}
	if len(tv) != 2 {
		return EINVAL
	}
	return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
}

func Futimes(fd int, tv []Timeval) (err error) {
	// Believe it or not, this is the best we can do on Linux
	// (and is what glibc does).
",235.0,45.0,6663.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/syscall_linux.go,delegate
92,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(_p0), uintptr(len(buf)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",768.0,8.0,19126.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
93,"		_p0 = unsafe.Pointer(&buf[0])
","
func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SENDTO, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))
	if e1 != 0 {
",2425.0,8.0,59918.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
94,"		tt := (*interfaceType)(unsafe.Pointer(t))
","}

func (t *rtype) NumMethod() int {
	if t.Kind() == Interface {
		tt := (*interfaceType)(unsafe.Pointer(t))
		return tt.NumMethod()
	}
	return len(t.exportedMethods())
}

",793.0,25.0,23018.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
95,"func runtime_getProfLabel() unsafe.Pointer {
","	getg().labels = labels
}

//go:linkname runtime_getProfLabel runtime/pprof.runtime_getProfLabel
func runtime_getProfLabel() unsafe.Pointer {
	return getg().labels
}
",38.0,28.0,1483.0,unsafe.Pointer,proflabel.go,1552.0,40.0,runtime,std,std,kubernetes/kubernetes,runtime/proflabel.go,delegate
96,"		msanRead(unsafe.Pointer(&p[0]), n)
","	if race.Enabled && n > 0 {
		race.ReadRange(unsafe.Pointer(&p[0]), n)
	}
	if msanenabled && n > 0 {
		msanRead(unsafe.Pointer(&p[0]), n)
	}
	return
}

// For testing: clients can set this flag to force
",220.0,11.0,4839.0,unsafe.Pointer,syscall_unix.go,8502.0,369.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_unix.go,delegate
97,"	psm := (*[2]byte)(unsafe.Pointer(&sa.raw.Psm))
","}

func (sa *SockaddrL2) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_BLUETOOTH
	psm := (*[2]byte)(unsafe.Pointer(&sa.raw.Psm))
	psm[0] = byte(sa.PSM)
	psm[1] = byte(sa.PSM >> 8)
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Bdaddr[i] = sa.Addr[len(sa.Addr)-1-i]
	}
",499.0,19.0,12973.0,unsafe.Pointer,syscall_linux.go,62378.0,2100.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-byteslice
98,"		pp := (*RawSockaddrVM)(unsafe.Pointer(rsa))
","		}
		return sa, nil

	case AF_VSOCK:
		pp := (*RawSockaddrVM)(unsafe.Pointer(rsa))
		sa := &SockaddrVM{
			CID:  pp.Cid,
			Port: pp.Port,
		}
		return sa, nil
",913.0,25.0,26231.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
99,"		adjustpointer(adjinfo, unsafe.Pointer(&d.fn))
","	// We need to do this first because we need to adjust the
	// defer.link fields so we always work on the new stack.
	adjustpointer(adjinfo, unsafe.Pointer(&gp._defer))
	for d := gp._defer; d != nil; d = d.link {
		adjustpointer(adjinfo, unsafe.Pointer(&d.fn))
		adjustpointer(adjinfo, unsafe.Pointer(&d.sp))
		adjustpointer(adjinfo, unsafe.Pointer(&d._panic))
		adjustpointer(adjinfo, unsafe.Pointer(&d.link))
		adjustpointer(adjinfo, unsafe.Pointer(&d.varp))
		adjustpointer(adjinfo, unsafe.Pointer(&d.fd))
",735.0,25.0,21700.0,unsafe.Pointer,stack.go,40023.0,1317.0,runtime,std,std,kubernetes/kubernetes,runtime/stack.go,delegate
100,"			pp := (*RawSockaddrL2)(unsafe.Pointer(rsa))
","		}
		// only BTPROTO_L2CAP and BTPROTO_RFCOMM can accept connections
		switch proto {
		case BTPROTO_L2CAP:
			pp := (*RawSockaddrL2)(unsafe.Pointer(rsa))
			sa := &SockaddrL2{
				PSM:      pp.Psm,
				CID:      pp.Cid,
				Addr:     pp.Bdaddr,
				AddrType: pp.Bdaddr_type,
",927.0,26.0,26579.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
101,"	scanframe := func(frame *stkframe, unused unsafe.Pointer) bool {
","		scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)
	}

	// Scan the stack. Accumulate a list of stack objects.
	scanframe := func(frame *stkframe, unused unsafe.Pointer) bool {
		scanframeworker(frame, &state, gcw)
		return true
	}
	gentraceback(^uintptr(0), ^uintptr(0), 0, gp, 0, nil, 0x7fffffff, scanframe, nil, 0)

",735.0,43.0,22966.0,unsafe.Pointer,mgcmark.go,47620.0,1585.0,runtime,std,std,kubernetes/kubernetes,runtime/mgcmark.go,unused
102,"			memclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)
","	})

	if s != nil {
		if needzero && s.needzero != 0 {
			memclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)
		}
		s.needzero = 0
	}
	return s
}
",876.0,24.0,30280.0,unsafe.Pointer,mheap.go,62971.0,1950.0,runtime,std,std,kubernetes/kubernetes,runtime/mheap.go,delegate
103,"	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
","	return msgs, nil
}

func socketControlMessageHeaderAndData(b []byte) (*Cmsghdr, []byte, error) {
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	if h.Len < SizeofCmsghdr || uint64(h.Len) > uint64(len(b)) {
		return nil, nil, EINVAL
	}
	return h, b[cmsgAlignOf(SizeofCmsghdr):h.Len], nil
}
",55.0,17.0,1537.0,unsafe.Pointer,sockcmsg_unix.go,2619.0,92.0,syscall,std,std,kubernetes/kubernetes,syscall/sockcmsg_unix.go,conversion-struct-byteslice
104,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Msync(b []byte, flags int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1768.0,9.0,43165.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
105,"	var _p2 unsafe.Pointer
","	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
",1059.0,9.0,25682.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
106,"	local     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal
","// A Pool must not be copied after first use.
type Pool struct {
	noCopy noCopy

	local     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal
	localSize uintptr        // size of the local array

	victim     unsafe.Pointer // local from previous cycle
	victimSize uintptr        // size of victims array

",47.0,11.0,1668.0,unsafe.Pointer,pool.go,8346.0,284.0,sync,std,std,kubernetes/kubernetes,sync/pool.go,data-structure
107,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_SETDOMAINNAME, uintptr(_p0), uintptr(len(p)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
",1330.0,8.0,32786.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
108,"	fd   unsafe.Pointer // funcdata for the function associated with the frame
","	// If openDefer is true, the fields below record values about the stack
	// frame and associated function that has the open-coded defer(s). sp
	// above will be the sp for the frame, and pc will be address of the
	// deferreturn call in the function.
	fd   unsafe.Pointer // funcdata for the function associated with the frame
	varp uintptr        // value of varp for the stack frame
	// framepc is the current pc associated with the stack frame. Together,
	// with sp above (which is the sp associated with the stack frame),
	// framepc/sp can be used as pc/sp pair to continue a stack trace via
	// gentraceback().
",879.0,6.0,31783.0,unsafe.Pointer,runtime2.go,38762.0,1036.0,runtime,std,std,kubernetes/kubernetes,runtime/runtime2.go,data-structure
109,"func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
	_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",551.0,48.0,13727.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
110,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Klogctl(typ int, buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",991.0,9.0,24376.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
111,"	tt := (*funcType)(unsafe.Pointer(t))
","func (t *rtype) In(i int) Type {
	if t.Kind() != Func {
		panic(""reflect: In of non-func type"")
	}
	tt := (*funcType)(unsafe.Pointer(t))
	return toType(tt.in()[i])
}

func (t *rtype) Key() Type {
	if t.Kind() != Map {
",572.0,19.0,14792.0,unsafe.Pointer,type.go,23990.0,925.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/type.go,conversion-struct-struct
112,"	return (*[1 << 16]method)(add(unsafe.Pointer(t), uintptr(t.moff), ""t.mcount > 0""))[:t.mcount:t.mcount]
","func (t *uncommonType) methods() []method {
	if t.mcount == 0 {
		return nil
	}
	return (*[1 << 16]method)(add(unsafe.Pointer(t), uintptr(t.moff), ""t.mcount > 0""))[:t.mcount:t.mcount]
}

func (t *uncommonType) exportedMethods() []method {
	if t.xcount == 0 {
		return nil
",629.0,31.0,18609.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
113,"	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
","	return msgs, nil
}

func socketControlMessageHeaderAndData(b []byte) (*Cmsghdr, []byte, error) {
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	if h.Len < SizeofCmsghdr || uint64(h.Len) > uint64(len(b)) {
		return nil, nil, EINVAL
	}
	return h, b[cmsgAlignOf(SizeofCmsghdr):h.Len], nil
}
",55.0,17.0,1534.0,unsafe.Pointer,sockcmsg_unix.go,2616.0,92.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/sockcmsg_unix.go,conversion-struct-byteslice
114,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mprotect(b []byte, prot int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1638.0,9.0,40022.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
115,"func sighandler(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g) {
","// The garbage collector may have stopped the world, so write barriers
// are not allowed.
//
//go:nowritebarrierrec
func sighandler(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g) {
	_g_ := getg()
	c := &sigctxt{info, ctxt}

	if sig == _SIGPROF {
		sigprof(c.sigpc(), c.sigsp(), c.siglr(), gp, _g_.m)
",525.0,48.0,15963.0,unsafe.Pointer,signal_unix.go,36808.0,1182.0,runtime,std,std,kubernetes/kubernetes,runtime/signal_unix.go,delegate
116,"	return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)
","	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)
}

func SetsockoptICMPv6Filter(fd, level, opt int, filter *ICMPv6Filter) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)
}

func SetsockoptLinger(fd, level, opt int, l *Linger) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
}
",346.0,35.0,8407.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/syscall_unix.go,delegate
117,"	_, _, e1 := RawSyscall6(SYS_PRLIMIT64, uintptr(pid), uintptr(resource), uintptr(unsafe.Pointer(newlimit)), uintptr(unsafe.Pointer(old)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func prlimit(pid int, resource int, newlimit *Rlimit, old *Rlimit) (err error) {
	_, _, e1 := RawSyscall6(SYS_PRLIMIT64, uintptr(pid), uintptr(resource), uintptr(unsafe.Pointer(newlimit)), uintptr(unsafe.Pointer(old)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1182.0,81.0,28900.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
118,"	return unsafe.Pointer(x ^ 0)
","//go:nosplit
//go:nocheckptr
func noescape(p unsafe.Pointer) unsafe.Pointer {
	x := uintptr(p)
	return unsafe.Pointer(x ^ 0)
}

func (b *Builder) copyCheck() {
	if b.addr == nil {
		// This hack works around a failing of Go's escape analysis
",30.0,8.0,889.0,unsafe.Pointer,builder.go,3562.0,125.0,strings,std,std,kubernetes/kubernetes,strings/builder.go,escape-analysis-escape
119,"	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))
","	if sa.Port < 0 || sa.Port > 0xFFFF {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_INET
	p := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))
	p[0] = byte(sa.Port >> 8)
	p[1] = byte(sa.Port)
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Addr[i] = sa.Addr[i]
	}
",398.0,17.0,10471.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
120,"		valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))
","	for _, ptab := range md.ptab {
		symName := resolveNameOff(unsafe.Pointer(md.types), ptab.name)
		t := (*_type)(unsafe.Pointer(md.types)).typeOff(ptab.typ)
		var val interface{}
		valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))
		(*valp)[0] = unsafe.Pointer(t)

		name := symName.name()
		if t.kind&kindMask == kindFunc {
			name = ""."" + name
",84.0,15.0,2832.0,unsafe.Pointer,plugin.go,4262.0,136.0,runtime,std,std,kubernetes/kubernetes,runtime/plugin.go,direct-memory-access
121,"	_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
	_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",542.0,103.0,13481.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
122,"	_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ustat(dev int, ubuf *Ustat_t) (err error) {
	_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2274.0,54.0,55521.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
123,"	r0, _, e1 := Syscall6(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)
","		_p2 = unsafe.Pointer(&dest[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_GETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",512.0,45.0,12092.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
124,"	_, _, e1 := RawSyscall(SYS_GETSOCKNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
	_, _, e1 := RawSyscall(SYS_GETSOCKNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2225.0,62.0,54418.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
125,"	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)
","	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPMreq)
}

func SetsockoptIPv6Mreq(fd, level, opt int, mreq *IPv6Mreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)
}

func SetsockoptICMPv6Filter(fd, level, opt int, filter *ICMPv6Filter) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(filter), SizeofICMPv6Filter)
}
",342.0,35.0,8253.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_unix.go,delegate
126,"		_p0 = unsafe.Pointer(&buf[0])
","
func keyctlDH(cmd int, arg2 *KeyctlDHParams, buf []byte) (ret int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(arg2)), uintptr(_p0), uintptr(len(buf)), 0, 0)
	ret = int(r0)
",294.0,8.0,7551.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
127,"func cmsgData(h *Cmsghdr) unsafe.Pointer {
","func CmsgSpace(datalen int) int {
	return cmsgAlignOf(SizeofCmsghdr) + cmsgAlignOf(datalen)
}

func cmsgData(h *Cmsghdr) unsafe.Pointer {
	return unsafe.Pointer(uintptr(unsafe.Pointer(h)) + uintptr(cmsgAlignOf(SizeofCmsghdr)))
}

// SocketControlMessage represents a socket control message.
type SocketControlMessage struct {
",53.0,26.0,1352.0,unsafe.Pointer,sockcmsg_unix.go,3281.0,120.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/sockcmsg_unix.go,pointer-arithmetic-memory-layout
128,"func memequal128(p, q unsafe.Pointer) bool {
","}
func memequal64(p, q unsafe.Pointer) bool {
	return *(*int64)(p) == *(*int64)(q)
}
func memequal128(p, q unsafe.Pointer) bool {
	return *(*[2]int64)(p) == *(*[2]int64)(q)
}
func f32equal(p, q unsafe.Pointer) bool {
	return *(*float32)(p) == *(*float32)(q)
}
",251.0,22.0,6482.0,unsafe.Pointer,alg.go,10428.0,389.0,runtime,std,std,kubernetes/kubernetes,runtime/alg.go,direct-memory-access
129,"func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrInet6, nil
}

func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {
	name := sa.Name
	n := len(name)
	if n >= len(sa.raw.Path) {
		return nil, 0, EINVAL
	}
",404.0,36.0,10600.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
130,"	fh := (*fileHandle)(unsafe.Pointer(&buf[0]))
","func NewFileHandle(handleType int32, handle []byte) FileHandle {
	const hdrSize = unsafe.Sizeof(fileHandle{})
	buf := make([]byte, hdrSize+uintptr(len(handle)))
	copy(buf[hdrSize:], handle)
	fh := (*fileHandle)(unsafe.Pointer(&buf[0]))
	fh.Type = handleType
	fh.Bytes = uint32(len(handle))
	return FileHandle{fh}
}

",2025.0,21.0,61519.0,unsafe.Pointer,syscall_linux.go,64817.0,2191.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
131,"func cgoInRange(p unsafe.Pointer, start, end uintptr) bool {
","
// cgoInRange reports whether p is between start and end.
//go:nosplit
//go:nowritebarrierrec
func cgoInRange(p unsafe.Pointer, start, end uintptr) bool {
	return start <= uintptr(p) && uintptr(p) < end
}

// cgoCheckResult is called to check the result parameter of an
// exported Go function. It panics if the result is or contains a Go
",660.0,18.0,21439.0,unsafe.Pointer,cgocall.go,21888.0,675.0,runtime,std,std,kubernetes/kubernetes,runtime/cgocall.go,pointer-arithmetic-memory-layout
132,"	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
","
func GetsockoptIPv6MTUInfo(fd, level, opt int) (*IPv6MTUInfo, error) {
	var value IPv6MTUInfo
	vallen := _Socklen(SizeofIPv6MTUInfo)
	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
	return &value, err
}

func GetsockoptICMPv6Filter(fd, level, opt int) (*ICMPv6Filter, error) {
	var value ICMPv6Filter
",272.0,35.0,6225.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/syscall_unix.go,delegate
133,"	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
","
func GetsockoptTCPInfo(fd, level, opt int) (*TCPInfo, error) {
	var value TCPInfo
	vallen := _Socklen(SizeofTCPInfo)
	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
	return &value, err
}

// GetsockoptString returns the string value of the socket option opt for the
// socket associated with fd at the given socket level.
",985.0,35.0,27495.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,delegate
134,"	var ptr unsafe.Pointer
","	return
}

func SendmsgN(fd int, p, oob []byte, to Sockaddr, flags int) (n int, err error) {
	var ptr unsafe.Pointer
	var salen _Socklen
	if to != nil {
		var err error
		ptr, salen, err = to.sockaddr()
		if err != nil {
",1367.0,9.0,40626.0,unsafe.Pointer,syscall_linux.go,64817.0,2191.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-basic
135,"	word unsafe.Pointer
","		hash uint32 // copy of typ.hash
		_    [4]byte
		fun  [100000]unsafe.Pointer // method table
	}
	word unsafe.Pointer
}

// mustBe panics if f's kind is not expected.
// Making this a method on flag instead of on Value
// (and embedding flag in Value) means that we can write
",196.0,6.0,5937.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,data-structure
136,"		_p0 = unsafe.Pointer(&b[0])
","
func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {
",1668.0,8.0,40552.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
137,"func (sa *SockaddrLinklayer) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	Addr     [8]byte
	raw      RawSockaddrLinklayer
}

func (sa *SockaddrLinklayer) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Ifindex < 0 || sa.Ifindex > 0x7fffffff {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_PACKET
	sa.raw.Protocol = sa.Protocol
",439.0,41.0,11349.0,unsafe.Pointer,syscall_linux.go,64817.0,2191.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
138,"		b.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))
","		// For testing, allow two barriers in the buffer. If
		// we only did one, then barriers of non-heap pointers
		// would be no-ops. This lets us combine a buffered
		// barrier with a flush at a later time.
		b.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))
	} else {
		b.end = start + uintptr(len(b.buf))*unsafe.Sizeof(b.buf[0])
	}

	if (b.end-b.next)%(wbBufEntryPointers*unsafe.Sizeof(b.buf[0])) != 0 {
",98.0,18.0,3625.0,unsafe.Pointer,mwbbuf.go,10311.0,311.0,runtime,std,std,kubernetes/kubernetes,runtime/mwbbuf.go,pointer-arithmetic-memory-layout
139,"	return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
","	}
	if len(tv) != 2 {
		return EINVAL
	}
	return futimesat(dirfd, path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
}

func Futimes(fd int, tv []Timeval) (err error) {
	// Believe it or not, this is the best we can do on Linux
	// (and is what glibc does).
",253.0,45.0,7180.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
140,"		tt := (*ptrType)(unsafe.Pointer(v.typ))
","		// The returned value's address is v's value.
		if ptr == nil {
			return Value{}
		}
		tt := (*ptrType)(unsafe.Pointer(v.typ))
		typ := tt.elem
		fl := v.flag&flagRO | flagIndir | flagAddr
		fl |= flag(typ.Kind())
		return Value{typ, ptr, fl}
	}
",248.0,19.0,7371.0,unsafe.Pointer,value.go,14113.0,486.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/value.go,conversion-struct-struct
141,"			if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {
","		}

		if sys.Unshareflags&CLONE_NEWUSER != 0 && sys.GidMappings != nil {
			dirfd := int(_AT_FDCWD)
			if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {
				goto childerror
			}
			r1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&setgroups[0])), uintptr(len(setgroups)))
			if err1 != 0 {
				goto childerror
",295.0,69.0,9320.0,unsafe.Pointer,exec_linux.go,18779.0,623.0,syscall,std,std,kubernetes/kubernetes,syscall/exec_linux.go,syscall
142,"	memmove(unsafe.Pointer(new.hi-ncopy), unsafe.Pointer(old.hi-ncopy), ncopy)
","		ncopy -= syncadjustsudogs(gp, used, &adjinfo)
	}

	// Copy the stack (or the rest of it) to the new location
	memmove(unsafe.Pointer(new.hi-ncopy), unsafe.Pointer(old.hi-ncopy), ncopy)

	// Adjust remaining structures that have pointers into stacks.
	// We have to do most of these before we traceback the new
	// stack because gentraceback uses them.
	adjustctxt(gp, &adjinfo)
",869.0,9.0,25611.0,unsafe.Pointer,stack.go,40023.0,1317.0,runtime,std,std,kubernetes/kubernetes,runtime/stack.go,pointer-arithmetic-memory-layout
143,"		_p0 = unsafe.Pointer(&b[0])
","
func Mlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MLOCK, uintptr(_p0), uintptr(len(b)), 0)
	if e1 != 0 {
",1747.0,8.0,42789.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
144,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(payload) > 0 {
		_p0 = unsafe.Pointer(&payload[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(_p0), uintptr(len(payload)), uintptr(arg5), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
",280.0,8.0,7161.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
145,"func WriteRange(addr unsafe.Pointer, len int) {
","
func ReadRange(addr unsafe.Pointer, len int) {
}

func WriteRange(addr unsafe.Pointer, len int) {
}

func Errors() int { return 0 }
",39.0,21.0,520.0,unsafe.Pointer,norace.go,602.0,42.0,internal/race,std,std,kubernetes/kubernetes,internal/race/norace.go,unused
146,"	var p unsafe.Pointer
","	return setsockopt(fd, level, opt, unsafe.Pointer(l), SizeofLinger)
}

func SetsockoptString(fd, level, opt int, s string) (err error) {
	var p unsafe.Pointer
	if len(s) > 0 {
		p = unsafe.Pointer(&[]byte(s)[0])
	}
	return setsockopt(fd, level, opt, p, uintptr(len(s)))
}
",354.0,7.0,8693.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_unix.go,delegate
147,"	r0, _, e1 := Syscall6(SYS_PERF_EVENT_OPEN, uintptr(unsafe.Pointer(attr)), uintptr(pid), uintptr(cpu), uintptr(groupFd), uintptr(flags), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func PerfEventOpen(attr *PerfEventAttr, pid int, cpu int, groupFd int, flags int) (fd int, err error) {
	r0, _, e1 := Syscall6(SYS_PERF_EVENT_OPEN, uintptr(unsafe.Pointer(attr)), uintptr(pid), uintptr(cpu), uintptr(groupFd), uintptr(flags), 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",1131.0,52.0,27556.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
148,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func keyctlDH(cmd int, arg2 *KeyctlDHParams, buf []byte) (ret int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",292.0,9.0,7508.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
149,"func memequal(a, b unsafe.Pointer, size uintptr) bool
","func sync_fastrand() uint32 { return fastrand() }

// in asm_*.s
//go:noescape
func memequal(a, b unsafe.Pointer, size uintptr) bool

// noescape hides a pointer from escape analysis.  noescape is
// the identity function but escape analysis doesn't think the
// output depends on the input.  noescape is inlined and currently
// compiles down to zero instructions.
",135.0,19.0,4767.0,unsafe.Pointer,stubs.go,13395.0,345.0,runtime,std,std,kubernetes/kubernetes,runtime/stubs.go,data-structure
150,"	r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error) {
	r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))
	n = int64(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",2050.0,57.0,49541.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
151,"		racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))
","// Both need to have zeroed hiter since the struct contains pointers.
func mapiterinit(t *maptype, h *hmap, it *hiter) {
	if raceenabled && h != nil {
		callerpc := getcallerpc()
		racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))
	}

	if h == nil || h.count == 0 {
		return
	}
",800.0,13.0,25459.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,delegate
152,"func (sa *SockaddrCAN) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	TxID    uint32
	raw     RawSockaddrCAN
}

func (sa *SockaddrCAN) sockaddr() (unsafe.Pointer, _Socklen, error) {
	if sa.Ifindex < 0 || sa.Ifindex > 0x7fffffff {
		return nil, 0, EINVAL
	}
	sa.raw.Family = AF_CAN
	sa.raw.Ifindex = int32(sa.Ifindex)
",595.0,35.0,16087.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
153,"func typedmemmove(t *rtype, dst, src unsafe.Pointer)
","func memmove(dst, src unsafe.Pointer, size uintptr)

// typedmemmove copies a value of type t to dst from src.
//go:noescape
func typedmemmove(t *rtype, dst, src unsafe.Pointer)

// typedmemmovepartial is like typedmemmove but assumes that
// dst and src point off bytes into the value and only copies size bytes.
//go:noescape
func typedmemmovepartial(t *rtype, dst, src unsafe.Pointer, off, size uintptr)
",2752.0,37.0,80829.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,data-structure
154,"		st := (*structtype)(unsafe.Pointer(typ))
","			}
			size -= checked
		}
	case kindStruct:
		st := (*structtype)(unsafe.Pointer(typ))
		for _, f := range st.fields {
			if off < f.typ.size {
				cgoCheckUsingType(f.typ, src, off, size)
			}
			src = add(src, f.typ.size)
",244.0,22.0,6582.0,unsafe.Pointer,cgocheck.go,6960.0,262.0,runtime,std,std,kubernetes/kubernetes,runtime/cgocheck.go,conversion-struct-struct
155,"	_, _, e1 := Syscall(SYS_FUTIMESAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)))
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_FUTIMESAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2386.0,60.0,58953.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
156,"	err := utimensat(AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
","	}
	if len(ts) != 2 {
		return EINVAL
	}
	err := utimensat(AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
	if err != ENOSYS {
		return err
	}
	// If the utimensat syscall isn't available (utimensat was added to Linux
	// in 2.6.22, Released, 8 July 2007) then fall back to utimes
",205.0,49.0,5841.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
157,"	r0, _, e1 := Syscall6(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(payload)), uintptr(ringid), 0)
","		_p2 = unsafe.Pointer(&payload[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_ADD_KEY, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(payload)), uintptr(ringid), 0)
	id = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",390.0,44.0,9879.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
158,"		defer atomic.StorePointer(&disableSplice, unsafe.Pointer(p))
","	}

	if p == nil {
		p = new(bool)
		defer atomic.StorePointer(&disableSplice, unsafe.Pointer(p))

		// F_GETPIPE_SZ was added in 2.6.35, which does not have the -EAGAIN bug.
		if _, _, errno := syscall.Syscall(unix.FcntlSyscall, uintptr(fds[0]), syscall.F_GETPIPE_SZ, 0); errno != 0 {
			*p = true
			destroyTempPipe(fds[0], fds[1])
",170.0,44.0,5229.0,unsafe.Pointer,splice_linux.go,5792.0,191.0,internal/poll,std,std,kubernetes/kubernetes,internal/poll/splice_linux.go,delegate
159,"		_p0 = unsafe.Pointer(&b[0])
","
func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(advice))
	if e1 != 0 {
",1594.0,8.0,38947.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
160,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Msync(b []byte, flags int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1771.0,9.0,43301.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
161,"		fn = unsafe.Pointer(funcPC(nilfunc))
","	var fn unsafe.Pointer
	if fv != nil {
		fn = unsafe.Pointer(fv.fn)
	} else {
		fn = unsafe.Pointer(funcPC(nilfunc))
	}
	gostartcall(gobuf, fn, unsafe.Pointer(fv))
}

// isShrinkStackSafe returns whether it's safe to attempt to shrink
",1063.0,7.0,32118.0,unsafe.Pointer,stack.go,40023.0,1317.0,runtime,std,std,kubernetes/kubernetes,runtime/stack.go,delegate
162,"		*(*uintptr)(unsafe.Pointer(&b.tags[wt])) = uintptr(unsafe.Pointer(*tagPtr))
","	// We arrange that the store here is always overwriting a nil,
	// so there is no need for a deletion barrier on b.tags[wt].
	wt := int(bw.tagCount() % uint32(len(b.tags)))
	if tagPtr != nil {
		*(*uintptr)(unsafe.Pointer(&b.tags[wt])) = uintptr(unsafe.Pointer(*tagPtr))
	}

	// Main record.
	// It has to fit in a contiguous section of the slice, so if it doesn't fit at the end,
	// leave a rewind marker (0) and start over at the beginning of the slice.
",352.0,14.0,12710.0,unsafe.Pointer,profbuf.go,18698.0,561.0,runtime,std,std,kubernetes/kubernetes,runtime/profbuf.go,direct-memory-access
163,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1556.0,8.0,38116.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
164,"	return setsockopt(fd, level, opt, unsafe.Pointer(&n), 4)
","}

func SetsockoptInt(fd, level, opt int, value int) (err error) {
	var n = int32(value)
	return setsockopt(fd, level, opt, unsafe.Pointer(&n), 4)
}

func SetsockoptInet4Addr(fd, level, opt int, value [4]byte) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(&value[0]), 4)
}
",330.0,35.0,7832.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_unix.go,delegate
165,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SENDTO, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
",2429.0,8.0,60014.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
166,"	adjustpointer(adjinfo, unsafe.Pointer(&gp._defer))
","func adjustdefers(gp *g, adjinfo *adjustinfo) {
	// Adjust pointers in the Defer structs.
	// We need to do this first because we need to adjust the
	// defer.link fields so we always work on the new stack.
	adjustpointer(adjinfo, unsafe.Pointer(&gp._defer))
	for d := gp._defer; d != nil; d = d.link {
		adjustpointer(adjinfo, unsafe.Pointer(&d.fn))
		adjustpointer(adjinfo, unsafe.Pointer(&d.sp))
		adjustpointer(adjinfo, unsafe.Pointer(&d._panic))
		adjustpointer(adjinfo, unsafe.Pointer(&d.link))
",733.0,24.0,21604.0,unsafe.Pointer,stack.go,40023.0,1317.0,runtime,std,std,kubernetes/kubernetes,runtime/stack.go,direct-memory-access
167,"	ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))
","	}
	if m.Header.Type != SCM_CREDENTIALS {
		return nil, EINVAL
	}
	ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))
	return &ucred, nil
}
",34.0,20.0,1001.0,unsafe.Pointer,sockcmsg_linux.go,1071.0,36.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/sockcmsg_linux.go,conversion-struct-struct
168,"	_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
","		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1065.0,45.0,25803.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
169,"func raceAcquire(addr unsafe.Pointer) {
",")

const raceenabled = false

func raceAcquire(addr unsafe.Pointer) {
}

func raceReleaseMerge(addr unsafe.Pointer) {
}

",15.0,22.0,310.0,unsafe.Pointer,race0.go,509.0,25.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/race0.go,unused
170,"	_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Settimeofday(tv *Timeval) (err error) {
	_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1368.0,50.0,33576.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
171,"	_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
","	_p0, err = BytePtrFromString(target)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1513.0,42.0,37086.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
172,"		p := (*[2]byte)(unsafe.Pointer(&pp.Port))
","
	case AF_INET6:
		pp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))
		sa := new(SockaddrInet6)
		p := (*[2]byte)(unsafe.Pointer(&pp.Port))
		sa.Port = int(p[0])<<8 + int(p[1])
		sa.ZoneId = pp.Scope_id
		for i := 0; i < len(sa.Addr); i++ {
			sa.Addr[i] = pp.Addr[i]
		}
",904.0,18.0,26021.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-byteslice
173,"			sa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))
","		switch pp.Addrtype {
		case TIPC_SERVICE_RANGE:
			sa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))
		case TIPC_SERVICE_ADDR:
			sa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))
		case TIPC_SOCKET_ADDR:
			sa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))
		default:
			return nil, EINVAL
		}
",981.0,32.0,27874.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
174,"	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
","	return &value, err
}

func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
}

func SetsockoptPacketMreq(fd, level, opt int, mreq *PacketMreq) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
}
",1156.0,35.0,32304.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,delegate
175,"	_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatfs(fd int, buf *Statfs_t) (err error) {
	_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",132.0,55.0,3382.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
176,"			raceAcquire(unsafe.Pointer(&ioSync))
","		if n > 0 {
			raceWriteRange(unsafe.Pointer(&p[0]), n)
		}
		if err == nil {
			raceAcquire(unsafe.Pointer(&ioSync))
		}
	}
	return
}

",163.0,15.0,3573.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/syscall_unix.go,delegate
177,"	*(*uint16)(unsafe.Pointer(&b[6:8][0])) = rr.Header.Flags
","func (rr *NetlinkRouteRequest) toWireFormat() []byte {
	b := make([]byte, rr.Header.Len)
	*(*uint32)(unsafe.Pointer(&b[0:4][0])) = rr.Header.Len
	*(*uint16)(unsafe.Pointer(&b[4:6][0])) = rr.Header.Type
	*(*uint16)(unsafe.Pointer(&b[6:8][0])) = rr.Header.Flags
	*(*uint32)(unsafe.Pointer(&b[8:12][0])) = rr.Header.Seq
	*(*uint32)(unsafe.Pointer(&b[12:16][0])) = rr.Header.Pid
	b[16] = byte(rr.Data.Family)
	return b
}
",33.0,12.0,942.0,unsafe.Pointer,netlink_linux.go,4777.0,179.0,syscall,std,std,kubernetes/kubernetes,syscall/netlink_linux.go,direct-memory-access
178,"func resolveReflectText(ptr unsafe.Pointer) textOff {
","
// resolveReflectText adds a function pointer to the reflection lookup map in
// the runtime. It returns a new textOff that can be used to refer to the
// pointer.
func resolveReflectText(ptr unsafe.Pointer) textOff {
	return textOff(addReflectOff(ptr))
}

type nameOff int32 // offset to a name
type typeOff int32 // offset to an *rtype
",674.0,28.0,20582.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,delegate
179,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrRFCOMM, nil
","func (sa *SockaddrRFCOMM) sockaddr() (unsafe.Pointer, _Socklen, error) {
	sa.raw.Family = AF_BLUETOOTH
	sa.raw.Channel = sa.Channel
	sa.raw.Bdaddr = sa.Addr
	return unsafe.Pointer(&sa.raw), SizeofSockaddrRFCOMM, nil
}

// SockaddrCAN implements the Sockaddr interface for AF_CAN type sockets.
// The RxID and TxID fields are used for transport protocol addressing in
// (CAN_TP16, CAN_TP20, CAN_MCNET, and CAN_ISOTP), they can be left with
",550.0,8.0,14633.0,unsafe.Pointer,syscall_linux.go,62378.0,2100.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
180,"		tt := (*ptrType)(unsafe.Pointer(v.typ))
","		// The returned value's address is v's value.
		if ptr == nil {
			return Value{}
		}
		tt := (*ptrType)(unsafe.Pointer(v.typ))
		typ := tt.elem
		fl := v.flag&flagRO | flagIndir | flagAddr
		fl |= flag(typ.Kind())
		return Value{typ, ptr, fl}
	}
",814.0,19.0,25396.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,conversion-struct-struct
181,"	err := ioctl(fd, req, uintptr(unsafe.Pointer(&value)))
","}

func IoctlGetTermios(fd int, req uint) (*Termios, error) {
	var value Termios
	err := ioctl(fd, req, uintptr(unsafe.Pointer(&value)))
	return &value, err
}
",63.0,31.0,1966.0,unsafe.Pointer,ioctl.go,2044.0,65.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/ioctl.go,delegate
182,"	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
","
// SetsockoptSockFprog attaches a classic BPF or an extended BPF program to a
// socket to filter incoming packets.  See 'man 7 socket' for usage information.
func SetsockoptSockFprog(fd, level, opt int, fprog *SockFprog) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
}

func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {
",1099.0,35.0,31106.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/syscall_linux.go,delegate
183,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrALG, nil
","
	copy(sa.raw.Type[:], typ)
	copy(sa.raw.Name[:], name)

	return unsafe.Pointer(&sa.raw), SizeofSockaddrALG, nil
}

// SockaddrVM implements the Sockaddr interface for AF_VSOCK type sockets.
// SockaddrVM provides access to Linux VM sockets: a mechanism that enables
// bidirectional communication between a hypervisor and its guest virtual
",690.0,8.0,19506.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
184,"	_, _, e1 := Syscall(SYS_CLOCK_GETTIME, uintptr(clockid), uintptr(unsafe.Pointer(time)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockGettime(clockid int32, time *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_CLOCK_GETTIME, uintptr(clockid), uintptr(unsafe.Pointer(time)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",502.0,66.0,12659.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
185,"func newosproc0(stacksize uintptr, fn unsafe.Pointer) {
","}

// Version of newosproc that doesn't require a valid G.
//go:nosplit
func newosproc0(stacksize uintptr, fn unsafe.Pointer) {
	stack := sysAlloc(stacksize, &memstats.stacks_sys)
	if stack == nil {
		write(2, unsafe.Pointer(&failallocatestack[0]), int32(len(failallocatestack)))
		exit(1)
	}
",167.0,38.0,4945.0,unsafe.Pointer,os_linux.go,13478.0,500.0,runtime,std,std,kubernetes/kubernetes,runtime/os_linux.go,delegate
186,"		_p0 = unsafe.Pointer(&buf[0])
","
func Getcwd(buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETCWD, uintptr(_p0), uintptr(len(buf)), 0)
	n = int(r0)
",185.0,8.0,4704.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
187,"	err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)
","
func GetsockoptInt(fd, level, opt int) (value int, err error) {
	var n int32
	vallen := _Socklen(4)
	err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)
	return int(n), err
}

func GetsockoptInet4Addr(fd, level, opt int) (value [4]byte, err error) {
	vallen := _Socklen(4)
",244.0,34.0,5455.0,unsafe.Pointer,syscall_unix.go,11034.0,430.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_unix.go,delegate
188,"	prototype := *(**sliceType)(unsafe.Pointer(&islice))
","	}

	// Make a slice type.
	var islice interface{} = ([]unsafe.Pointer)(nil)
	prototype := *(**sliceType)(unsafe.Pointer(&islice))
	slice := *prototype
	slice.tflag = 0
	slice.str = resolveReflectName(newName(s, """", false))
	slice.hash = fnv1(typ.hash, '[')
	slice.elem = typ
",2297.0,29.0,63856.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
189,"	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
","	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

func SetsockoptTpacketReq3(fd, level, opt int, tp *TpacketReq3) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

// Keyctl Commands (http://man7.org/linux/man-pages/man2/keyctl.2.html)

// KeyctlInt calls keyctl commands in which each argument is an int.
",1115.0,35.0,31645.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,delegate
190,"	return unsafe.Pointer(&sa.raw), sl, nil
","		// Don't count trailing NUL for abstract address.
		sl--
	}

	return unsafe.Pointer(&sa.raw), sl, nil
}

// SockaddrLinklayer implements the Sockaddr interface for AF_PACKET type sockets.
type SockaddrLinklayer struct {
	Protocol uint16
",425.0,8.0,11058.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
191,"	ptr unsafe.Pointer
","	typ *rtype

	// Pointer-valued data or, if flagIndir is set, pointer to data.
	// Valid when either flagIndir is set or typ.pointers() is true.
	ptr unsafe.Pointer

	// flag holds metadata about the value.
	// The lowest bits are flag bits:
	//	- flagStickyRO: obtained via unexported not embedded field, so read-only
	//	- flagEmbedRO: obtained via unexported embedded field, so read-only
",42.0,5.0,1528.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,data-structure
192,"	tt := (*mapType)(unsafe.Pointer(v.typ))
","// It panics if v's Kind is not Map.
// It returns an empty slice if v represents a nil map.
func (v Value) MapKeys() []Value {
	v.mustBe(Map)
	tt := (*mapType)(unsafe.Pointer(v.typ))
	keyType := tt.key

	fl := v.flag.ro() | flag(keyType.Kind())

	m := v.pointer()
",1182.0,18.0,36410.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,conversion-struct-struct
193,"	var p unsafe.Pointer
","		panic(""reflect: send on recv-only channel"")
	}
	x.mustBeExported()
	x = x.assignTo(""reflect.Value.Send"", tt.elem, nil)
	var p unsafe.Pointer
	if x.flag&flagIndir != 0 {
		p = x.ptr
	} else {
		p = unsafe.Pointer(&x.ptr)
	}
",1513.0,7.0,46157.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,delegate
194,"	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getgroups(n int, list *_Gid_t) (nn int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
	nn = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",521.0,60.0,12920.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
195,"	_, _, e1 := Syscall(SYS_REMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
","	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_REMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1240.0,46.0,30507.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
196,"		RawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))
","			if err := writeUidGidMappings(pid, sys); err != nil {
				err2 = err.(Errno)
			}
		}
		RawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))
		Close(p[1])
	}

	return pid, 0
}
",93.0,47.0,3617.0,unsafe.Pointer,exec_linux.go,18779.0,623.0,syscall,std,std,kubernetes/kubernetes,syscall/exec_linux.go,syscall
197,"func parkunlock_c(gp *g, lock unsafe.Pointer) bool {
","	}
	return true
}

func parkunlock_c(gp *g, lock unsafe.Pointer) bool {
	unlock((*mutex)(lock))
	return true
}

// park continuation on g0.
",2662.0,30.0,76378.0,unsafe.Pointer,proc.go,153166.0,5418.0,runtime,std,std,kubernetes/kubernetes,runtime/proc.go,conversion-struct-struct
198,"	_, _, e1 := Syscall(SYS_STATFS, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_STATFS, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2116.0,41.0,51445.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
199,"		_p1 = unsafe.Pointer(&_zero)
","	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_LISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))
	sz = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1044.0,8.0,25558.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
200,"		pp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))
","		sa.Name = string(bytes)
		return sa, nil

	case AF_INET:
		pp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))
		sa := new(SockaddrInet4)
		p := (*[2]byte)(unsafe.Pointer(&pp.Port))
		sa.Port = int(p[0])<<8 + int(p[1])
		for i := 0; i < len(sa.Addr); i++ {
			sa.Addr[i] = pp.Addr[i]
",892.0,28.0,25685.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
201,"func memhash16(p unsafe.Pointer, h uintptr) uintptr {
","func memhash8(p unsafe.Pointer, h uintptr) uintptr {
	return memhash(p, h, 1)
}

func memhash16(p unsafe.Pointer, h uintptr) uintptr {
	return memhash(p, h, 2)
}

func memhash128(p unsafe.Pointer, h uintptr) uintptr {
	return memhash(p, h, 16)
",45.0,17.0,790.0,unsafe.Pointer,alg.go,10428.0,389.0,runtime,std,std,kubernetes/kubernetes,runtime/alg.go,delegate
202,"		err = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))
","	// boundary and not get the bytes leading up to the page
	// boundary.
	n := 0
	if addr%SizeofPtr != 0 {
		err = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return 0, err
		}
		n += copy(out, buf[addr%SizeofPtr:])
		out = out[n:]
",1368.0,54.0,40643.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/syscall_linux.go,pointer-arithmetic-memory-layout
203,"	err = ptrace(PTRACE_GETEVENTMSG, pid, 0, uintptr(unsafe.Pointer(&data)))
","}

func PtraceGetEventMsg(pid int) (msg uint, err error) {
	var data _C_long
	err = ptrace(PTRACE_GETEVENTMSG, pid, 0, uintptr(unsafe.Pointer(&data)))
	msg = uint(data)
	return
}

func PtraceCont(pid int, signal int) (err error) {
",1481.0,50.0,43756.0,unsafe.Pointer,syscall_linux.go,62378.0,2100.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/syscall_linux.go,delegate
204,"		uintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&
","// AnyOverlap reports whether x and y share memory at any (not necessarily
// corresponding) index. The memory beyond the slice length is ignored.
func AnyOverlap(x, y []byte) bool {
	return len(x) > 0 && len(y) > 0 &&
		uintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&
		uintptr(unsafe.Pointer(&y[0])) <= uintptr(unsafe.Pointer(&x[len(x)-1]))
}

// InexactOverlap reports whether x and y share memory at any non-corresponding
// index. The memory beyond the slice length is ignored. Note that x and y can
",19.0,10.0,664.0,unsafe.Pointer,aliasing.go,1312.0,34.0,crypto/internal/subtle,std,std,kubernetes/kubernetes,crypto/internal/subtle/aliasing.go,pointer-arithmetic-memory-layout
205,"	SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Signalfd(fd int, mask *Sigset_t, flags int) {
	SyscallNoError(SYS_SIGNALFD4, uintptr(fd), uintptr(unsafe.Pointer(mask)), uintptr(flags))
	return
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

",1385.0,52.0,33880.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,delegate
206,"		err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
","
	// Trailing edge.
	if len(data) > 0 {
		var buf [SizeofPtr]byte
		err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return n, err
		}
		copy(buf[0:], data)
		word := *((*uintptr)(unsafe.Pointer(&buf[0])))
",1439.0,54.0,42509.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,delegate
207,"		pp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))
","
func anyToSockaddr(rsa *RawSockaddrAny) (Sockaddr, error) {
	switch rsa.Addr.Family {
	case AF_NETLINK:
		pp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))
		sa := new(SockaddrNetlink)
		sa.Family = pp.Family
		sa.Pad = pp.Pad
		sa.Pid = pp.Pid
		sa.Groups = pp.Groups
",445.0,30.0,10740.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,conversion-struct-struct
208,"			(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc
","		if pc == 0 || n >= max {
			break
		}
		if pcbuf != nil {
			(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc
		}
		if printing {
			if cgoSymbolizer == nil {
				print(""non-Go function at pc="", hex(pc), ""\n"")
			} else {
",646.0,23.0,23034.0,unsafe.Pointer,traceback.go,45165.0,1340.0,runtime,std,std,kubernetes/kubernetes,runtime/traceback.go,direct-memory-access
209,"	RawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))
","		uintptr(unsafe.Pointer(&envv[0])))

childerror:
	// send error code on pipe
	RawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))
	for {
		RawSyscall(SYS_EXIT, 253, 0, 0)
	}
}

",525.0,46.0,16272.0,unsafe.Pointer,exec_linux.go,18779.0,623.0,syscall,std,std,kubernetes/kubernetes,syscall/exec_linux.go,syscall
210,"		_p0 = unsafe.Pointer(&p[0])
","
func Pread(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)
",1976.0,8.0,47944.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
211,"			v.ptr = *(*unsafe.Pointer)(add(ptr, off, ""1-ptr""))
","				typedmemmove(typ, v.ptr, add(ptr, off, ""typ.size > 0""))
			}
			v.flag |= flagIndir
		} else {
			v.ptr = *(*unsafe.Pointer)(add(ptr, off, ""1-ptr""))
		}
		in = append(in, v)
		off += typ.size
	}

",542.0,14.0,16685.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,pointer-arithmetic-memory-layout
212,"			return unsafe.Pointer(&zeroVal[0]), false
","				if k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {
					return add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize)), true
				}
			}
			return unsafe.Pointer(&zeroVal[0]), false
		}
		// long key, try not to do more comparisons than necessary
		keymaybe := uintptr(bucketCnt)
		for i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {
			k := (*stringStruct)(kptr)
",136.0,10.0,4213.0,unsafe.Pointer,map_faststr.go,14153.0,476.0,runtime,std,std,kubernetes/kubernetes,runtime/map_faststr.go,direct-memory-access
213,"func chanlen(unsafe.Pointer) int
","	return v.kind()
}

// implemented in runtime:
func chanlen(unsafe.Pointer) int
func maplen(unsafe.Pointer) int

// Len returns v's length.
// It panics if v's Kind is not Array, Chan, Map, Slice, or String.
func (v Value) Len() int {
",321.0,13.0,9540.0,unsafe.Pointer,value.go,14113.0,486.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/value.go,data-structure
214,"	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
","// control message for sending to another process.
func UnixRights(fds ...int) []byte {
	datalen := len(fds) * 4
	b := make([]byte, CmsgSpace(datalen))
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	h.Level = SOL_SOCKET
	h.Type = SCM_RIGHTS
	h.SetLen(CmsgLen(datalen))
	for i, fd := range fds {
		*(*int32)(h.data(4 * uintptr(i))) = int32(fd)
",67.0,17.0,1939.0,unsafe.Pointer,sockcmsg_unix.go,2616.0,92.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/sockcmsg_unix.go,conversion-struct-byteslice
215,"		_p1 = unsafe.Pointer(&dest[0])
","		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_LISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))
	sz = int(r0)
",1012.0,8.0,24759.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
216,"	_, _, e1 := Syscall6(SYS_FCHOWNAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall6(SYS_FCHOWNAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",653.0,60.0,16477.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
217,"		_p0 = unsafe.Pointer(&events[0])
","
func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(events) > 0 {
		_p0 = unsafe.Pointer(&events[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(_p0), uintptr(len(events)), uintptr(msec), 0, 0)
	n = int(r0)
",1786.0,8.0,43505.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
218,"func runtime_getProfLabel() unsafe.Pointer
","// runtime_setProfLabel is defined in runtime/proflabel.go.
func runtime_setProfLabel(labels unsafe.Pointer)

// runtime_getProfLabel is defined in runtime/proflabel.go.
func runtime_getProfLabel() unsafe.Pointer

// SetGoroutineLabels sets the current goroutine's labels to match ctx.
// A new goroutine inherits the labels of the goroutine that created it.
// This is a lower-level API than Do, which should be used instead when possible.
func SetGoroutineLabels(ctx context.Context) {
",19.0,28.0,507.0,unsafe.Pointer,runtime.go,1532.0,41.0,runtime/pprof,std,std,kubernetes/kubernetes,runtime/pprof/runtime.go,data-structure
219,"	_, _, e1 := Syscall(SYS_UTIMES, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UTIMES, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2416.0,41.0,59662.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
220,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrCAN, nil
","	tx := (*[4]byte)(unsafe.Pointer(&sa.TxID))
	for i := 0; i < 4; i++ {
		sa.raw.Addr[i+4] = tx[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrCAN, nil
}

// SockaddrALG implements the Sockaddr interface for AF_ALG type sockets.
// SockaddrALG enables userspace access to the Linux kernel's cryptography
// subsystem. The Type and Name fields specify which type of hash or cipher
",591.0,8.0,15973.0,unsafe.Pointer,syscall_linux.go,64817.0,2191.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
221,"	*(*uint16)(unsafe.Pointer(&sa.raw[0])) = AF_PPPOX
","	if len(sa.Dev) > IFNAMSIZ-1 {
		return nil, 0, EINVAL
	}

	*(*uint16)(unsafe.Pointer(&sa.raw[0])) = AF_PPPOX
	// This next field is in host-endian byte order. We can't use the
	// same unsafe pointer cast as above, because this value is not
	// 32-bit aligned and some architectures don't allow unaligned
	// access.
	//
",757.0,12.0,21517.0,unsafe.Pointer,syscall_linux.go,62378.0,2100.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-basic
222,"	var _p1 unsafe.Pointer
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
",1029.0,9.0,25207.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
223,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MSYNC, uintptr(_p0), uintptr(len(b)), uintptr(flags))
	if e1 != 0 {
		err = errnoErr(e1)
	}
",1684.0,8.0,41002.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
224,"			mheap_.spanalloc.free(unsafe.Pointer(pp.mspancache.buf[i]))
","	}
	systemstack(func() {
		for i := 0; i < pp.mspancache.len; i++ {
			// Safe to call since the world is stopped.
			mheap_.spanalloc.free(unsafe.Pointer(pp.mspancache.buf[i]))
		}
		pp.mspancache.len = 0
		pp.pcache.flush(&mheap_.pages)
	})
	freemcache(pp.mcache)
",4118.0,25.0,119546.0,unsafe.Pointer,proc.go,153166.0,5418.0,runtime,std,std,kubernetes/kubernetes,runtime/proc.go,delegate
225,"	err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)
","
func GetsockoptInt(fd, level, opt int) (value int, err error) {
	var n int32
	vallen := _Socklen(4)
	err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)
	return int(n), err
}

func GetsockoptInet4Addr(fd, level, opt int) (value [4]byte, err error) {
	vallen := _Socklen(4)
",245.0,34.0,5401.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_unix.go,delegate
226,"	err := getsockopt(fd, level, opt, unsafe.Pointer(&tv), &vallen)
","
func GetsockoptTimeval(fd, level, opt int) (*Timeval, error) {
	var tv Timeval
	vallen := _Socklen(unsafe.Sizeof(tv))
	err := getsockopt(fd, level, opt, unsafe.Pointer(&tv), &vallen)
	return &tv, err
}

func GetsockoptUint64(fd, level, opt int) (value uint64, err error) {
	var n uint64
",292.0,35.0,6923.0,unsafe.Pointer,syscall_unix.go,11034.0,430.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_unix.go,delegate
227,"	_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Fstatfs(fd int, buf *Statfs_t) (err error) {
	_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1937.0,55.0,47440.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
228,"	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func getgroups(n int, list *_Gid_t) (nn int, err error) {
	r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
	nn = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",1490.0,60.0,35466.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
229,"		raceReleaseMerge(unsafe.Pointer(&ioSync))
","
func Writev(fd int, iovs [][]byte) (n int, err error) {
	iovecs := bytes2iovec(iovs)
	if raceenabled {
		raceReleaseMerge(unsafe.Pointer(&ioSync))
	}
	n, err = writev(fd, iovecs)
	writevRacedetect(iovecs, n)
	return n, err
}
",1843.0,19.0,56977.0,unsafe.Pointer,syscall_linux.go,64817.0,2191.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/syscall_linux.go,delegate
230,"			if !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {
","			}
		}

		if callback != nil {
			if !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {
				return n
			}
		}

		if pcbuf != nil {
",334.0,37.0,12049.0,unsafe.Pointer,traceback.go,45165.0,1340.0,runtime,std,std,kubernetes/kubernetes,runtime/traceback.go,escape-analysis-escape
231,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrandom(buf []byte, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",849.0,9.0,21024.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
232,"func mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer {
","	""runtime/internal/sys""
	""unsafe""
)

func mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer {
	if raceenabled && h != nil {
		callerpc := getcallerpc()
		racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapaccess1_faststr))
	}
	if h == nil || h.count == 0 {
",12.0,56.0,223.0,unsafe.Pointer,map_faststr.go,14153.0,476.0,runtime,std,std,kubernetes/kubernetes,runtime/map_faststr.go,direct-memory-access
233,"			repr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)
","			repr = append(repr, "", ""...)
		}
		if ft.IsVariadic() && i == int(ft.inCount)-1 {
			repr = append(repr, ""...""...)
			repr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)
		} else {
			repr = append(repr, t.String()...)
		}
	}
	repr = append(repr, ')')
",2054.0,36.0,57343.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
234,"func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {
","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
",619.0,45.0,15778.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
235,"	tracebackdefers(gp, adjustframe, noescape(unsafe.Pointer(adjinfo)))
","
	// Adjust defer argument blocks the same way we adjust active stack frames.
	// Note: this code is after the loop above, so that if a defer record is
	// stack allocated, we work on the copy in the new stack.
	tracebackdefers(gp, adjustframe, noescape(unsafe.Pointer(adjinfo)))
}

func adjustpanics(gp *g, adjinfo *adjustinfo) {
	// Panics are on stack and already adjusted.
	// Update pointer to head of list in G.
",746.0,43.0,22210.0,unsafe.Pointer,stack.go,40023.0,1317.0,runtime,std,std,kubernetes/kubernetes,runtime/stack.go,escape-analysis-escape
236,"	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2171.0,43.0,52838.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
237,"	_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockGetres(clockid int32, res *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",479.0,65.0,11921.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
238,"	_, _, e1 := Syscall(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",44.0,59.0,1083.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
239,"	_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
","		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_SETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1414.0,44.0,34611.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
240,"	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
","
func GetsockoptTpacketStatsV3(fd, level, opt int) (*TpacketStatsV3, error) {
	var value TpacketStatsV3
	vallen := _Socklen(SizeofTpacketStatsV3)
	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
	return &value, err
}

func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
",1084.0,35.0,30477.0,unsafe.Pointer,syscall_linux.go,62378.0,2100.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/syscall_linux.go,delegate
241,"func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
	_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",2222.0,25.0,54219.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
242,"func typedmemclrpartial(t *rtype, ptr unsafe.Pointer, off, size uintptr)
","
// typedmemclrpartial is like typedmemclr but assumes that
// dst points off bytes into the value and only clears size bytes.
//go:noescape
func typedmemclrpartial(t *rtype, ptr unsafe.Pointer, off, size uintptr)

// typedslicecopy copies a slice of elemType values from src to dst,
// returning the number of elements copied.
//go:noescape
func typedslicecopy(elemType *rtype, dst, src sliceHeader) int
",2766.0,38.0,81363.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,data-structure
243,"		atomic.StorepNoWB(unsafe.Pointer(&pd.wt.f), nil) // full memory barrier between store to wd and load of wg in netpollunblock
","		if pd.wd <= 0 || pd.wt.f == nil && !read {
			throw(""runtime: inconsistent write deadline"")
		}
		pd.wd = -1
		atomic.StorepNoWB(unsafe.Pointer(&pd.wt.f), nil) // full memory barrier between store to wd and load of wg in netpollunblock
		wg = netpollunblock(pd, 'w', false)
	}
	unlock(&pd.lock)
	if rg != nil {
		netpollgoready(rg, 0)
",486.0,20.0,13675.0,unsafe.Pointer,netpoll.go,14809.0,531.0,runtime,std,std,kubernetes/kubernetes,runtime/netpoll.go,delegate
244,"func Casp1(ptr *unsafe.Pointer, old, new unsafe.Pointer) bool
","//go:noescape
func Cas(ptr *uint32, old, new uint32) bool

// NO go:noescape annotation; see atomic_pointer.go.
func Casp1(ptr *unsafe.Pointer, old, new unsafe.Pointer) bool

//go:noescape
func Casuintptr(ptr *uintptr, old, new uintptr) bool

//go:noescape
",15.0,16.0,322.0,unsafe.Pointer,stubs.go,795.0,35.0,runtime/internal/atomic,std,std,kubernetes/kubernetes,runtime/internal/atomic/stubs.go,data-structure
245,"			memclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)
","				*bitp = bitPointerAll | bitScanAll
				bitp = add1(bitp)
			}
		} else {
			memclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)
		}
		h = hNext
		nw -= anw
	}
}
",822.0,24.0,28076.0,unsafe.Pointer,mbitmap.go,69152.0,2083.0,runtime,std,std,kubernetes/kubernetes,runtime/mbitmap.go,delegate
246,"			sysFree(unsafe.Pointer(end), endLen, nil)
","		sysFree(unsafe.Pointer(p), pAligned-p, nil)
		end := pAligned + size
		endLen := (p + size + align) - end
		if endLen > 0 {
			sysFree(unsafe.Pointer(end), endLen, nil)
		}
		return unsafe.Pointer(pAligned), size
	}
}

",820.0,11.0,31752.0,unsafe.Pointer,malloc.go,49481.0,1422.0,runtime,std,std,kubernetes/kubernetes,runtime/malloc.go,delegate
247,"		_p0 = unsafe.Pointer(&p[0])
","
func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
",605.0,8.0,15414.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
248,"	tt := (*arrayType)(unsafe.Pointer(t))
","func (t *rtype) Len() int {
	if t.Kind() != Array {
		panic(""reflect: Len of non-array type "" + t.String())
	}
	tt := (*arrayType)(unsafe.Pointer(t))
	return int(tt.len)
}

func (t *rtype) NumField() int {
	if t.Kind() != Struct {
",967.0,20.0,26961.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
249,"	_, _, e1 := Syscall(SYS_UTIME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UTIME, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2492.0,40.0,61694.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
250,"func racewriterangepc(addr unsafe.Pointer, sz, callerpc, pc uintptr)        { throw(""race"") }
","func racemapshadow(addr unsafe.Pointer, size uintptr)                       { throw(""race"") }
func racewritepc(addr unsafe.Pointer, callerpc, pc uintptr)                 { throw(""race"") }
func racereadpc(addr unsafe.Pointer, callerpc, pc uintptr)                  { throw(""race"") }
func racereadrangepc(addr unsafe.Pointer, sz, callerpc, pc uintptr)         { throw(""race"") }
func racewriterangepc(addr unsafe.Pointer, sz, callerpc, pc uintptr)        { throw(""race"") }
func raceacquire(addr unsafe.Pointer)                                       { throw(""race"") }
func raceacquireg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }
func raceacquirectx(racectx uintptr, addr unsafe.Pointer)                   { throw(""race"") }
func racerelease(addr unsafe.Pointer)                                       { throw(""race"") }
func racereleaseg(gp *g, addr unsafe.Pointer)                               { throw(""race"") }
",29.0,27.0,1344.0,unsafe.Pointer,race0.go,2670.0,42.0,runtime,std,std,kubernetes/kubernetes,runtime/race0.go,unused
251,"		(*valp)[0] = unsafe.Pointer(t)
","		symName := resolveNameOff(unsafe.Pointer(md.types), ptab.name)
		t := (*_type)(unsafe.Pointer(md.types)).typeOff(ptab.typ)
		var val interface{}
		valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))
		(*valp)[0] = unsafe.Pointer(t)

		name := symName.name()
		if t.kind&kindMask == kindFunc {
			name = ""."" + name
		}
",85.0,15.0,2885.0,unsafe.Pointer,plugin.go,4262.0,136.0,runtime,std,std,kubernetes/kubernetes,runtime/plugin.go,direct-memory-access
252,"		raceacquire(unsafe.Pointer(&trace.shutdownSema))
","	// The world is started but we've set trace.shutdown, so new tracing can't start.
	// Wait for the trace reader to flush pending buffers and stop.
	semacquire(&trace.shutdownSema)
	if raceenabled {
		raceacquire(unsafe.Pointer(&trace.shutdownSema))
	}

	// The lock protects us from races with StartTrace/StopTrace because they do stop-the-world.
	lock(&trace.lock)
	for _, p := range allp[:cap(allp)] {
",326.0,14.0,14386.0,unsafe.Pointer,trace.go,38634.0,1214.0,runtime,std,std,kubernetes/kubernetes,runtime/trace.go,delegate
253,"		val := *(*uintptr)(unsafe.Pointer(p + i))
","				markbuf[0] = ' '
			}
		}
		gwrite(markbuf[:])
		val := *(*uintptr)(unsafe.Pointer(p + i))
		p1(val)
		print("" "")

		// Can we symbolize val?
		fn := findfunc(val)
",297.0,21.0,5897.0,unsafe.Pointer,print.go,6120.0,309.0,runtime,std,std,kubernetes/kubernetes,runtime/print.go,pointer-arithmetic-memory-layout
254,"		_p1 = unsafe.Pointer(&dest[0])
","		return
	}
	var _p1 unsafe.Pointer
	if len(dest) > 0 {
		_p1 = unsafe.Pointer(&dest[0])
	} else {
		_p1 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_FSETXATTR, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)), uintptr(flags), 0)
	if e1 != 0 {
",770.0,8.0,19218.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
255,"	_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func ClockGetres(clockid int32, res *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_CLOCK_GETRES, uintptr(clockid), uintptr(unsafe.Pointer(res)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",492.0,65.0,12391.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
256,"func resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name {
","	}
	unlock(&reflectOffs.lock)
}

func resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name {
	if off == 0 {
		return name{}
	}
	base := uintptr(ptrInModule)
	for md := &firstmoduledata; md != nil; md = md.next {
",185.0,32.0,4482.0,unsafe.Pointer,type.go,18709.0,726.0,runtime,std,std,kubernetes/kubernetes,runtime/type.go,pointer-arithmetic-memory-layout
257,"		x = unsafe.Pointer(&zeroVal[0])
","}

func convT32(val uint32) (x unsafe.Pointer) {
	if val == 0 {
		x = unsafe.Pointer(&zeroVal[0])
	} else {
		x = mallocgc(4, uint32Type, false)
		*(*uint32)(x) = val
	}
	return
",345.0,6.0,10884.0,unsafe.Pointer,iface.go,16159.0,558.0,runtime,std,std,kubernetes/kubernetes,runtime/iface.go,direct-memory-access
258,"	_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",275.0,41.0,6672.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
259,"		raceAcquire(unsafe.Pointer(&ioSync))
","			raceWriteRange(unsafe.Pointer(iovecs[i].Base), m)
		}
	}
	if err == nil {
		raceAcquire(unsafe.Pointer(&ioSync))
	}
}

func Writev(fd int, iovs [][]byte) (n int, err error) {
	iovecs := bytes2iovec(iovs)
",1769.0,14.0,55161.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/syscall_linux.go,delegate
260,"	err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)
","
func GetsockoptByte(fd, level, opt int) (value byte, err error) {
	var n byte
	vallen := _Socklen(1)
	err = getsockopt(fd, level, opt, unsafe.Pointer(&n), &vallen)
	return n, err
}

func GetsockoptInt(fd, level, opt int) (value int, err error) {
	var n int32
",238.0,34.0,5220.0,unsafe.Pointer,syscall_unix.go,10607.0,416.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_unix.go,delegate
261,"func reflect_typedmemclr(typ *_type, ptr unsafe.Pointer) {
","	memclrNoHeapPointers(ptr, typ.size)
}

//go:linkname reflect_typedmemclr reflect.typedmemclr
func reflect_typedmemclr(typ *_type, ptr unsafe.Pointer) {
	typedmemclr(typ, ptr)
}

//go:linkname reflect_typedmemclrpartial reflect.typedmemclrpartial
func reflect_typedmemclrpartial(typ *_type, ptr unsafe.Pointer, off, size uintptr) {
",327.0,41.0,11691.0,unsafe.Pointer,mbarrier.go,12432.0,348.0,runtime,std,std,kubernetes/kubernetes,runtime/mbarrier.go,delegate
262,"	return uintptr(unsafe.Pointer(c))
","	panic(plainError(""send on closed channel""))
}

func (c *hchan) sortkey() uintptr {
	return uintptr(unsafe.Pointer(c))
}

// A runtimeSelect is a single case passed to rselect.
// This must match ../reflect/value.go:/runtimeSelect
type runtimeSelect struct {
",500.0,16.0,11792.0,unsafe.Pointer,select.go,13555.0,579.0,runtime,std,std,kubernetes/kubernetes,runtime/select.go,delegate
263,"		return &(*u)(unsafe.Pointer(t)).u
","		type u struct {
			rtype
			u uncommonType
		}
		return &(*u)(unsafe.Pointer(t)).u
	}
}

func (t *rtype) String() string {
	s := t.nameOff(t.str).name()
",748.0,15.0,22098.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
264,"		ts.fn = unsafe.Pointer(funcPC(mstart))
","			throw(""_cgo_thread_start missing"")
		}
		ts.g.set(mp.g0)
		ts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0]))
		ts.fn = unsafe.Pointer(funcPC(mstart))
		if msanenabled {
			msanwrite(unsafe.Pointer(&ts), unsafe.Sizeof(ts))
		}
		execLock.rlock() // Prevent process clone.
		asmcgocall(_cgo_thread_start, unsafe.Pointer(&ts))
",1743.0,10.0,51861.0,unsafe.Pointer,proc.go,153166.0,5418.0,runtime,std,std,kubernetes/kubernetes,runtime/proc.go,direct-memory-access
265,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mprotect(b []byte, prot int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1729.0,9.0,42402.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
266,"			md.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)
","			continue
		}
		*modules = append(*modules, md)
		if md.gcdatamask == (bitvector{}) {
			md.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)
			md.gcbssmask = progToPointerMask((*byte)(unsafe.Pointer(md.gcbss)), md.ebss-md.bss)
		}
	}

	// Modules appear in the moduledata linked list in the order they are
",435.0,45.0,13052.0,unsafe.Pointer,symtab.go,28996.0,968.0,runtime,std,std,kubernetes/kubernetes,runtime/symtab.go,conversion-struct-basic
267,"//sys	getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)
","//sys	bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
//sys	connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
//sysnb	getgroups(n int, list *_Gid_t) (nn int, err error)
//sysnb	setgroups(n int, list *_Gid_t) (err error)
//sys	getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)
//sys	setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)
//sysnb	socket(domain int, typ int, proto int) (fd int, err error)
//sysnb	socketpair(domain int, typ int, proto int, fd *[2]int32) (err error)
//sysnb	getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
//sysnb	getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
",83.0,49.0,3455.0,unsafe.Pointer,syscall_linux_amd64.go,6598.0,194.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux_amd64.go,comment
268,"		adjustpointer(adjinfo, unsafe.Pointer(&d.fd))
","		adjustpointer(adjinfo, unsafe.Pointer(&d.sp))
		adjustpointer(adjinfo, unsafe.Pointer(&d._panic))
		adjustpointer(adjinfo, unsafe.Pointer(&d.link))
		adjustpointer(adjinfo, unsafe.Pointer(&d.varp))
		adjustpointer(adjinfo, unsafe.Pointer(&d.fd))
	}

	// Adjust defer argument blocks the same way we adjust active stack frames.
	// Note: this code is after the loop above, so that if a defer record is
	// stack allocated, we work on the copy in the new stack.
",740.0,25.0,21948.0,unsafe.Pointer,stack.go,40023.0,1317.0,runtime,std,std,kubernetes/kubernetes,runtime/stack.go,direct-memory-access
269,"		err = ptrace(peekReq, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))
","	// Leading edge.
	n := 0
	if addr%SizeofPtr != 0 {
		var buf [SizeofPtr]byte
		err = ptrace(peekReq, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return 0, err
		}
		n += copy(buf[addr%SizeofPtr:], data)
		word := *((*uintptr)(unsafe.Pointer(&buf[0])))
",1317.0,58.0,38531.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,pointer-arithmetic-memory-layout
270,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setdomainname(p []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1315.0,9.0,32441.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
271,"	stsp := uintptr(unsafe.Pointer(st.ss_sp))
","		old.stackguard0 = g.m.gsignal.stackguard0
		old.stackguard1 = g.m.gsignal.stackguard1
		old.stktopsp = g.m.gsignal.stktopsp
	}
	stsp := uintptr(unsafe.Pointer(st.ss_sp))
	g.m.gsignal.stack.lo = stsp
	g.m.gsignal.stack.hi = stsp + st.ss_size
	g.m.gsignal.stackguard0 = stsp + _StackGuard
	g.m.gsignal.stackguard1 = stsp + _StackGuard
}
",1143.0,17.0,35744.0,unsafe.Pointer,signal_unix.go,36808.0,1182.0,runtime,std,std,kubernetes/kubernetes,runtime/signal_unix.go,pointer-arithmetic-memory-layout
272,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETRANDOM, uintptr(_p0), uintptr(len(buf)), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",819.0,8.0,20089.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
273,"	r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func accept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error) {
	r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",2293.0,56.0,56075.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
274,"	err := ioctl(fd, req, uintptr(unsafe.Pointer(value)))
","//
// The req value will usually be TCSETA or TIOCSETA.
func IoctlSetTermios(fd int, req uint, value *Termios) error {
	// TODO: if we get the chance, remove the req parameter.
	err := ioctl(fd, req, uintptr(unsafe.Pointer(value)))
	runtime.KeepAlive(value)
	return err
}

// IoctlGetInt performs an ioctl operation which gets an integer value
",39.0,31.0,1234.0,unsafe.Pointer,ioctl.go,2044.0,65.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/ioctl.go,delegate
275,"	_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Setrlimit(resource int, rlim *Rlimit) (err error) {
	_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2100.0,66.0,51017.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
276,"	s := (*sliceHeader)(unsafe.Pointer(&x))
","	// can see the base pointer in it.
	var x []unsafe.Pointer

	// Reinterpret as *sliceHeader to edit.
	s := (*sliceHeader)(unsafe.Pointer(&x))
	s.Len = j - i
	s.Cap = k - i
	if k-i > 0 {
		s.Data = arrayAt(base, i, typ.elem.Size(), ""i < k <= cap"")
	} else {
",1815.0,21.0,54084.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,conversion-header
277,"			atomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))
","			l2 = (*[1 << arenaL2Bits]*heapArena)(persistentalloc(unsafe.Sizeof(*l2), sys.PtrSize, nil))
			if l2 == nil {
				throw(""out of memory allocating heap arena map"")
			}
			atomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))
		}

		if l2[ri.l2()] != nil {
			throw(""arena already initialized"")
		}
",727.0,21.0,28663.0,unsafe.Pointer,malloc.go,49481.0,1422.0,runtime,std,std,kubernetes/kubernetes,runtime/malloc.go,delegate
278,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrTIPC, nil
","	sa.raw.Scope = int8(sa.Scope)
	sa.raw.Addrtype = sa.Addr.tipcAddrtype()
	sa.raw.Addr = sa.Addr.tipcAddr()

	return unsafe.Pointer(&sa.raw), SizeofSockaddrTIPC, nil
}

// SockaddrL2TPIP implements the Sockaddr interface for IPPROTO_L2TP/AF_INET sockets.
type SockaddrL2TPIP struct {
	Addr   [4]byte
",839.0,8.0,24247.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
279,"	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
","
func GetsockoptUcred(fd, level, opt int) (*Ucred, error) {
	var value Ucred
	vallen := _Socklen(SizeofUcred)
	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
	return &value, err
}

func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
",601.0,35.0,14773.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,delegate
280,"	ch  unsafe.Pointer // channel
","// This must match ../runtime/select.go:/runtimeSelect
type runtimeSelect struct {
	dir SelectDir      // SelectSend, SelectRecv or SelectDefault
	typ *rtype         // channel type
	ch  unsafe.Pointer // channel
	val unsafe.Pointer // ptr to data (SendDir) or ptr to receive buffer (RecvDir)
}

// rselect runs a select. It returns the index of the chosen case.
// If the case was a receive, val is filled in with the received value.
",2106.0,5.0,62399.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,data-structure
281,"		_p0 = unsafe.Pointer(&p[0])
","
func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)
",2084.0,8.0,50735.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
282,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",607.0,8.0,15454.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
283,"	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
","		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",2412.0,105.0,59492.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
284,"	var p unsafe.Pointer
","
// Klogset wraps the sys_syslog system call; it sets console_loglevel to
// the value specified by arg and passes a dummy pointer to bufp.
func Klogset(typ int, arg int) (err error) {
	var p unsafe.Pointer
	_, _, errno := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(p), uintptr(arg))
	if errno != 0 {
		return errnoErr(errno)
	}
	return nil
",2091.0,7.0,63763.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,syscall
285,"		_p0 = unsafe.Pointer(&b[0])
","
func Mprotect(b []byte, prot int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))
	if e1 != 0 {
",1731.0,8.0,42443.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
286,"func arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer {
","// it is invalid (but impossible to check here) to pass i >= len,
// because then the result will point outside the array.
// whySafe must explain why i < len. (Passing ""i < len"" is fine;
// the benefit is to surface this assumption at the call site.)
func arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer {
	return add(p, uintptr(i)*eltSize, ""i < len"")
}

// grow grows the slice s so that it can hold extra more values, allocating
// more capacity if needed. It also returns the old and new slice lengths.
",1990.0,15.0,59504.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,pointer-arithmetic-memory-layout
287,"	_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(_p0)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",432.0,41.0,10836.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
288,"	copy(out[:], (*(*[unsafe.Sizeof(TIPCServiceName{})]byte)(unsafe.Pointer(sa)))[:])
","func (sa *TIPCServiceRange) tipcAddrtype() uint8 { return TIPC_SERVICE_RANGE }

func (sa *TIPCServiceName) tipcAddr() [12]byte {
	var out [12]byte
	copy(out[:], (*(*[unsafe.Sizeof(TIPCServiceName{})]byte)(unsafe.Pointer(sa)))[:])
	return out
}

func (sa *TIPCServiceName) tipcAddrtype() uint8 { return TIPC_SERVICE_ADDR }

",823.0,58.0,23818.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-byteslice
289,"		insertk = add(unsafe.Pointer(newb), dataOffset)
","	if inserti == nil {
		// all current buckets are full, allocate a new one.
		newb := h.newoverflow(t, b)
		inserti = &newb.tophash[0]
		insertk = add(unsafe.Pointer(newb), dataOffset)
		elem = add(insertk, bucketCnt*uintptr(t.keysize))
	}

	// store new key/elem at insert position
	if t.indirectkey() {
",656.0,16.0,21840.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,pointer-arithmetic-memory-layout
290,"	return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))
","}

// PtraceGetRegs386 fetches the registers used by 386 binaries.
func PtraceGetRegs386(pid int, regsout *PtraceRegs386) error {
	return ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))
}

// PtraceSetRegs386 sets the registers used by 386 binaries.
func PtraceSetRegs386(pid int, regs *PtraceRegs386) error {
	return ptrace(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs)))
",33.0,47.0,640.0,unsafe.Pointer,zptrace_x86_linux.go,1874.0,80.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zptrace_x86_linux.go,delegate
291,"	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2262.0,43.0,55218.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
292,"	r0, _, e1 := Syscall6(SYS_WAIT4, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func wait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error) {
	r0, _, e1 := Syscall6(SYS_WAIT4, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)
	wpid = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",187.0,56.0,4592.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
293,"	oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing
","	noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details
	hash0     uint32 // hash seed

	buckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.
	oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing
	nevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)

	extra *mapextra // optional fields
}

",125.0,12.0,5373.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,data-structure
294,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrL2, nil
","	cid := (*[2]byte)(unsafe.Pointer(&sa.raw.Cid))
	cid[0] = byte(sa.CID)
	cid[1] = byte(sa.CID >> 8)
	sa.raw.Bdaddr_type = sa.AddrType
	return unsafe.Pointer(&sa.raw), SizeofSockaddrL2, nil
}

// SockaddrRFCOMM implements the Sockaddr interface for AF_BLUETOOTH type sockets
// using the RFCOMM protocol.
//
",509.0,8.0,13292.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
295,"		mv := (*maptype)(unsafe.Pointer(v))
","		}
		return true
	case kindMap:
		mt := (*maptype)(unsafe.Pointer(t))
		mv := (*maptype)(unsafe.Pointer(v))
		return typesEqual(mt.key, mv.key, seen) && typesEqual(mt.elem, mv.elem, seen)
	case kindPtr:
		pt := (*ptrtype)(unsafe.Pointer(t))
		pv := (*ptrtype)(unsafe.Pointer(v))
		return typesEqual(pt.elem, pv.elem, seen)
",685.0,19.0,17627.0,unsafe.Pointer,type.go,18709.0,726.0,runtime,std,std,kubernetes/kubernetes,runtime/type.go,conversion-struct-struct
296,"	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
","
// SetsockoptSockFprog attaches a classic BPF or an extended BPF program to a
// socket to filter incoming packets.  See 'man 7 socket' for usage information.
func SetsockoptSockFprog(fd, level, opt int, fprog *SockFprog) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
}

func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {
",1032.0,35.0,29131.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,delegate
297,"					if !atomic.Casp1(ppu, unsafe.Pointer(p), unsafe.Pointer(p+delta)) {
","					print(""adjust ptr "", hex(p), "" "", funcname(f), ""\n"")
				}
				if useCAS {
					ppu := (*unsafe.Pointer)(unsafe.Pointer(pp))
					if !atomic.Casp1(ppu, unsafe.Pointer(p), unsafe.Pointer(p+delta)) {
						goto retry
					}
				} else {
					*pp = p + delta
				}
",607.0,27.0,17722.0,unsafe.Pointer,stack.go,40023.0,1317.0,runtime,std,std,kubernetes/kubernetes,runtime/stack.go,pointer-arithmetic-memory-layout
298,"		_p0 = unsafe.Pointer(&b[0])
","
func Madvise(b []byte, advice int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(advice))
	if e1 != 0 {
",1681.0,8.0,41031.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
299,"	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
","		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",1578.0,105.0,38034.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
300,"func (sa *SockaddrALG) sockaddr() (unsafe.Pointer, _Socklen, error) {
","	Mask    uint32
	raw     RawSockaddrALG
}

func (sa *SockaddrALG) sockaddr() (unsafe.Pointer, _Socklen, error) {
	// Leave room for NUL byte terminator.
	if len(sa.Type) > 13 {
		return nil, 0, EINVAL
	}
	if len(sa.Name) > 63 {
",683.0,35.0,19512.0,unsafe.Pointer,syscall_linux.go,51627.0,1771.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
301,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1197.0,8.0,29498.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
302,"		v := (*funcType)(unsafe.Pointer(V))
","		return V.chanDir() == T.chanDir() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)

	case Func:
		t := (*funcType)(unsafe.Pointer(T))
		v := (*funcType)(unsafe.Pointer(V))
		if t.outCount != v.outCount || t.inCount != v.inCount {
			return false
		}
		for i := 0; i < t.NumIn(); i++ {
			if !haveIdenticalType(t.In(i), v.In(i), cmpTags) {
",842.0,19.0,21978.0,unsafe.Pointer,type.go,23990.0,925.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/type.go,conversion-struct-struct
303,"	var p unsafe.Pointer
","	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
}

func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {
		p = unsafe.Pointer(&filter[0])
	}
	return setsockopt(fd, level, opt, p, uintptr(len(filter)*SizeofCanFilter))
}
",1103.0,7.0,31266.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,delegate
304,"			buf = (*stackWorkBuf)(unsafe.Pointer(getempty()))
","		if s.freeBuf != nil {
			buf = s.freeBuf
			s.freeBuf = nil
		} else {
			buf = (*stackWorkBuf)(unsafe.Pointer(getempty()))
		}
		buf.nobj = 0
		buf.next = *head
		*head = buf
	}
",228.0,25.0,7513.0,unsafe.Pointer,mgcstack.go,10800.0,354.0,runtime,std,std,kubernetes/kubernetes,runtime/mgcstack.go,conversion-struct-struct
305,"	return interhash(noescape(unsafe.Pointer(&i)), seed)
","
func ifaceHash(i interface {
	F()
}, seed uintptr) uintptr {
	return interhash(noescape(unsafe.Pointer(&i)), seed)
}

const hashRandomBytes = sys.PtrSize / 4 * 64

// used in asm_{386,amd64,arm64}.s to seed the hash function
",336.0,27.0,8763.0,unsafe.Pointer,alg.go,10428.0,389.0,runtime,std,std,kubernetes/kubernetes,runtime/alg.go,escape-analysis-escape
306,"					clobberfree(unsafe.Pointer(x), size)
","				if debug.allocfreetrace != 0 {
					tracefree(unsafe.Pointer(x), size)
				}
				if debug.clobberfree != 0 {
					clobberfree(unsafe.Pointer(x), size)
				}
				if raceenabled {
					racefree(unsafe.Pointer(x), size)
				}
				if msanenabled {
",305.0,17.0,9755.0,unsafe.Pointer,mgcsweep.go,15150.0,459.0,runtime,std,std,kubernetes/kubernetes,runtime/mgcsweep.go,direct-memory-access
307,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func keyctlIOV(cmd int, arg2 int, payload []Iovec, arg5 int) (err error) {
	var _p0 unsafe.Pointer
	if len(payload) > 0 {
		_p0 = unsafe.Pointer(&payload[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",276.0,9.0,7068.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
308,"func raceReleaseMerge(addr unsafe.Pointer) {
","
func raceAcquire(addr unsafe.Pointer) {
}

func raceReleaseMerge(addr unsafe.Pointer) {
}

func raceReadRange(addr unsafe.Pointer, len int) {
}

",18.0,27.0,353.0,unsafe.Pointer,race0.go,509.0,25.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/race0.go,unused
309,"	var _p2 unsafe.Pointer
","	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
",1075.0,9.0,25972.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
310,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREADV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1639.0,8.0,39924.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
311,"	*(*unsafe.Pointer)(unsafe.Pointer(&dispatchF)) = noescape(unsafe.Pointer(&dispatchFV))
","// and then calls the dispatching function at PC dispatch.
func debugCallWrap(dispatch uintptr) {
	var dispatchF func()
	dispatchFV := funcval{dispatch}
	*(*unsafe.Pointer)(unsafe.Pointer(&dispatchF)) = noescape(unsafe.Pointer(&dispatchFV))

	var ok bool
	defer func() {
		if !ok {
			err := recover()
",103.0,4.0,2689.0,unsafe.Pointer,debugcall.go,2899.0,114.0,runtime,std,std,kubernetes/kubernetes,runtime/debugcall.go,escape-analysis-escape
312,"	_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
","		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall6(SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1104.0,45.0,26849.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
313,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_SETHOSTNAME, uintptr(_p0), uintptr(len(p)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
",1346.0,8.0,33131.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
314,"	_, _, e1 := RawSyscall(SYS_PIPE, uintptr(unsafe.Pointer(p)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func pipe(p *[2]_C_int) (err error) {
	_, _, e1 := RawSyscall(SYS_PIPE, uintptr(unsafe.Pointer(p)), 0, 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2346.0,42.0,57672.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
315,"	err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)
","// socket associated with fd at the given socket level.
func GetsockoptString(fd, level, opt int) (string, error) {
	buf := make([]byte, 256)
	vallen := _Socklen(len(buf))
	err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)
	if err != nil {
		if err == ERANGE {
			buf = make([]byte, vallen)
			err = getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)
		}
",1128.0,35.0,31475.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,delegate
316,"	_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrusage(who int, rusage *Rusage) (err error) {
	_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",866.0,61.0,21411.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
317,"func call8388608(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
","func call524288(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call1048576(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call2097152(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call4194304(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call8388608(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call16777216(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call33554432(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call67108864(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call134217728(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
func call268435456(typ, fn, arg unsafe.Pointer, n, retoffset uint32)
",292.0,30.0,11443.0,unsafe.Pointer,stubs.go,13395.0,345.0,runtime,std,std,kubernetes/kubernetes,runtime/stubs.go,data-structure
318,"	return (*[1 << 30]byte)(unsafe.Pointer(uintptr(unsafe.Pointer(&fh.fileHandle.Type)) + 4))[:n:n]
","	n := fh.Size()
	if n == 0 {
		return nil
	}
	return (*[1 << 30]byte)(unsafe.Pointer(uintptr(unsafe.Pointer(&fh.fileHandle.Type)) + 4))[:n:n]
}

// NameToHandleAt wraps the name_to_handle_at system call; it obtains
// a handle for a path name.
func NameToHandleAt(dirfd int, path string, flags int) (handle FileHandle, mountID int, err error) {
",2050.0,25.0,62363.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,pointer-arithmetic-memory-layout
319,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PWRITEV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1690.0,8.0,41458.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
320,"	e := (*emptyInterface)(unsafe.Pointer(&i))
","// packEface converts v to the empty interface.
func packEface(v Value) interface{} {
	t := v.typ
	var i interface{}
	e := (*emptyInterface)(unsafe.Pointer(&i))
	// First, fill in the data portion of the interface.
	switch {
	case ifaceIndir(t):
		if v.flag&flagIndir == 0 {
			panic(""bad indir"")
",106.0,24.0,3492.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,conversion-struct-struct
321,"		_p0 = unsafe.Pointer(&buf[0])
","
func Klogctl(typ int, buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(_p0), uintptr(len(buf)))
	n = int(r0)
",573.0,8.0,13628.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
322,"		_p0 = unsafe.Pointer(&iovs[0])
","
func preadv2(fd int, iovs []Iovec, offs_l uintptr, offs_h uintptr, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(iovs) > 0 {
		_p0 = unsafe.Pointer(&iovs[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREADV2, uintptr(fd), uintptr(_p0), uintptr(len(iovs)), uintptr(offs_l), uintptr(offs_h), uintptr(flags))
	n = int(r0)
",1671.0,8.0,40933.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
323,"		_p0 = unsafe.Pointer(&b[0])
","
func Msync(b []byte, flags int) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	_, _, e1 := Syscall(SYS_MSYNC, uintptr(_p0), uintptr(len(b)), uintptr(flags))
	if e1 != 0 {
",1773.0,8.0,43342.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
324,"	gp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))
","
	var p _panic
	p.arg = e
	p.link = gp._panic
	gp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))

	atomic.Xadd(&runningPanicDefers, 1)

	// By calculating getcallerpc/getcallersp here, we avoid scanning the
	// gopanic frame (stack scanning is slow...)
",923.0,32.0,28742.0,unsafe.Pointer,panic.go,43241.0,1422.0,runtime,std,std,kubernetes/kubernetes,runtime/panic.go,conversion-struct-struct
325,"	return Value{t, unsafe.Pointer(impl), flag(Func)}
","	_, argLen, _, stack, _ := funcLayout(ftyp, nil)

	impl := &makeFuncImpl{code: code, stack: stack, argLen: argLen, ftyp: ftyp, fn: fn}

	return Value{t, unsafe.Pointer(impl), flag(Func)}
}

// makeFuncStub is an assembly function that is the code half of
// the function returned from MakeFunc. It expects a *callReflectFunc
// as its context register, and its job is to invoke callReflect(ctxt, frame)
",67.0,17.0,2309.0,unsafe.Pointer,makefunc.go,5060.0,138.0,reflect,std,std,kubernetes/kubernetes,reflect/makefunc.go,direct-memory-access
326,"		bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]
","		n := 0
		for n < len(pp.Path) && pp.Path[n] != 0 {
			n++
		}
		bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]
		sa.Name = string(bytes)
		return sa, nil

	case AF_INET:
		pp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))
",887.0,33.0,25559.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-byteslice
327,"					racefree(unsafe.Pointer(x), size)
","				if debug.clobberfree != 0 {
					clobberfree(unsafe.Pointer(x), size)
				}
				if raceenabled {
					racefree(unsafe.Pointer(x), size)
				}
				if msanenabled {
					msanfree(unsafe.Pointer(x), size)
				}
			}
",308.0,14.0,9824.0,unsafe.Pointer,mgcsweep.go,15150.0,459.0,runtime,std,std,kubernetes/kubernetes,runtime/mgcsweep.go,direct-memory-access
328,"		data = unsafe.Pointer(uintptr(data) + 4)
","	h.SetLen(CmsgLen(datalen))
	data := cmsgData(h)
	for _, fd := range fds {
		*(*int32)(data) = int32(fd)
		data = unsafe.Pointer(uintptr(data) + 4)
	}
	return b
}

// ParseUnixRights decodes a socket control message that contains an
",100.0,9.0,2746.0,unsafe.Pointer,sockcmsg_unix.go,3281.0,120.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/sockcmsg_unix.go,pointer-arithmetic-memory-layout
329,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(unsafe.Pointer(arg2)), uintptr(_p0), uintptr(len(buf)), 0, 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",296.0,8.0,7593.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
330,"func typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr {
","// (called from interhash or nilinterhash, above) or for hashing in
// maps generated by reflect.MapOf (reflect_typehash, below).
// Note: this function must match the compiler generated
// functions exactly. See issue 37716.
func typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr {
	if t.tflag&tflagRegularMemory != 0 {
		// Handle ptr sizes specially, see issue 37086.
		switch t.size {
		case 4:
			return memhash32(p, h)
",163.0,26.0,4220.0,unsafe.Pointer,alg.go,10428.0,389.0,runtime,std,std,kubernetes/kubernetes,runtime/alg.go,type-reflection
331,"		fh := (*fileHandle)(unsafe.Pointer(&buf[0]))
","	size := uint32(32 + unsafe.Sizeof(fileHandle{}))
	didResize := false
	for {
		buf := make([]byte, size)
		fh := (*fileHandle)(unsafe.Pointer(&buf[0]))
		fh.Bytes = size - uint32(unsafe.Sizeof(fileHandle{}))
		err = nameToHandleAt(dirfd, path, fh, &mid, flags)
		if err == EOVERFLOW {
			if didResize {
				// We shouldn't need to resize more than once
",1833.0,22.0,56299.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-byteslice
332,"	_, _, e1 := Syscall(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Nanosleep(time *Timespec, leftover *Timespec) (err error) {
	_, _, e1 := Syscall(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1137.0,44.0,27522.0,unsafe.Pointer,zsyscall_linux.go,45337.0,1856.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux.go,syscall
333,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1666.0,9.0,40511.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
334,"	_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Ustat(dev int, ubuf *Ustat_t) (err error) {
	_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",2272.0,54.0,55467.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
335,"var disableSplice unsafe.Pointer
","	n, err := syscall.Splice(in, nil, out, nil, max, flags)
	return int(n), err
}

var disableSplice unsafe.Pointer

// newTempPipe sets up a temporary pipe for a splice operation.
func newTempPipe() (prfd, pwfd int, sc string, err error) {
	p := (*bool)(atomic.LoadPointer(&disableSplice))
	if p != nil && *p {
",149.0,18.0,4531.0,unsafe.Pointer,splice_linux.go,5792.0,191.0,internal/poll,std,std,kubernetes/kubernetes,internal/poll/splice_linux.go,data-structure
336,"	prototype := *(**funcType)(unsafe.Pointer(&ifunc))
","	}

	// Make a func type.
	var ifunc interface{} = (func())(nil)
	prototype := *(**funcType)(unsafe.Pointer(&ifunc))
	n := len(in) + len(out)

	var ft *funcType
	var args []*rtype
	switch {
",1939.0,28.0,54473.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
337,"		*(*uintptr)(unsafe.Pointer(uintptr(123))) = 2
","		// Cannot call split-stack function as there is no G.
		s := stringStructOf(&badginsignalMsg)
		write(2, s.str, int32(s.len))
		exit(2)
		*(*uintptr)(unsafe.Pointer(uintptr(123))) = 2
	}
	needm(0)
	if !sigsend(uint32(sig)) {
		// A foreign thread received the signal sig, and the
		// Go code does not want to handle it.
",906.0,14.0,27661.0,unsafe.Pointer,signal_unix.go,36808.0,1182.0,runtime,std,std,kubernetes/kubernetes,runtime/signal_unix.go,direct-memory-access
338,"	hash := t.hasher(noescape(unsafe.Pointer(&key)), uintptr(h.hash0))
","	}
	if h.flags&hashWriting != 0 {
		throw(""concurrent map writes"")
	}
	hash := t.hasher(noescape(unsafe.Pointer(&key)), uintptr(h.hash0))

	// Set hashWriting after calling t.hasher for consistency with mapassign.
	h.flags ^= hashWriting

	if h.buckets == nil {
",103.0,27.0,2928.0,unsafe.Pointer,map_fast32.go,12474.0,452.0,runtime,std,std,kubernetes/kubernetes,runtime/map_fast32.go,escape-analysis-escape
339,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",264.0,8.0,6306.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
340,"			return **(**uintptr)(unsafe.Pointer(&f))
","			// created via reflect have the same underlying code pointer,
			// so their Pointers are equal. The function used here must
			// match the one used in makeMethodValue.
			f := methodValueCall
			return **(**uintptr)(unsafe.Pointer(&f))
		}
		p := v.pointer()
		// Non-nil func value points at data block.
		// First word of data block is actual code.
		if p != nil {
",1444.0,24.0,44260.0,unsafe.Pointer,value.go,81958.0,2788.0,reflect,std,std,kubernetes/kubernetes,reflect/value.go,direct-memory-access
341,"	return setsockopt(fd, level, opt, unsafe.Pointer(&value[0]), 4)
","	return setsockopt(fd, level, opt, unsafe.Pointer(&n), 4)
}

func SetsockoptInet4Addr(fd, level, opt int, value [4]byte) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(&value[0]), 4)
}

func SetsockoptIPMreq(fd, level, opt int, mreq *IPMreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPMreq)
}
",334.0,35.0,7967.0,unsafe.Pointer,syscall_unix.go,10980.0,431.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_unix.go,delegate
342,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(_p0), uintptr(len(buf)), uintptr(arg5), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",226.0,8.0,5834.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
343,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Mlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1745.0,9.0,42748.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
344,"	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(arg5), 0)
","	_p1, err = BytePtrFromString(arg4)
	if err != nil {
		return
	}
	r0, _, e1 := Syscall6(SYS_KEYCTL, uintptr(cmd), uintptr(arg2), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(arg5), 0)
	ret = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",252.0,72.0,6245.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
345,"		data = unsafe.Pointer(uintptr(data) + 4)
","	h.SetLen(CmsgLen(datalen))
	data := cmsgData(h)
	for _, fd := range fds {
		*(*int32)(data) = int32(fd)
		data = unsafe.Pointer(uintptr(data) + 4)
	}
	return b
}

// ParseUnixRights decodes a socket control message that contains an
",97.0,9.0,2664.0,unsafe.Pointer,sockcmsg_unix.go,3199.0,117.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/sockcmsg_unix.go,pointer-arithmetic-memory-layout
346,"	_, _, e1 := Syscall(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
","	_p1, err = BytePtrFromString(putold)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1202.0,45.0,29360.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191120155948-bd437916bb0e,rook/rook,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
347,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Munlock(b []byte) (err error) {
	var _p0 unsafe.Pointer
	if len(b) > 0 {
		_p0 = unsafe.Pointer(&b[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1753.0,9.0,42595.0,unsafe.Pointer,zsyscall_linux.go,44421.0,1825.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/zsyscall_linux.go,syscall
348,"	_, _, e1 := Syscall(SYS_REMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
","	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_REMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",1259.0,46.0,30999.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
349,"	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
","	return setsockopt(fd, level, opt, p, uintptr(len(filter)*SizeofCanFilter))
}

func SetsockoptTpacketReq(fd, level, opt int, tp *TpacketReq) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}

func SetsockoptTpacketReq3(fd, level, opt int, tp *TpacketReq3) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(tp), unsafe.Sizeof(*tp))
}
",1111.0,35.0,31495.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,delegate
350,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(_p0), uintptr(len(buf)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",787.0,8.0,19618.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
351,"	r0, _, e1 := RawSyscall(SYS_TIMES, uintptr(unsafe.Pointer(tms)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Times(tms *Tms) (ticks uintptr, err error) {
	r0, _, e1 := RawSyscall(SYS_TIMES, uintptr(unsafe.Pointer(tms)), 0, 0)
	ticks = uintptr(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",1509.0,44.0,37081.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
352,"	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPMreq)
","	return setsockopt(fd, level, opt, unsafe.Pointer(&value[0]), 4)
}

func SetsockoptIPMreq(fd, level, opt int, mreq *IPMreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPMreq)
}

func SetsockoptIPv6Mreq(fd, level, opt int, mreq *IPv6Mreq) (err error) {
	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), SizeofIPv6Mreq)
}
",331.0,35.0,7917.0,unsafe.Pointer,syscall_unix.go,10607.0,416.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_unix.go,delegate
353,"	_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))
","	_p0, err = BytePtrFromString(path)
	if err != nil {
		return
	}
	_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",158.0,59.0,3988.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
354,"	var _p2 unsafe.Pointer
","	_p1, err = BytePtrFromString(attr)
	if err != nil {
		return
	}
	var _p2 unsafe.Pointer
	if len(data) > 0 {
		_p2 = unsafe.Pointer(&data[0])
	} else {
		_p2 = unsafe.Pointer(&_zero)
	}
",1098.0,9.0,26728.0,unsafe.Pointer,zsyscall_linux_amd64.go,63399.0,2558.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200106162015-b016eb3dc98e,elastic/beats,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
355,"	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
","// control message for sending to another process.
func UnixRights(fds ...int) []byte {
	datalen := len(fds) * 4
	b := make([]byte, CmsgSpace(datalen))
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	h.Level = SOL_SOCKET
	h.Type = SCM_RIGHTS
	h.SetLen(CmsgLen(datalen))
	for i, fd := range fds {
		*(*int32)(h.data(4 * uintptr(i))) = int32(fd)
",67.0,17.0,1942.0,unsafe.Pointer,sockcmsg_unix.go,2619.0,92.0,syscall,std,std,kubernetes/kubernetes,syscall/sockcmsg_unix.go,conversion-struct-struct
356,"	_, _, errno := Syscall(fcntl64Syscall, fd, uintptr(cmd), uintptr(unsafe.Pointer(lk)))
","var fcntl64Syscall uintptr = SYS_FCNTL

// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command.
func FcntlFlock(fd uintptr, cmd int, lk *Flock_t) error {
	_, _, errno := Syscall(fcntl64Syscall, fd, uintptr(cmd), uintptr(unsafe.Pointer(lk)))
	if errno == 0 {
		return nil
	}
	return errno
}
",17.0,66.0,555.0,unsafe.Pointer,flock.go,691.0,22.0,syscall,std,std,kubernetes/kubernetes,syscall/flock.go,syscall
357,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getcwd(buf []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",183.0,9.0,4661.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
358,"	msg.Name = (*byte)(unsafe.Pointer(&rsa))
","
func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error) {
	var msg Msghdr
	var rsa RawSockaddrAny
	msg.Name = (*byte)(unsafe.Pointer(&rsa))
	msg.Namelen = uint32(SizeofSockaddrAny)
	var iov Iovec
	if len(p) > 0 {
		iov.Base = &p[0]
		iov.SetLen(len(p))
",1256.0,20.0,37947.0,unsafe.Pointer,syscall_linux.go,58748.0,1973.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-basic
359,"		bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]
","		n := 0
		for n < len(pp.Path) && pp.Path[n] != 0 {
			n++
		}
		bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]
		sa.Name = string(bytes)
		return sa, nil

	case AF_INET:
		pp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))
",487.0,33.0,11880.0,unsafe.Pointer,syscall_linux.go,26679.0,997.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_linux.go,conversion-struct-byteslice
360,"	r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func accept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error) {
	r0, _, e1 := Syscall6(SYS_ACCEPT4, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags), 0, 0)
	fd = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",2122.0,56.0,51454.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
361,"		raceReleaseMerge(unsafe.Pointer(&ioSync))
","
func Pwritev2(fd int, iovs [][]byte, offset int64, flags int) (n int, err error) {
	iovecs := bytes2iovec(iovs)
	if raceenabled {
		raceReleaseMerge(unsafe.Pointer(&ioSync))
	}
	lo, hi := offs2lohi(offset)
	n, err = pwritev2(fd, iovecs, lo, hi, flags)
	writevRacedetect(iovecs, n)
	return n, err
",1797.0,19.0,55841.0,unsafe.Pointer,syscall_linux.go,63149.0,2124.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/syscall_linux.go,delegate
362,"	err := getsockopt(fd, level, opt, unsafe.Pointer(&linger), &vallen)
","
func GetsockoptLinger(fd, level, opt int) (*Linger, error) {
	var linger Linger
	vallen := _Socklen(SizeofLinger)
	err := getsockopt(fd, level, opt, unsafe.Pointer(&linger), &vallen)
	return &linger, err
}

func GetsockoptTimeval(fd, level, opt int) (*Timeval, error) {
	var tv Timeval
",286.0,35.0,6658.0,unsafe.Pointer,syscall_unix.go,10607.0,416.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/syscall_unix.go,delegate
363,"		_p0 = unsafe.Pointer(&_zero)
","	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
",1226.0,8.0,28527.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
364,"		return *(*unsafe.Pointer)(v.ptr)
","	if v.typ.size != ptrSize || !v.typ.pointers() {
		panic(""can't call pointer on a non-pointer Value"")
	}
	if v.flag&flagIndir != 0 {
		return *(*unsafe.Pointer)(v.ptr)
	}
	return v.ptr
}

// packEface converts v to the empty interface.
",96.0,12.0,3319.0,unsafe.Pointer,value.go,14113.0,486.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/value.go,direct-memory-access
365,"	v := unsafe.Pointer(f.chunk)
","		f.chunk = uintptr(persistentalloc(_FixAllocChunk, 0, f.stat))
		f.nchunk = _FixAllocChunk
	}

	v := unsafe.Pointer(f.chunk)
	if f.first != nil {
		f.first(f.arg, v)
	}
	f.chunk = f.chunk + f.size
	f.nchunk -= uint32(f.size)
",84.0,6.0,2513.0,unsafe.Pointer,mfixalloc.go,2787.0,99.0,runtime,std,std,kubernetes/kubernetes,runtime/mfixalloc.go,direct-memory-access
366,"	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
","// for sending to another process. This can be used for
// authentication.
func UnixCredentials(ucred *Ucred) []byte {
	b := make([]byte, CmsgSpace(SizeofUcred))
	h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
	h.Level = SOL_SOCKET
	h.Type = SCM_CREDENTIALS
	h.SetLen(CmsgLen(SizeofUcred))
	*(*Ucred)(h.data(0)) = *ucred
	return b
",16.0,17.0,450.0,unsafe.Pointer,sockcmsg_linux.go,1067.0,36.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200217220822-9197077df867,grafana/loki,golang.org/x/sys/unix/sockcmsg_linux.go,conversion-struct-struct
367,"				argp := (*[100]uintptr)(unsafe.Pointer(frame.argp))
","				if name == ""runtime.gopanic"" {
					name = ""panic""
				}
				print(name, ""("")
				argp := (*[100]uintptr)(unsafe.Pointer(frame.argp))
				for i := uintptr(0); i < frame.arglen/sys.PtrSize; i++ {
					if i >= 10 {
						print("", ..."")
						break
					}
",439.0,28.0,15684.0,unsafe.Pointer,traceback.go,45165.0,1340.0,runtime,std,std,kubernetes/kubernetes,runtime/traceback.go,conversion-struct-struct
368,"		atomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil) // full memory barrier between stores to rd/wd and load of rg/wg in netpollunblock
","	}
	// If we set the new deadline in the past, unblock currently pending IO if any.
	var rg, wg *g
	if pd.rd < 0 || pd.wd < 0 {
		atomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil) // full memory barrier between stores to rd/wd and load of rg/wg in netpollunblock
		if pd.rd < 0 {
			rg = netpollunblock(pd, 'r', false)
		}
		if pd.wd < 0 {
			wg = netpollunblock(pd, 'w', false)
",289.0,29.0,8649.0,unsafe.Pointer,netpoll.go,14809.0,531.0,runtime,std,std,kubernetes/kubernetes,runtime/netpoll.go,escape-analysis-escape
369,"		dumpint(uint64(uintptr(unsafe.Pointer(mp))))
","
func dumpms() {
	for mp := allm; mp != nil; mp = mp.alllink {
		dumpint(tagOSThread)
		dumpint(uint64(uintptr(unsafe.Pointer(mp))))
		dumpint(uint64(mp.id))
		dumpint(mp.procid)
	}
}

",536.0,25.0,13268.0,unsafe.Pointer,heapdump.go,17514.0,725.0,runtime,std,std,kubernetes/kubernetes,runtime/heapdump.go,conversion-struct-basic
370,"	return utimes(path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
","	err := utimensat(AT_FDCWD, path, (*[2]Timespec)(unsafe.Pointer(&ts[0])), 0)
	if err != ENOSYS {
		return err
	}
	return utimes(path, (*[2]Timeval)(unsafe.Pointer(&tv[0])))
}

//sys	utimensat(dirfd int, path string, times *[2]Timespec, flags int) (err error)

func UtimesNano(path string, ts []Timespec) error {
",189.0,35.0,5476.0,unsafe.Pointer,syscall_linux.go,65304.0,2202.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/syscall_linux.go,conversion-struct-struct
371,"		err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
","
	// Trailing edge.
	if len(data) > 0 {
		var buf [SizeofPtr]byte
		err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))
		if err != nil {
			return n, err
		}
		copy(buf[0:], data)
		word := *((*uintptr)(unsafe.Pointer(&buf[0])))
",1506.0,54.0,44173.0,unsafe.Pointer,syscall_linux.go,64817.0,2191.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,cilium/cilium,golang.org/x/sys/unix/syscall_linux.go,pointer-arithmetic-memory-layout
372,"						*(*unsafe.Pointer)(dst.k) = *(*unsafe.Pointer)(k)
","				// Copy key.
				if t.key.ptrdata != 0 && writeBarrier.enabled {
					if sys.PtrSize == 8 {
						// Write with a write barrier.
						*(*unsafe.Pointer)(dst.k) = *(*unsafe.Pointer)(k)
					} else {
						// There are three ways to squeeze at least one 32 bit pointer into 64 bits.
						// Give up and call typedmemmove.
						typedmemmove(t.key, dst.k, k)
					}
",424.0,9.0,11567.0,unsafe.Pointer,map_fast64.go,12663.0,458.0,runtime,std,std,kubernetes/kubernetes,runtime/map_fast64.go,direct-memory-access
373,"		n := write(netpollBreakWr, unsafe.Pointer(&b), 1)
","// netpollBreak interrupts an epollwait.
func netpollBreak() {
	for {
		var b byte
		n := write(netpollBreakWr, unsafe.Pointer(&b), 1)
		if n == 1 {
			break
		}
		if n == -_EINTR {
			continue
",79.0,29.0,1890.0,unsafe.Pointer,netpoll_epoll.go,4097.0,171.0,runtime,std,std,kubernetes/kubernetes,runtime/netpoll_epoll.go,delegate
374,"		v := (*structType)(unsafe.Pointer(V))
","		return haveIdenticalType(T.Elem(), V.Elem(), cmpTags)

	case Struct:
		t := (*structType)(unsafe.Pointer(T))
		v := (*structType)(unsafe.Pointer(V))
		if len(t.fields) != len(v.fields) {
			return false
		}
		if t.pkgPath.name() != v.pkgPath.name() {
			return false
",1654.0,21.0,46520.0,unsafe.Pointer,type.go,86902.0,3120.0,reflect,std,std,kubernetes/kubernetes,reflect/type.go,conversion-struct-struct
375,"		sysFree(unsafe.Pointer(p), pAligned-p, nil)
","		return p2, size
	default:
		// Trim off the unaligned parts.
		pAligned := alignUp(p, align)
		sysFree(unsafe.Pointer(p), pAligned-p, nil)
		end := pAligned + size
		endLen := (p + size + align) - end
		if endLen > 0 {
			sysFree(unsafe.Pointer(end), endLen, nil)
		}
",816.0,10.0,31626.0,unsafe.Pointer,malloc.go,49481.0,1422.0,runtime,std,std,kubernetes/kubernetes,runtime/malloc.go,pointer-arithmetic-memory-layout
376,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrandom(buf []byte, flags int) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(buf) > 0 {
		_p0 = unsafe.Pointer(&buf[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",838.0,9.0,20760.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
377,"	s := (*slice)(unsafe.Pointer(&b))
","	return strhash(noescape(unsafe.Pointer(&s)), seed)
}

func bytesHash(b []byte, seed uintptr) uintptr {
	s := (*slice)(unsafe.Pointer(&b))
	return memhash(s.array, seed, uintptr(s.len))
}

func int32Hash(i uint32, seed uintptr) uintptr {
	return memhash32(noescape(unsafe.Pointer(&i)), seed)
",317.0,15.0,8291.0,unsafe.Pointer,alg.go,10428.0,389.0,runtime,std,std,kubernetes/kubernetes,runtime/alg.go,conversion-header
378,"	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
","		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
	r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
	n = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",2414.0,105.0,59546.0,unsafe.Pointer,zsyscall_linux_amd64.go,63453.0,2560.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200122134326-e047566fdf82,rancher/rancher,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
379,"		msanread(unsafe.Pointer(&b[0]), uintptr(len(b)))
","			getcallerpc(),
			funcPC(slicebytetostringtmp))
	}
	if msanenabled && len(b) > 0 {
		msanread(unsafe.Pointer(&b[0]), uintptr(len(b)))
	}
	return *(*string)(unsafe.Pointer(&b))
}

func stringtoslicebyte(buf *tmpBuf, s string) []byte {
",150.0,11.0,3967.0,unsafe.Pointer,string.go,11797.0,531.0,runtime,std,std,kubernetes/kubernetes,runtime/string.go,delegate
380,"	return unsafe.Pointer(&sa.raw), SizeofSockaddrInet6, nil
","	sa.raw.Scope_id = sa.ZoneId
	for i := 0; i < len(sa.Addr); i++ {
		sa.raw.Addr[i] = sa.Addr[i]
	}
	return unsafe.Pointer(&sa.raw), SizeofSockaddrInet6, nil
}

func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {
	name := sa.Name
	n := len(name)
",424.0,8.0,11201.0,unsafe.Pointer,syscall_linux.go,54998.0,1868.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/syscall_linux.go,direct-memory-access
381,"	tt := (*funcType)(unsafe.Pointer(t))
","func (t *rtype) Out(i int) Type {
	if t.Kind() != Func {
		panic(""reflect: Out of non-func type"")
	}
	tt := (*funcType)(unsafe.Pointer(t))
	return toType(tt.out()[i])
}

func (t *funcType) in() []*rtype {
	uadd := unsafe.Sizeof(*t)
",620.0,19.0,15780.0,unsafe.Pointer,type.go,23990.0,925.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/type.go,conversion-struct-struct
382,"		return &(*structTypeUncommon)(unsafe.Pointer(t)).u
","		return nil
	}
	switch t.Kind() {
	case Struct:
		return &(*structTypeUncommon)(unsafe.Pointer(t)).u
	case Ptr:
		type u struct {
			ptrType
			u uncommonType
		}
",428.0,32.0,12140.0,unsafe.Pointer,type.go,23990.0,925.0,internal/reflectlite,std,std,kubernetes/kubernetes,internal/reflectlite/type.go,conversion-struct-struct
383,"	ftyp := (*funcType)(unsafe.Pointer(v.Type().(*rtype)))
","	fl |= flag(v.typ.Kind())
	rcvr := Value{v.typ, v.ptr, fl}

	// v.Type returns the actual type of the method value.
	ftyp := (*funcType)(unsafe.Pointer(v.Type().(*rtype)))

	// Indirect Go func value (dummy) to obtain
	// actual code address. (A Go func value is a pointer
	// to a C function pointer. https://golang.org/s/go11func.)
	dummy := methodValueCall
",106.0,21.0,3873.0,unsafe.Pointer,makefunc.go,5060.0,138.0,reflect,std,std,kubernetes/kubernetes,reflect/makefunc.go,type-reflection
384,"func (f *fixalloc) free(p unsafe.Pointer) {
","	f.inuse += f.size
	return v
}

func (f *fixalloc) free(p unsafe.Pointer) {
	f.inuse -= f.size
	v := (*mlink)(p)
	v.next = f.list
	f.list = v
}
",94.0,26.0,2675.0,unsafe.Pointer,mfixalloc.go,2787.0,99.0,runtime,std,std,kubernetes/kubernetes,runtime/mfixalloc.go,conversion-struct-struct
385,"	r0, _, e1 := Syscall(SYS_ADJTIMEX, uintptr(unsafe.Pointer(buf)), 0, 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Adjtimex(buf *Timex) (state int, err error) {
	r0, _, e1 := Syscall(SYS_ADJTIMEX, uintptr(unsafe.Pointer(buf)), 0, 0)
	state = int(r0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",431.0,44.0,10968.0,unsafe.Pointer,zsyscall_linux_amd64.go,61019.0,2467.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20191128015809-6d18c012aee9,hashicorp/terraform,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
386,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func read(fd int, p []byte) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1213.0,9.0,29971.0,unsafe.Pointer,zsyscall_linux_amd64.go,60263.0,2437.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
387,"	var _p0 unsafe.Pointer
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
	var _p0 unsafe.Pointer
	if len(p) > 0 {
		_p0 = unsafe.Pointer(&p[0])
	} else {
		_p0 = unsafe.Pointer(&_zero)
	}
",1222.0,9.0,28446.0,unsafe.Pointer,zsyscall_linux_amd64.go,41639.0,1715.0,syscall,std,std,kubernetes/kubernetes,syscall/zsyscall_linux_amd64.go,syscall
388,"			race.WriteRange(unsafe.Pointer(&p[0]), n)
","func Read(fd int, p []byte) (n int, err error) {
	n, err = read(fd, p)
	if race.Enabled {
		if n > 0 {
			race.WriteRange(unsafe.Pointer(&p[0]), n)
		}
		if err == nil {
			race.Acquire(unsafe.Pointer(&ioSync))
		}
	}
",192.0,19.0,4272.0,unsafe.Pointer,syscall_unix.go,8502.0,369.0,syscall,std,std,kubernetes/kubernetes,syscall/syscall_unix.go,delegate
389,"	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
","
// SetsockoptSockFprog attaches a classic BPF or an extended BPF program to a
// socket to filter incoming packets.  See 'man 7 socket' for usage information.
func SetsockoptSockFprog(fd, level, opt int, fprog *SockFprog) error {
	return setsockopt(fd, level, opt, unsafe.Pointer(fprog), unsafe.Sizeof(*fprog))
}

func SetsockoptCanRawFilter(fd, level, opt int, filter []CanFilter) error {
	var p unsafe.Pointer
	if len(filter) > 0 {
",1037.0,35.0,29248.0,unsafe.Pointer,syscall_linux.go,54998.0,1868.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200420163511-1957bb5e6d1f,kubernetes/kubernetes,golang.org/x/sys/unix/syscall_linux.go,delegate
390,"func dumpotherroot(description string, to unsafe.Pointer) {
","	dumpmemrange(obj, size)
	dumpfields(bv)
}

func dumpotherroot(description string, to unsafe.Pointer) {
	dumpint(tagOtherRoot)
	dumpstr(description)
	dumpint(uint64(uintptr(to)))
}

",209.0,42.0,4378.0,unsafe.Pointer,heapdump.go,17514.0,725.0,runtime,std,std,kubernetes/kubernetes,runtime/heapdump.go,delegate
391,"				k = *((*unsafe.Pointer)(k))
","				continue
			}
			k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))
			if t.indirectkey() {
				k = *((*unsafe.Pointer)(k))
			}
			if t.key.equal(key, k) {
				e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))
				if t.indirectelem() {
					e = *((*unsafe.Pointer)(e))
",496.0,12.0,17481.0,unsafe.Pointer,map.go,43146.0,1375.0,runtime,std,std,kubernetes/kubernetes,runtime/map.go,pointer-arithmetic-memory-layout
392,"func memequal16(p, q unsafe.Pointer) bool {
","}
func memequal8(p, q unsafe.Pointer) bool {
	return *(*int8)(p) == *(*int8)(q)
}
func memequal16(p, q unsafe.Pointer) bool {
	return *(*int16)(p) == *(*int16)(q)
}
func memequal32(p, q unsafe.Pointer) bool {
	return *(*int32)(p) == *(*int32)(q)
}
",242.0,21.0,6233.0,unsafe.Pointer,alg.go,10428.0,389.0,runtime,std,std,kubernetes/kubernetes,runtime/alg.go,conversion-struct-basic
393,"		return &(*u)(unsafe.Pointer(t)).u
","		type u struct {
			_type
			u uncommontype
		}
		return &(*u)(unsafe.Pointer(t)).u
	}
}

func (t *_type) name() string {
	if t.tflag&tflagNamed == 0 {
",116.0,15.0,2688.0,unsafe.Pointer,type.go,18709.0,726.0,runtime,std,std,kubernetes/kubernetes,runtime/type.go,conversion-struct-struct
394,"func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
","}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
	_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
",510.0,25.0,12595.0,unsafe.Pointer,zsyscall_linux_amd64.go,19148.0,745.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20200515095857-1151b9dac4a9,mattermost/mattermost-server,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
395,"func (a *traceAlloc) alloc(n uintptr) unsafe.Pointer {
","func (p traceAllocBlockPtr) ptr() *traceAllocBlock   { return (*traceAllocBlock)(unsafe.Pointer(p)) }
func (p *traceAllocBlockPtr) set(x *traceAllocBlock) { *p = traceAllocBlockPtr(unsafe.Pointer(x)) }

// alloc allocates n-byte block.
func (a *traceAlloc) alloc(n uintptr) unsafe.Pointer {
	n = alignUp(n, sys.PtrSize)
	if a.head == 0 || a.off+n > uintptr(len(a.head.ptr().data)) {
		if n > uintptr(len(a.head.ptr().data)) {
			throw(""trace: alloc too large"")
		}
",924.0,38.0,30782.0,unsafe.Pointer,trace.go,38634.0,1214.0,runtime,std,std,kubernetes/kubernetes,runtime/trace.go,direct-memory-access
396,"		ts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0]))
","		if _cgo_thread_start == nil {
			throw(""_cgo_thread_start missing"")
		}
		ts.g.set(mp.g0)
		ts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0]))
		ts.fn = unsafe.Pointer(funcPC(mstart))
		if msanenabled {
			msanwrite(unsafe.Pointer(&ts), unsafe.Sizeof(ts))
		}
		execLock.rlock() // Prevent process clone.
",1742.0,21.0,51812.0,unsafe.Pointer,proc.go,153166.0,5418.0,runtime,std,std,kubernetes/kubernetes,runtime/proc.go,conversion-struct-basic
397,"func sigtramp(sig uint32, info *siginfo, ctx unsafe.Pointer)
","//#define sa_handler k_sa_handler
//#endif

func sigreturn()
func sigtramp(sig uint32, info *siginfo, ctx unsafe.Pointer)
func cgoSigtramp()

//go:noescape
func sigaltstack(new, old *stackt)

",370.0,45.0,9995.0,unsafe.Pointer,os_linux.go,13478.0,500.0,runtime,std,std,kubernetes/kubernetes,runtime/os_linux.go,data-structure
398,"					check.errorf(pos, ""embedded field type cannot be unsafe.Pointer"")
","				}

				// unsafe.Pointer is treated like a regular pointer
				if t.kind == UnsafePointer {
					check.errorf(pos, ""embedded field type cannot be unsafe.Pointer"")
					addInvalid(name, pos)
					continue
				}

			case *Pointer:
",726.0,54.0,20287.0,unsafe.Pointer,typexpr.go,21091.0,764.0,go/types,std,std,kubernetes/kubernetes,go/types/typexpr.go,unused
399,"	_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)
","
// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

func Getrusage(who int, rusage *Rusage) (err error) {
	_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)
	if e1 != 0 {
		err = errnoErr(e1)
	}
	return
}
",816.0,61.0,20101.0,unsafe.Pointer,zsyscall_linux_amd64.go,58778.0,2387.0,golang.org/x/sys/unix,golang.org/x/sys,v0.0.0-20190312061237-fead79001313,gorgonia/gorgonia,golang.org/x/sys/unix/zsyscall_linux_amd64.go,syscall
