Module: gorgonia.org/tensor
Version: v0.9.6

Package: gorgonia.org/tensor/native
File: iterator_native.go
Line: 907

Imported (possibly among others) by: gorgonia/gorgonia

Label 1 (What is happening?): conversion-header
Label 2 (For what purpose?): efficiency

--------------------------------------------------------------
Snippet line:

		retVal[i] = *(*[]float64)(unsafe.Pointer(hdr))

--------------------------------------------------------------
+/- 5 lines context:

			Data: uintptr(unsafe.Pointer(&data[start])),
			Len:  cols,
			Cap:  cols,
		}
		retVal[i] = *(*[]float64)(unsafe.Pointer(hdr))
	}
	return
}

// Tensor3F64 converts a *Dense into  a [][][]float64.

--------------------------------------------------------------
+/- 100 lines context:

func VectorF32(t *Dense) (retVal []float32, err error) {
	if err = checkNativeIterable(t, 1, Float32); err != nil {
		return nil, err
	}
	return t.Float32s(), nil
}

// MatrixF32 converts a  *Dense into a [][]float32
// If the *Dense does not represent a matrix of the wanted type, it will return an error.
func MatrixF32(t *Dense) (retVal [][]float32, err error) {
	if err = checkNativeIterable(t, 2, Float32); err != nil {
		return nil, err
	}

	data := t.Float32s()
	shape := t.Shape()
	strides := t.Strides()

	rows := shape[0]
	cols := shape[1]
	rowStride := strides[0]
	retVal = make([][]float32, rows)
	for i := range retVal {
		start := i * rowStride
		hdr := &reflect.SliceHeader{
			Data: uintptr(unsafe.Pointer(&data[start])),
			Len:  cols,
			Cap:  cols,
		}
		retVal[i] = *(*[]float32)(unsafe.Pointer(hdr))
	}
	return
}

// Tensor3F32 converts a *Dense into  a [][][]float32.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3F32(t *Dense) (retVal [][][]float32, err error) {
	if err = checkNativeIterable(t, 3, Float32); err != nil {
		return nil, err
	}

	data := t.Float32s()
	shape := t.Shape()
	strides := t.Strides()

	layers := shape[0]
	rows := shape[1]
	cols := shape[2]
	layerStride := strides[0]
	rowStride := strides[1]
	retVal = make([][][]float32, layers)
	for i := range retVal {
		retVal[i] = make([][]float32, rows)
		for j := range retVal[i] {
			start := i*layerStride + j*rowStride
			hdr := &reflect.SliceHeader{
				Data: uintptr(unsafe.Pointer(&data[start])),
				Len:  cols,
				Cap:  cols,
			}
			retVal[i][j] = *(*[]float32)(unsafe.Pointer(hdr))
		}
	}
	return
}

/* Native Iterables for float64 */

// VectorF64 converts a *Dense into a []float64
// If the *Dense does not represent a vector of the wanted type, it will return an error.
func VectorF64(t *Dense) (retVal []float64, err error) {
	if err = checkNativeIterable(t, 1, Float64); err != nil {
		return nil, err
	}
	return t.Float64s(), nil
}

// MatrixF64 converts a  *Dense into a [][]float64
// If the *Dense does not represent a matrix of the wanted type, it will return an error.
func MatrixF64(t *Dense) (retVal [][]float64, err error) {
	if err = checkNativeIterable(t, 2, Float64); err != nil {
		return nil, err
	}

	data := t.Float64s()
	shape := t.Shape()
	strides := t.Strides()

	rows := shape[0]
	cols := shape[1]
	rowStride := strides[0]
	retVal = make([][]float64, rows)
	for i := range retVal {
		start := i * rowStride
		hdr := &reflect.SliceHeader{
			Data: uintptr(unsafe.Pointer(&data[start])),
			Len:  cols,
			Cap:  cols,
		}
		retVal[i] = *(*[]float64)(unsafe.Pointer(hdr))
	}
	return
}

// Tensor3F64 converts a *Dense into  a [][][]float64.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3F64(t *Dense) (retVal [][][]float64, err error) {
	if err = checkNativeIterable(t, 3, Float64); err != nil {
		return nil, err
	}

	data := t.Float64s()
	shape := t.Shape()
	strides := t.Strides()

	layers := shape[0]
	rows := shape[1]
	cols := shape[2]
	layerStride := strides[0]
	rowStride := strides[1]
	retVal = make([][][]float64, layers)
	for i := range retVal {
		retVal[i] = make([][]float64, rows)
		for j := range retVal[i] {
			start := i*layerStride + j*rowStride
			hdr := &reflect.SliceHeader{
				Data: uintptr(unsafe.Pointer(&data[start])),
				Len:  cols,
				Cap:  cols,
			}
			retVal[i][j] = *(*[]float64)(unsafe.Pointer(hdr))
		}
	}
	return
}

/* Native Iterables for complex64 */

// VectorC64 converts a *Dense into a []complex64
// If the *Dense does not represent a vector of the wanted type, it will return an error.
func VectorC64(t *Dense) (retVal []complex64, err error) {
	if err = checkNativeIterable(t, 1, Complex64); err != nil {
		return nil, err
	}
	return t.Complex64s(), nil
}

// MatrixC64 converts a  *Dense into a [][]complex64
// If the *Dense does not represent a matrix of the wanted type, it will return an error.
func MatrixC64(t *Dense) (retVal [][]complex64, err error) {
	if err = checkNativeIterable(t, 2, Complex64); err != nil {
		return nil, err
	}

	data := t.Complex64s()
	shape := t.Shape()
	strides := t.Strides()

	rows := shape[0]
	cols := shape[1]
	rowStride := strides[0]
	retVal = make([][]complex64, rows)
	for i := range retVal {
		start := i * rowStride
		hdr := &reflect.SliceHeader{
			Data: uintptr(unsafe.Pointer(&data[start])),
			Len:  cols,
			Cap:  cols,
		}
		retVal[i] = *(*[]complex64)(unsafe.Pointer(hdr))
	}
	return
}

// Tensor3C64 converts a *Dense into  a [][][]complex64.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3C64(t *Dense) (retVal [][][]complex64, err error) {
	if err = checkNativeIterable(t, 3, Complex64); err != nil {
		return nil, err
	}

	data := t.Complex64s()
	shape := t.Shape()
	strides := t.Strides()

	layers := shape[0]
	rows := shape[1]
	cols := shape[2]
	layerStride := strides[0]
	rowStride := strides[1]
	retVal = make([][][]complex64, layers)
	for i := range retVal {
		retVal[i] = make([][]complex64, rows)
		for j := range retVal[i] {
			start := i*layerStride + j*rowStride
			hdr := &reflect.SliceHeader{
				Data: uintptr(unsafe.Pointer(&data[start])),
				Len:  cols,
				Cap:  cols,
			}

