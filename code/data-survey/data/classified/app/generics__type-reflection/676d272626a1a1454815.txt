Module: gorgonia.org/tensor
Version: v0.9.6

Package: gorgonia.org/tensor/internal/execution
File: eng_reduce.go
Line: 707

Imported (possibly among others) by: gorgonia/gorgonia

Label 1 (What is happening?): type-reflection
Label 2 (For what purpose?): generics

--------------------------------------------------------------
Snippet line:

		var f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer

--------------------------------------------------------------
+/- 5 lines context:

		rt := retVal.Strings()
		reduceDefaultStr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case UnsafePointer:
		var f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer
		if f, ok = fn.(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.UnsafePointers()
		rt := retVal.UnsafePointers()

--------------------------------------------------------------
+/- 100 lines context:

		var f func(uint, uint) uint
		if f, ok = fn.(func(uint, uint) uint); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uints()
		rt := retVal.Uints()
		reduceDefaultU(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint8:
		var f func(uint8, uint8) uint8
		if f, ok = fn.(func(uint8, uint8) uint8); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uint8s()
		rt := retVal.Uint8s()
		reduceDefaultU8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint16:
		var f func(uint16, uint16) uint16
		if f, ok = fn.(func(uint16, uint16) uint16); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uint16s()
		rt := retVal.Uint16s()
		reduceDefaultU16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint32:
		var f func(uint32, uint32) uint32
		if f, ok = fn.(func(uint32, uint32) uint32); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uint32s()
		rt := retVal.Uint32s()
		reduceDefaultU32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint64:
		var f func(uint64, uint64) uint64
		if f, ok = fn.(func(uint64, uint64) uint64); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uint64s()
		rt := retVal.Uint64s()
		reduceDefaultU64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uintptr:
		var f func(uintptr, uintptr) uintptr
		if f, ok = fn.(func(uintptr, uintptr) uintptr); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uintptrs()
		rt := retVal.Uintptrs()
		reduceDefaultUintptr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Float32:
		var f func(float32, float32) float32
		if f, ok = fn.(func(float32, float32) float32); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Float32s()
		rt := retVal.Float32s()
		reduceDefaultF32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Float64:
		var f func(float64, float64) float64
		if f, ok = fn.(func(float64, float64) float64); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Float64s()
		rt := retVal.Float64s()
		reduceDefaultF64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Complex64:
		var f func(complex64, complex64) complex64
		if f, ok = fn.(func(complex64, complex64) complex64); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Complex64s()
		rt := retVal.Complex64s()
		reduceDefaultC64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Complex128:
		var f func(complex128, complex128) complex128
		if f, ok = fn.(func(complex128, complex128) complex128); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Complex128s()
		rt := retVal.Complex128s()
		reduceDefaultC128(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case String:
		var f func(string, string) string
		if f, ok = fn.(func(string, string) string); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Strings()
		rt := retVal.Strings()
		reduceDefaultStr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case UnsafePointer:
		var f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer
		if f, ok = fn.(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.UnsafePointers()
		rt := retVal.UnsafePointers()
		reduceDefaultUnsafePointer(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	default:
		return errors.Errorf("Unsupported type %v for ReduceDefault", t)
	}
}

func (e E) Reduce(t reflect.Type, a *storage.Header, defaultValue interface{}, fn interface{}) (retVal interface{}, err error) {
	var ok bool
	switch t {
	case Bool:
		var f func(bool, bool) bool
		var def bool
		if f, ok = fn.(func(bool, bool) bool); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(bool); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		retVal = ReduceB(f, def, a.Bools()...)
		return
	case Int:
		var f func(int, int) int
		var def int
		if f, ok = fn.(func(int, int) int); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(int); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		retVal = ReduceI(f, def, a.Ints()...)
		return
	case Int8:
		var f func(int8, int8) int8
		var def int8
		if f, ok = fn.(func(int8, int8) int8); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(int8); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		retVal = ReduceI8(f, def, a.Int8s()...)
		return
	case Int16:
		var f func(int16, int16) int16
		var def int16
		if f, ok = fn.(func(int16, int16) int16); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(int16); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		retVal = ReduceI16(f, def, a.Int16s()...)
		return
	case Int32:
		var f func(int32, int32) int32
		var def int32
		if f, ok = fn.(func(int32, int32) int32); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(int32); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		retVal = ReduceI32(f, def, a.Int32s()...)
		return
	case Int64:
		var f func(int64, int64) int64
		var def int64
		if f, ok = fn.(func(int64, int64) int64); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(int64); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		retVal = ReduceI64(f, def, a.Int64s()...)
		return
	case Uint:
		var f func(uint, uint) uint
		var def uint
		if f, ok = fn.(func(uint, uint) uint); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(uint); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		retVal = ReduceU(f, def, a.Uints()...)
		return
	case Uint8:
		var f func(uint8, uint8) uint8
		var def uint8
		if f, ok = fn.(func(uint8, uint8) uint8); !ok {
			return nil, errors.Errorf(reductionErrMsg, fn)
		}
		if def, ok = defaultValue.(uint8); !ok {
			return nil, errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)

