Module: gorgonia.org/tensor
Version: v0.9.6

Package: gorgonia.org/tensor/internal/execution
File: eng_reduce.go
Line: 539

Imported (possibly among others) by: gorgonia/gorgonia

Label 1 (What is happening?): delegate
Label 2 (For what purpose?): generics

--------------------------------------------------------------
Snippet line:

case func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:
--------------------------------------------------------------
+/- 5 lines context:

		dt := data.UnsafePointers()
		rt := retVal.UnsafePointers()
		switch f := fn.(type) {
		case func([]unsafe.Pointer) unsafe.Pointer:
			reduceLastUnsafePointer(dt, rt, dimSize, def, f)
		case func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:
			genericReduceLastUnsafePointer(dt, rt, dimSize, def, f)
		default:
			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
--------------------------------------------------------------
+/- 100 lines context:

			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
	case Float32:
		var def float32

		if def, ok = defaultValue.(float32); !ok {
			return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		dt := data.Float32s()
		rt := retVal.Float32s()
		switch f := fn.(type) {
		case func([]float32) float32:
			reduceLastF32(dt, rt, dimSize, def, f)
		case func(float32, float32) float32:
			genericReduceLastF32(dt, rt, dimSize, def, f)
		default:
			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
	case Float64:
		var def float64

		if def, ok = defaultValue.(float64); !ok {
			return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		dt := data.Float64s()
		rt := retVal.Float64s()
		switch f := fn.(type) {
		case func([]float64) float64:
			reduceLastF64(dt, rt, dimSize, def, f)
		case func(float64, float64) float64:
			genericReduceLastF64(dt, rt, dimSize, def, f)
		default:
			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
	case Complex64:
		var def complex64

		if def, ok = defaultValue.(complex64); !ok {
			return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		dt := data.Complex64s()
		rt := retVal.Complex64s()
		switch f := fn.(type) {
		case func([]complex64) complex64:
			reduceLastC64(dt, rt, dimSize, def, f)
		case func(complex64, complex64) complex64:
			genericReduceLastC64(dt, rt, dimSize, def, f)
		default:
			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
	case Complex128:
		var def complex128

		if def, ok = defaultValue.(complex128); !ok {
			return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		dt := data.Complex128s()
		rt := retVal.Complex128s()
		switch f := fn.(type) {
		case func([]complex128) complex128:
			reduceLastC128(dt, rt, dimSize, def, f)
		case func(complex128, complex128) complex128:
			genericReduceLastC128(dt, rt, dimSize, def, f)
		default:
			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
	case String:
		var def string

		if def, ok = defaultValue.(string); !ok {
			return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		dt := data.Strings()
		rt := retVal.Strings()
		switch f := fn.(type) {
		case func([]string) string:
			reduceLastStr(dt, rt, dimSize, def, f)
		case func(string, string) string:
			genericReduceLastStr(dt, rt, dimSize, def, f)
		default:
			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
	case UnsafePointer:
		var def unsafe.Pointer

		if def, ok = defaultValue.(unsafe.Pointer); !ok {
			return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)
		}
		dt := data.UnsafePointers()
		rt := retVal.UnsafePointers()
		switch f := fn.(type) {
		case func([]unsafe.Pointer) unsafe.Pointer:
			reduceLastUnsafePointer(dt, rt, dimSize, def, f)
		case func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:
			genericReduceLastUnsafePointer(dt, rt, dimSize, def, f)
		default:
			return errors.Errorf(reductionErrMsg, fn)
		}
		return nil
	default:
		return errors.Errorf("Unsupported type %v for ReduceLast", t)
	}
}

func (e E) ReduceDefault(t reflect.Type, data *storage.Header, retVal *storage.Header, dim0 int, dimSize int, outerStride int, stride int, expected int, fn interface{}) (err error) {
	var ok bool
	switch t {
	case Bool:
		var f func(bool, bool) bool
		if f, ok = fn.(func(bool, bool) bool); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Bools()
		rt := retVal.Bools()
		reduceDefaultB(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Int:
		var f func(int, int) int
		if f, ok = fn.(func(int, int) int); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Ints()
		rt := retVal.Ints()
		reduceDefaultI(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Int8:
		var f func(int8, int8) int8
		if f, ok = fn.(func(int8, int8) int8); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Int8s()
		rt := retVal.Int8s()
		reduceDefaultI8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Int16:
		var f func(int16, int16) int16
		if f, ok = fn.(func(int16, int16) int16); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Int16s()
		rt := retVal.Int16s()
		reduceDefaultI16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Int32:
		var f func(int32, int32) int32
		if f, ok = fn.(func(int32, int32) int32); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Int32s()
		rt := retVal.Int32s()
		reduceDefaultI32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Int64:
		var f func(int64, int64) int64
		if f, ok = fn.(func(int64, int64) int64); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Int64s()
		rt := retVal.Int64s()
		reduceDefaultI64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint:
		var f func(uint, uint) uint
		if f, ok = fn.(func(uint, uint) uint); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uints()
		rt := retVal.Uints()
		reduceDefaultU(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint8:
		var f func(uint8, uint8) uint8
		if f, ok = fn.(func(uint8, uint8) uint8); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uint8s()
		rt := retVal.Uint8s()
		reduceDefaultU8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint16:
		var f func(uint16, uint16) uint16
		if f, ok = fn.(func(uint16, uint16) uint16); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uint16s()
		rt := retVal.Uint16s()
		reduceDefaultU16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)
		return nil
	case Uint32:
		var f func(uint32, uint32) uint32
		if f, ok = fn.(func(uint32, uint32) uint32); !ok {
			return errors.Errorf(reductionErrMsg, fn)
		}
		dt := data.Uint32s()

