Module: github.com/ugorji/go
Version: v0.0.0-20170918222552-54210f4e076c

Package: github.com/ugorji/go/codec
File: helper_unsafe.go
Line: 199

Imported (possibly among others) by: weaveworks/scope

Label 1 (What is happening?): conversion-struct-struct
Label 2 (For what purpose?): generics

--------------------------------------------------------------
Snippet line:

urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
--------------------------------------------------------------
+/- 5 lines context:

	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*int16)(urv.ptr) = int16(f.d.d.DecodeInt(16))
}

func (f *decFnInfo) kInt32(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*int32)(urv.ptr) = int32(f.d.d.DecodeInt(32))
}

func (f *decFnInfo) kInt64(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
--------------------------------------------------------------
+/- 100 lines context:

// }

type ptrToRVKV struct {
	k uintptr
	v reflect.Value
}

type ptrToRvMap struct {
	// m map[uintptr]reflect.Value
	a [4]ptrToRVKV
	v []ptrToRVKV
}

func (p *ptrToRvMap) init() {
	// fmt.Printf(">>>> new ptr to rv map\n")
	// p.m = make(map[uintptr]reflect.Value, 32)
	p.v = p.a[:0]
}

func (p *ptrToRvMap) get(intf interface{}) (rv reflect.Value) {
	word := uintptr(((*unsafeIntf)(unsafe.Pointer(&intf))).word)
	// binary search. adapted from sort/search.go.
	h, i, j := 0, 0, len(p.v)
	for i < j {
		h = i + (j-i)/2
		if p.v[h].k < word {
			i = h + 1
		} else {
			j = h
		}
	}
	if i < len(p.v) && p.v[i].k == word {
		return p.v[i].v
	}

	// insert into position i
	// fmt.Printf(">>>> resetting rv for word: %x, interface: %v\n", word, intf)
	rv = reflect.ValueOf(intf).Elem()
	p.v = append(p.v, ptrToRVKV{})
	copy(p.v[i+1:len(p.v)], p.v[i:len(p.v)-1])
	p.v[i].k, p.v[i].v = word, rv
	return
}

// --------------------------
type atomicTypeInfoSlice struct {
	v unsafe.Pointer
}

func (x *atomicTypeInfoSlice) load() *[]rtid2ti {
	return (*[]rtid2ti)(atomic.LoadPointer(&x.v))
}

func (x *atomicTypeInfoSlice) store(p *[]rtid2ti) {
	atomic.StorePointer(&x.v, unsafe.Pointer(p))
}

// --------------------------
func (f *decFnInfo) raw(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*[]byte)(urv.ptr) = f.d.raw()
}

func (f *decFnInfo) kString(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*string)(urv.ptr) = f.d.d.DecodeString()
}

func (f *decFnInfo) kBool(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*bool)(urv.ptr) = f.d.d.DecodeBool()
}

func (f *decFnInfo) kFloat32(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*float32)(urv.ptr) = float32(f.d.d.DecodeFloat(true))
}

func (f *decFnInfo) kFloat64(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*float64)(urv.ptr) = f.d.d.DecodeFloat(false)
}

func (f *decFnInfo) kInt(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*int)(urv.ptr) = int(f.d.d.DecodeInt(intBitsize))
}

func (f *decFnInfo) kInt8(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*int8)(urv.ptr) = int8(f.d.d.DecodeInt(8))
}

func (f *decFnInfo) kInt16(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*int16)(urv.ptr) = int16(f.d.d.DecodeInt(16))
}

func (f *decFnInfo) kInt32(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*int32)(urv.ptr) = int32(f.d.d.DecodeInt(32))
}

func (f *decFnInfo) kInt64(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*int64)(urv.ptr) = f.d.d.DecodeInt(64)
}

func (f *decFnInfo) kUint(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*uint)(urv.ptr) = uint(f.d.d.DecodeUint(uintBitsize))
}

func (f *decFnInfo) kUintptr(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*uintptr)(urv.ptr) = uintptr(f.d.d.DecodeUint(uintBitsize))
}

func (f *decFnInfo) kUint8(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*uint8)(urv.ptr) = uint8(f.d.d.DecodeUint(8))
}

func (f *decFnInfo) kUint16(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*uint16)(urv.ptr) = uint16(f.d.d.DecodeUint(16))
}

func (f *decFnInfo) kUint32(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*uint32)(urv.ptr) = uint32(f.d.d.DecodeUint(32))
}
func (f *decFnInfo) kUint64(rv reflect.Value) {
	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
	*(*uint64)(urv.ptr) = f.d.d.DecodeUint(64)
}

// func (p *ptrToRvMap) get(i interface{}) (rv reflect.Value) {
// 	word := uintptr(((*unsafeIntf)(unsafe.Pointer(&i))).word)
// 	rv, exists := p.m[word]
// 	if !exists {
// 		fmt.Printf(">>>> resetting rv for word: %x, interface: %v\n", word, i)
// 		rv = reflect.ValueOf(i).Elem()
// 		p.m[word] = rv
// 	}
// 	return
// }

// func rt2id(rt reflect.Type) uintptr {
// 	return uintptr(((*unsafeIntf)(unsafe.Pointer(&rt))).word)
// 	// var i interface{} = rt
// 	// // ui := (*unsafeIntf)(unsafe.Pointer(&i))
// 	// return ((*unsafeIntf)(unsafe.Pointer(&i))).word
// }

// func rv2i(rv reflect.Value) interface{} {
// 	urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))
// 	// non-reference type: already indir
// 	// reference type: depend on flagIndir property ('cos maybe was double-referenced)
// 	// const (unsafeRvFlagKindMask    = 1<<5 - 1 , unsafeRvFlagIndir       = 1 << 7 )
// 	// rvk := reflect.Kind(urv.flag & (1<<5 - 1))
// 	// if (rvk == reflect.Chan ||
// 	// 	rvk == reflect.Func ||
// 	// 	rvk == reflect.Interface ||
// 	// 	rvk == reflect.Map ||
// 	// 	rvk == reflect.Ptr ||
// 	// 	rvk == reflect.UnsafePointer) && urv.flag&(1<<8) != 0 {
// 	// 	fmt.Printf(">>>>> ---- double indirect reference: %v, %v\n", rvk, rv.Type())
// 	// 	return *(*interface{})(unsafe.Pointer(&unsafeIntf{word: *(*unsafe.Pointer)(urv.ptr), typ: urv.typ}))
// 	// }
// 	if urv.flag&(1<<5-1) == uintptr(reflect.Map) && urv.flag&(1<<7) != 0 {
// 		// fmt.Printf(">>>>> ---- double indirect reference: %v, %v\n", rvk, rv.Type())
// 		return *(*interface{})(unsafe.Pointer(&unsafeIntf{word: *(*unsafe.Pointer)(urv.ptr), typ: urv.typ}))
// 	}
// 	// fmt.Printf(">>>>> ++++ direct reference: %v, %v\n", rvk, rv.Type())
// 	return *(*interface{})(unsafe.Pointer(&unsafeIntf{word: urv.ptr, typ: urv.typ}))
// }

// const (
// 	unsafeRvFlagKindMask    = 1<<5 - 1
// 	unsafeRvKindDirectIface = 1 << 5
// 	unsafeRvFlagIndir       = 1 << 7
// 	unsafeRvFlagAddr        = 1 << 8
// 	unsafeRvFlagMethod      = 1 << 9

// 	_USE_RV_INTERFACE bool = false
// 	_UNSAFE_RV_DEBUG       = true
// )

// type unsafeRtype struct {
// 	_    [2]uintptr
// 	_    uint32
// 	_    uint8
// 	_    uint8
// 	_    uint8
// 	kind uint8
// 	_    [2]uintptr
// 	_    int32
// }


