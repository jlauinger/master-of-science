Module: github.com/elastic/go-structform
Version: v0.0.6

Package: github.com/elastic/go-structform/gotype
File: unfold_primitive.generated.go
Line: 159

Imported (possibly among others) by: elastic/beats

Label 1 (What is happening?): delegate
Label 2 (For what purpose?): serialization

--------------------------------------------------------------
Snippet line:

func (u *unfolderUint) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
--------------------------------------------------------------
+/- 5 lines context:


func newUnfolderUint() *unfolderUint {
	return _singletonUnfolderUint
}

func (u *unfolderUint) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderUint) cleanup(ctx *unfoldCtx) {
--------------------------------------------------------------
+/- 100 lines context:

	unfolderErrUnknown
}

var _singletonUnfolderIfc = &unfolderIfc{}

func newUnfolderIfc() *unfolderIfc {
	return _singletonUnfolderIfc
}

func (u *unfolderIfc) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderIfc) cleanup(ctx *unfoldCtx) {
	ctx.unfolder.pop()
	ctx.ptr.pop()
}

func (u *unfolderIfc) ptr(ctx *unfoldCtx) *interface{} {
	return (*interface{})(ctx.ptr.current)
}

func (u *unfolderIfc) assign(ctx *unfoldCtx, v interface{}) error {
	*u.ptr(ctx) = v
	u.cleanup(ctx)
	return nil
}

type unfolderBool struct {
	unfolderErrUnknown
}

var _singletonUnfolderBool = &unfolderBool{}

func newUnfolderBool() *unfolderBool {
	return _singletonUnfolderBool
}

func (u *unfolderBool) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderBool) cleanup(ctx *unfoldCtx) {
	ctx.unfolder.pop()
	ctx.ptr.pop()
}

func (u *unfolderBool) ptr(ctx *unfoldCtx) *bool {
	return (*bool)(ctx.ptr.current)
}

func (u *unfolderBool) assign(ctx *unfoldCtx, v bool) error {
	*u.ptr(ctx) = v
	u.cleanup(ctx)
	return nil
}

type unfolderString struct {
	unfolderErrUnknown
}

var _singletonUnfolderString = &unfolderString{}

func newUnfolderString() *unfolderString {
	return _singletonUnfolderString
}

func (u *unfolderString) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderString) cleanup(ctx *unfoldCtx) {
	ctx.unfolder.pop()
	ctx.ptr.pop()
}

func (u *unfolderString) ptr(ctx *unfoldCtx) *string {
	return (*string)(ctx.ptr.current)
}

func (u *unfolderString) assign(ctx *unfoldCtx, v string) error {
	*u.ptr(ctx) = v
	u.cleanup(ctx)
	return nil
}

type unfolderUint struct {
	unfolderErrUnknown
}

var _singletonUnfolderUint = &unfolderUint{}

func newUnfolderUint() *unfolderUint {
	return _singletonUnfolderUint
}

func (u *unfolderUint) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderUint) cleanup(ctx *unfoldCtx) {
	ctx.unfolder.pop()
	ctx.ptr.pop()
}

func (u *unfolderUint) ptr(ctx *unfoldCtx) *uint {
	return (*uint)(ctx.ptr.current)
}

func (u *unfolderUint) assign(ctx *unfoldCtx, v uint) error {
	*u.ptr(ctx) = v
	u.cleanup(ctx)
	return nil
}

type unfolderUint8 struct {
	unfolderErrUnknown
}

var _singletonUnfolderUint8 = &unfolderUint8{}

func newUnfolderUint8() *unfolderUint8 {
	return _singletonUnfolderUint8
}

func (u *unfolderUint8) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderUint8) cleanup(ctx *unfoldCtx) {
	ctx.unfolder.pop()
	ctx.ptr.pop()
}

func (u *unfolderUint8) ptr(ctx *unfoldCtx) *uint8 {
	return (*uint8)(ctx.ptr.current)
}

func (u *unfolderUint8) assign(ctx *unfoldCtx, v uint8) error {
	*u.ptr(ctx) = v
	u.cleanup(ctx)
	return nil
}

type unfolderUint16 struct {
	unfolderErrUnknown
}

var _singletonUnfolderUint16 = &unfolderUint16{}

func newUnfolderUint16() *unfolderUint16 {
	return _singletonUnfolderUint16
}

func (u *unfolderUint16) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderUint16) cleanup(ctx *unfoldCtx) {
	ctx.unfolder.pop()
	ctx.ptr.pop()
}

func (u *unfolderUint16) ptr(ctx *unfoldCtx) *uint16 {
	return (*uint16)(ctx.ptr.current)
}

func (u *unfolderUint16) assign(ctx *unfoldCtx, v uint16) error {
	*u.ptr(ctx) = v
	u.cleanup(ctx)
	return nil
}

type unfolderUint32 struct {
	unfolderErrUnknown
}

var _singletonUnfolderUint32 = &unfolderUint32{}

func newUnfolderUint32() *unfolderUint32 {
	return _singletonUnfolderUint32
}

func (u *unfolderUint32) initState(ctx *unfoldCtx, ptr unsafe.Pointer) {
	ctx.unfolder.push(u)
	ctx.ptr.push(ptr)
}

func (u *unfolderUint32) cleanup(ctx *unfoldCtx) {
	ctx.unfolder.pop()
	ctx.ptr.pop()
}

func (u *unfolderUint32) ptr(ctx *unfoldCtx) *uint32 {

